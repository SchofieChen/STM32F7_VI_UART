
STM32F7_HighSpeed_IEPE_TESTIO_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a83c  08008200  08008200  00008200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08012a40  08012a40  00012a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b30  08012b30  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08012b30  08012b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b38  08012b38  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b38  08012b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b3c  08012b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08012b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027838  20000020  08012b60  00020020  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  20027858  08012b60  00027858  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0ac  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003845  00000000  00000000  0003b0fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001438  00000000  00000000  0003e940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001290  00000000  00000000  0003fd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002888b  00000000  00000000  00041008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011add  00000000  00000000  00069893  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffebc  00000000  00000000  0007b370  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017b22c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000539c  00000000  00000000  0017b2a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008200 <__do_global_dtors_aux>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4c05      	ldr	r4, [pc, #20]	; (8008218 <__do_global_dtors_aux+0x18>)
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	b933      	cbnz	r3, 8008216 <__do_global_dtors_aux+0x16>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__do_global_dtors_aux+0x1c>)
 800820a:	b113      	cbz	r3, 8008212 <__do_global_dtors_aux+0x12>
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <__do_global_dtors_aux+0x20>)
 800820e:	f3af 8000 	nop.w
 8008212:	2301      	movs	r3, #1
 8008214:	7023      	strb	r3, [r4, #0]
 8008216:	bd10      	pop	{r4, pc}
 8008218:	20000020 	.word	0x20000020
 800821c:	00000000 	.word	0x00000000
 8008220:	08012a24 	.word	0x08012a24

08008224 <frame_dummy>:
 8008224:	b508      	push	{r3, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <frame_dummy+0x10>)
 8008228:	b11b      	cbz	r3, 8008232 <frame_dummy+0xe>
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <frame_dummy+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <frame_dummy+0x18>)
 800822e:	f3af 8000 	nop.w
 8008232:	bd08      	pop	{r3, pc}
 8008234:	00000000 	.word	0x00000000
 8008238:	20000024 	.word	0x20000024
 800823c:	08012a24 	.word	0x08012a24

08008240 <strlen>:
 8008240:	4603      	mov	r3, r0
 8008242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008246:	2a00      	cmp	r2, #0
 8008248:	d1fb      	bne.n	8008242 <strlen+0x2>
 800824a:	1a18      	subs	r0, r3, r0
 800824c:	3801      	subs	r0, #1
 800824e:	4770      	bx	lr

08008250 <__aeabi_uldivmod>:
 8008250:	b953      	cbnz	r3, 8008268 <__aeabi_uldivmod+0x18>
 8008252:	b94a      	cbnz	r2, 8008268 <__aeabi_uldivmod+0x18>
 8008254:	2900      	cmp	r1, #0
 8008256:	bf08      	it	eq
 8008258:	2800      	cmpeq	r0, #0
 800825a:	bf1c      	itt	ne
 800825c:	f04f 31ff 	movne.w	r1, #4294967295
 8008260:	f04f 30ff 	movne.w	r0, #4294967295
 8008264:	f000 b972 	b.w	800854c <__aeabi_idiv0>
 8008268:	f1ad 0c08 	sub.w	ip, sp, #8
 800826c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008270:	f000 f806 	bl	8008280 <__udivmoddi4>
 8008274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800827c:	b004      	add	sp, #16
 800827e:	4770      	bx	lr

08008280 <__udivmoddi4>:
 8008280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	9e08      	ldr	r6, [sp, #32]
 8008286:	4604      	mov	r4, r0
 8008288:	4688      	mov	r8, r1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d14b      	bne.n	8008326 <__udivmoddi4+0xa6>
 800828e:	428a      	cmp	r2, r1
 8008290:	4615      	mov	r5, r2
 8008292:	d967      	bls.n	8008364 <__udivmoddi4+0xe4>
 8008294:	fab2 f282 	clz	r2, r2
 8008298:	b14a      	cbz	r2, 80082ae <__udivmoddi4+0x2e>
 800829a:	f1c2 0720 	rsb	r7, r2, #32
 800829e:	fa01 f302 	lsl.w	r3, r1, r2
 80082a2:	fa20 f707 	lsr.w	r7, r0, r7
 80082a6:	4095      	lsls	r5, r2
 80082a8:	ea47 0803 	orr.w	r8, r7, r3
 80082ac:	4094      	lsls	r4, r2
 80082ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80082b2:	0c23      	lsrs	r3, r4, #16
 80082b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80082b8:	fa1f fc85 	uxth.w	ip, r5
 80082bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80082c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80082c4:	fb07 f10c 	mul.w	r1, r7, ip
 80082c8:	4299      	cmp	r1, r3
 80082ca:	d909      	bls.n	80082e0 <__udivmoddi4+0x60>
 80082cc:	18eb      	adds	r3, r5, r3
 80082ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80082d2:	f080 811b 	bcs.w	800850c <__udivmoddi4+0x28c>
 80082d6:	4299      	cmp	r1, r3
 80082d8:	f240 8118 	bls.w	800850c <__udivmoddi4+0x28c>
 80082dc:	3f02      	subs	r7, #2
 80082de:	442b      	add	r3, r5
 80082e0:	1a5b      	subs	r3, r3, r1
 80082e2:	b2a4      	uxth	r4, r4
 80082e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80082e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80082ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80082f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80082f4:	45a4      	cmp	ip, r4
 80082f6:	d909      	bls.n	800830c <__udivmoddi4+0x8c>
 80082f8:	192c      	adds	r4, r5, r4
 80082fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80082fe:	f080 8107 	bcs.w	8008510 <__udivmoddi4+0x290>
 8008302:	45a4      	cmp	ip, r4
 8008304:	f240 8104 	bls.w	8008510 <__udivmoddi4+0x290>
 8008308:	3802      	subs	r0, #2
 800830a:	442c      	add	r4, r5
 800830c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008310:	eba4 040c 	sub.w	r4, r4, ip
 8008314:	2700      	movs	r7, #0
 8008316:	b11e      	cbz	r6, 8008320 <__udivmoddi4+0xa0>
 8008318:	40d4      	lsrs	r4, r2
 800831a:	2300      	movs	r3, #0
 800831c:	e9c6 4300 	strd	r4, r3, [r6]
 8008320:	4639      	mov	r1, r7
 8008322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008326:	428b      	cmp	r3, r1
 8008328:	d909      	bls.n	800833e <__udivmoddi4+0xbe>
 800832a:	2e00      	cmp	r6, #0
 800832c:	f000 80eb 	beq.w	8008506 <__udivmoddi4+0x286>
 8008330:	2700      	movs	r7, #0
 8008332:	e9c6 0100 	strd	r0, r1, [r6]
 8008336:	4638      	mov	r0, r7
 8008338:	4639      	mov	r1, r7
 800833a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833e:	fab3 f783 	clz	r7, r3
 8008342:	2f00      	cmp	r7, #0
 8008344:	d147      	bne.n	80083d6 <__udivmoddi4+0x156>
 8008346:	428b      	cmp	r3, r1
 8008348:	d302      	bcc.n	8008350 <__udivmoddi4+0xd0>
 800834a:	4282      	cmp	r2, r0
 800834c:	f200 80fa 	bhi.w	8008544 <__udivmoddi4+0x2c4>
 8008350:	1a84      	subs	r4, r0, r2
 8008352:	eb61 0303 	sbc.w	r3, r1, r3
 8008356:	2001      	movs	r0, #1
 8008358:	4698      	mov	r8, r3
 800835a:	2e00      	cmp	r6, #0
 800835c:	d0e0      	beq.n	8008320 <__udivmoddi4+0xa0>
 800835e:	e9c6 4800 	strd	r4, r8, [r6]
 8008362:	e7dd      	b.n	8008320 <__udivmoddi4+0xa0>
 8008364:	b902      	cbnz	r2, 8008368 <__udivmoddi4+0xe8>
 8008366:	deff      	udf	#255	; 0xff
 8008368:	fab2 f282 	clz	r2, r2
 800836c:	2a00      	cmp	r2, #0
 800836e:	f040 808f 	bne.w	8008490 <__udivmoddi4+0x210>
 8008372:	1b49      	subs	r1, r1, r5
 8008374:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008378:	fa1f f885 	uxth.w	r8, r5
 800837c:	2701      	movs	r7, #1
 800837e:	fbb1 fcfe 	udiv	ip, r1, lr
 8008382:	0c23      	lsrs	r3, r4, #16
 8008384:	fb0e 111c 	mls	r1, lr, ip, r1
 8008388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800838c:	fb08 f10c 	mul.w	r1, r8, ip
 8008390:	4299      	cmp	r1, r3
 8008392:	d907      	bls.n	80083a4 <__udivmoddi4+0x124>
 8008394:	18eb      	adds	r3, r5, r3
 8008396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800839a:	d202      	bcs.n	80083a2 <__udivmoddi4+0x122>
 800839c:	4299      	cmp	r1, r3
 800839e:	f200 80cd 	bhi.w	800853c <__udivmoddi4+0x2bc>
 80083a2:	4684      	mov	ip, r0
 80083a4:	1a59      	subs	r1, r3, r1
 80083a6:	b2a3      	uxth	r3, r4
 80083a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80083ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80083b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80083b4:	fb08 f800 	mul.w	r8, r8, r0
 80083b8:	45a0      	cmp	r8, r4
 80083ba:	d907      	bls.n	80083cc <__udivmoddi4+0x14c>
 80083bc:	192c      	adds	r4, r5, r4
 80083be:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c2:	d202      	bcs.n	80083ca <__udivmoddi4+0x14a>
 80083c4:	45a0      	cmp	r8, r4
 80083c6:	f200 80b6 	bhi.w	8008536 <__udivmoddi4+0x2b6>
 80083ca:	4618      	mov	r0, r3
 80083cc:	eba4 0408 	sub.w	r4, r4, r8
 80083d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80083d4:	e79f      	b.n	8008316 <__udivmoddi4+0x96>
 80083d6:	f1c7 0c20 	rsb	ip, r7, #32
 80083da:	40bb      	lsls	r3, r7
 80083dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80083e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80083e4:	fa01 f407 	lsl.w	r4, r1, r7
 80083e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80083ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80083f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80083f4:	4325      	orrs	r5, r4
 80083f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80083fa:	0c2c      	lsrs	r4, r5, #16
 80083fc:	fb08 3319 	mls	r3, r8, r9, r3
 8008400:	fa1f fa8e 	uxth.w	sl, lr
 8008404:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008408:	fb09 f40a 	mul.w	r4, r9, sl
 800840c:	429c      	cmp	r4, r3
 800840e:	fa02 f207 	lsl.w	r2, r2, r7
 8008412:	fa00 f107 	lsl.w	r1, r0, r7
 8008416:	d90b      	bls.n	8008430 <__udivmoddi4+0x1b0>
 8008418:	eb1e 0303 	adds.w	r3, lr, r3
 800841c:	f109 30ff 	add.w	r0, r9, #4294967295
 8008420:	f080 8087 	bcs.w	8008532 <__udivmoddi4+0x2b2>
 8008424:	429c      	cmp	r4, r3
 8008426:	f240 8084 	bls.w	8008532 <__udivmoddi4+0x2b2>
 800842a:	f1a9 0902 	sub.w	r9, r9, #2
 800842e:	4473      	add	r3, lr
 8008430:	1b1b      	subs	r3, r3, r4
 8008432:	b2ad      	uxth	r5, r5
 8008434:	fbb3 f0f8 	udiv	r0, r3, r8
 8008438:	fb08 3310 	mls	r3, r8, r0, r3
 800843c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008440:	fb00 fa0a 	mul.w	sl, r0, sl
 8008444:	45a2      	cmp	sl, r4
 8008446:	d908      	bls.n	800845a <__udivmoddi4+0x1da>
 8008448:	eb1e 0404 	adds.w	r4, lr, r4
 800844c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008450:	d26b      	bcs.n	800852a <__udivmoddi4+0x2aa>
 8008452:	45a2      	cmp	sl, r4
 8008454:	d969      	bls.n	800852a <__udivmoddi4+0x2aa>
 8008456:	3802      	subs	r0, #2
 8008458:	4474      	add	r4, lr
 800845a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800845e:	fba0 8902 	umull	r8, r9, r0, r2
 8008462:	eba4 040a 	sub.w	r4, r4, sl
 8008466:	454c      	cmp	r4, r9
 8008468:	46c2      	mov	sl, r8
 800846a:	464b      	mov	r3, r9
 800846c:	d354      	bcc.n	8008518 <__udivmoddi4+0x298>
 800846e:	d051      	beq.n	8008514 <__udivmoddi4+0x294>
 8008470:	2e00      	cmp	r6, #0
 8008472:	d069      	beq.n	8008548 <__udivmoddi4+0x2c8>
 8008474:	ebb1 050a 	subs.w	r5, r1, sl
 8008478:	eb64 0403 	sbc.w	r4, r4, r3
 800847c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008480:	40fd      	lsrs	r5, r7
 8008482:	40fc      	lsrs	r4, r7
 8008484:	ea4c 0505 	orr.w	r5, ip, r5
 8008488:	e9c6 5400 	strd	r5, r4, [r6]
 800848c:	2700      	movs	r7, #0
 800848e:	e747      	b.n	8008320 <__udivmoddi4+0xa0>
 8008490:	f1c2 0320 	rsb	r3, r2, #32
 8008494:	fa20 f703 	lsr.w	r7, r0, r3
 8008498:	4095      	lsls	r5, r2
 800849a:	fa01 f002 	lsl.w	r0, r1, r2
 800849e:	fa21 f303 	lsr.w	r3, r1, r3
 80084a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80084a6:	4338      	orrs	r0, r7
 80084a8:	0c01      	lsrs	r1, r0, #16
 80084aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80084ae:	fa1f f885 	uxth.w	r8, r5
 80084b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80084b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084ba:	fb07 f308 	mul.w	r3, r7, r8
 80084be:	428b      	cmp	r3, r1
 80084c0:	fa04 f402 	lsl.w	r4, r4, r2
 80084c4:	d907      	bls.n	80084d6 <__udivmoddi4+0x256>
 80084c6:	1869      	adds	r1, r5, r1
 80084c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80084cc:	d22f      	bcs.n	800852e <__udivmoddi4+0x2ae>
 80084ce:	428b      	cmp	r3, r1
 80084d0:	d92d      	bls.n	800852e <__udivmoddi4+0x2ae>
 80084d2:	3f02      	subs	r7, #2
 80084d4:	4429      	add	r1, r5
 80084d6:	1acb      	subs	r3, r1, r3
 80084d8:	b281      	uxth	r1, r0
 80084da:	fbb3 f0fe 	udiv	r0, r3, lr
 80084de:	fb0e 3310 	mls	r3, lr, r0, r3
 80084e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084e6:	fb00 f308 	mul.w	r3, r0, r8
 80084ea:	428b      	cmp	r3, r1
 80084ec:	d907      	bls.n	80084fe <__udivmoddi4+0x27e>
 80084ee:	1869      	adds	r1, r5, r1
 80084f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80084f4:	d217      	bcs.n	8008526 <__udivmoddi4+0x2a6>
 80084f6:	428b      	cmp	r3, r1
 80084f8:	d915      	bls.n	8008526 <__udivmoddi4+0x2a6>
 80084fa:	3802      	subs	r0, #2
 80084fc:	4429      	add	r1, r5
 80084fe:	1ac9      	subs	r1, r1, r3
 8008500:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008504:	e73b      	b.n	800837e <__udivmoddi4+0xfe>
 8008506:	4637      	mov	r7, r6
 8008508:	4630      	mov	r0, r6
 800850a:	e709      	b.n	8008320 <__udivmoddi4+0xa0>
 800850c:	4607      	mov	r7, r0
 800850e:	e6e7      	b.n	80082e0 <__udivmoddi4+0x60>
 8008510:	4618      	mov	r0, r3
 8008512:	e6fb      	b.n	800830c <__udivmoddi4+0x8c>
 8008514:	4541      	cmp	r1, r8
 8008516:	d2ab      	bcs.n	8008470 <__udivmoddi4+0x1f0>
 8008518:	ebb8 0a02 	subs.w	sl, r8, r2
 800851c:	eb69 020e 	sbc.w	r2, r9, lr
 8008520:	3801      	subs	r0, #1
 8008522:	4613      	mov	r3, r2
 8008524:	e7a4      	b.n	8008470 <__udivmoddi4+0x1f0>
 8008526:	4660      	mov	r0, ip
 8008528:	e7e9      	b.n	80084fe <__udivmoddi4+0x27e>
 800852a:	4618      	mov	r0, r3
 800852c:	e795      	b.n	800845a <__udivmoddi4+0x1da>
 800852e:	4667      	mov	r7, ip
 8008530:	e7d1      	b.n	80084d6 <__udivmoddi4+0x256>
 8008532:	4681      	mov	r9, r0
 8008534:	e77c      	b.n	8008430 <__udivmoddi4+0x1b0>
 8008536:	3802      	subs	r0, #2
 8008538:	442c      	add	r4, r5
 800853a:	e747      	b.n	80083cc <__udivmoddi4+0x14c>
 800853c:	f1ac 0c02 	sub.w	ip, ip, #2
 8008540:	442b      	add	r3, r5
 8008542:	e72f      	b.n	80083a4 <__udivmoddi4+0x124>
 8008544:	4638      	mov	r0, r7
 8008546:	e708      	b.n	800835a <__udivmoddi4+0xda>
 8008548:	4637      	mov	r7, r6
 800854a:	e6e9      	b.n	8008320 <__udivmoddi4+0xa0>

0800854c <__aeabi_idiv0>:
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop

08008550 <setDIFFChannel>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	4603      	mov	r3, r0
 8008558:	460a      	mov	r2, r1
 800855a:	71fb      	strb	r3, [r7, #7]
 800855c:	4613      	mov	r3, r2
 800855e:	71bb      	strb	r3, [r7, #6]
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	b25a      	sxtb	r2, r3
 8008566:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800856a:	4313      	orrs	r3, r2
 800856c:	b25b      	sxtb	r3, r3
 800856e:	b2db      	uxtb	r3, r3
 8008570:	4619      	mov	r1, r3
 8008572:	2001      	movs	r0, #1
 8008574:	f000 f832 	bl	80085dc <writeByteToReg>
}
 8008578:	bf00      	nop
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <writeCMD>:
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	733b      	strb	r3, [r7, #12]
	CS_0();
 800858e:	2200      	movs	r2, #0
 8008590:	2110      	movs	r1, #16
 8008592:	4809      	ldr	r0, [pc, #36]	; (80085b8 <writeCMD+0x38>)
 8008594:	f003 fc36 	bl	800be04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 8008598:	f107 010c 	add.w	r1, r7, #12
 800859c:	2332      	movs	r3, #50	; 0x32
 800859e:	2201      	movs	r2, #1
 80085a0:	4806      	ldr	r0, [pc, #24]	; (80085bc <writeCMD+0x3c>)
 80085a2:	f005 ff21 	bl	800e3e8 <HAL_SPI_Transmit>
	CS_1();
 80085a6:	2201      	movs	r2, #1
 80085a8:	2110      	movs	r1, #16
 80085aa:	4803      	ldr	r0, [pc, #12]	; (80085b8 <writeCMD+0x38>)
 80085ac:	f003 fc2a 	bl	800be04 <HAL_GPIO_WritePin>
}
 80085b0:	bf00      	nop
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	40020000 	.word	0x40020000
 80085bc:	20023724 	.word	0x20023724

080085c0 <setDataRate>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setDataRate(uint8_t drate)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_DRATE,drate);
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	4619      	mov	r1, r3
 80085ce:	2003      	movs	r0, #3
 80085d0:	f000 f804 	bl	80085dc <writeByteToReg>
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <writeByteToReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	460a      	mov	r2, r1
 80085e6:	71fb      	strb	r3, [r7, #7]
 80085e8:	4613      	mov	r3, r2
 80085ea:	71bb      	strb	r3, [r7, #6]
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 80085f6:	2300      	movs	r3, #0
 80085f8:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 80085fa:	79bb      	ldrb	r3, [r7, #6]
 80085fc:	73bb      	strb	r3, [r7, #14]
	CS_0();
 80085fe:	2200      	movs	r2, #0
 8008600:	2110      	movs	r1, #16
 8008602:	4809      	ldr	r0, [pc, #36]	; (8008628 <writeByteToReg+0x4c>)
 8008604:	f003 fbfe 	bl	800be04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,100);
 8008608:	f107 010c 	add.w	r1, r7, #12
 800860c:	2364      	movs	r3, #100	; 0x64
 800860e:	2203      	movs	r2, #3
 8008610:	4806      	ldr	r0, [pc, #24]	; (800862c <writeByteToReg+0x50>)
 8008612:	f005 fee9 	bl	800e3e8 <HAL_SPI_Transmit>
	/*
	send8bit(CMD_WREG | registerID);		//1syt byte: address of the first register to write
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
	CS_1();
 8008616:	2201      	movs	r2, #1
 8008618:	2110      	movs	r1, #16
 800861a:	4803      	ldr	r0, [pc, #12]	; (8008628 <writeByteToReg+0x4c>)
 800861c:	f003 fbf2 	bl	800be04 <HAL_GPIO_WritePin>

}
 8008620:	bf00      	nop
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	40020000 	.word	0x40020000
 800862c:	20023724 	.word	0x20023724

08008630 <setPGA>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_ADCON,pga);
 800863a:	79fb      	ldrb	r3, [r7, #7]
 800863c:	4619      	mov	r1, r3
 800863e:	2002      	movs	r0, #2
 8008640:	f7ff ffcc 	bl	80085dc <writeByteToReg>
}
 8008644:	bf00      	nop
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <waitDRDY>:
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
	uint32_t i;
		for (i = 0; i < 40000000; i++){
 8008652:	2300      	movs	r3, #0
 8008654:	607b      	str	r3, [r7, #4]
 8008656:	e009      	b.n	800866c <waitDRDY+0x20>
			if (DRDY_IS_LOW()){
 8008658:	2108      	movs	r1, #8
 800865a:	4809      	ldr	r0, [pc, #36]	; (8008680 <waitDRDY+0x34>)
 800865c:	f003 fbba 	bl	800bdd4 <HAL_GPIO_ReadPin>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <waitDRDY+0x2a>
		for (i = 0; i < 40000000; i++){
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3301      	adds	r3, #1
 800866a:	607b      	str	r3, [r7, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a05      	ldr	r2, [pc, #20]	; (8008684 <waitDRDY+0x38>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d9f1      	bls.n	8008658 <waitDRDY+0xc>
				break;
			}
		}
}
 8008674:	e000      	b.n	8008678 <waitDRDY+0x2c>
				break;
 8008676:	bf00      	nop
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	40020000 	.word	0x40020000
 8008684:	026259ff 	.word	0x026259ff

08008688 <readChipID>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
uint8_t readChipID(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
	waitDRDY();
 800868e:	f7ff ffdd 	bl	800864c <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 8008692:	2000      	movs	r0, #0
 8008694:	f000 f820 	bl	80086d8 <readByteFromReg>
 8008698:	4603      	mov	r3, r0
 800869a:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 800869c:	79fb      	ldrb	r3, [r7, #7]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	091b      	lsrs	r3, r3, #4
 80086a2:	b2db      	uxtb	r3, r3
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <receive8bit>:
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af02      	add	r7, sp, #8
	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
 80086b2:	23ff      	movs	r3, #255	; 0xff
 80086b4:	71fb      	strb	r3, [r7, #7]
	uint8_t read = 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 80086ba:	1dba      	adds	r2, r7, #6
 80086bc:	1df9      	adds	r1, r7, #7
 80086be:	2332      	movs	r3, #50	; 0x32
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	2301      	movs	r3, #1
 80086c4:	4803      	ldr	r0, [pc, #12]	; (80086d4 <receive8bit+0x28>)
 80086c6:	f005 fff5 	bl	800e6b4 <HAL_SPI_TransmitReceive>
	return read;
 80086ca:	79bb      	ldrb	r3, [r7, #6]



}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20023724 	.word	0x20023724

080086d8 <readByteFromReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	71fb      	strb	r3, [r7, #7]
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	f043 0310 	orr.w	r3, r3, #16
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	733b      	strb	r3, [r7, #12]
	TXbuffer[1] = 0x00;
 80086ec:	2300      	movs	r3, #0
 80086ee:	737b      	strb	r3, [r7, #13]
	CS_0();
 80086f0:	2200      	movs	r2, #0
 80086f2:	2110      	movs	r1, #16
 80086f4:	480d      	ldr	r0, [pc, #52]	; (800872c <readByteFromReg+0x54>)
 80086f6:	f003 fb85 	bl	800be04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 80086fa:	f107 010c 	add.w	r1, r7, #12
 80086fe:	2332      	movs	r3, #50	; 0x32
 8008700:	2202      	movs	r2, #2
 8008702:	480b      	ldr	r0, [pc, #44]	; (8008730 <readByteFromReg+0x58>)
 8008704:	f005 fe70 	bl	800e3e8 <HAL_SPI_Transmit>
	delay_us(10);
 8008708:	200a      	movs	r0, #10
 800870a:	f000 f91b 	bl	8008944 <delay_us>
	uint8_t read = receive8bit();
 800870e:	f7ff ffcd 	bl	80086ac <receive8bit>
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]
	CS_1();
 8008716:	2201      	movs	r2, #1
 8008718:	2110      	movs	r1, #16
 800871a:	4804      	ldr	r0, [pc, #16]	; (800872c <readByteFromReg+0x54>)
 800871c:	f003 fb72 	bl	800be04 <HAL_GPIO_WritePin>

	return read;
 8008720:	7bfb      	ldrb	r3, [r7, #15]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	40020000 	.word	0x40020000
 8008730:	20023724 	.word	0x20023724

08008734 <setBuffer>:
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
	uint8_t val =0;
 800873a:	2300      	movs	r3, #0
 800873c:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 800873e:	2350      	movs	r3, #80	; 0x50
 8008740:	713b      	strb	r3, [r7, #4]
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);
 8008742:	79fb      	ldrb	r3, [r7, #7]
 8008744:	005b      	lsls	r3, r3, #1
 8008746:	b25b      	sxtb	r3, r3
 8008748:	f043 0304 	orr.w	r3, r3, #4
 800874c:	b25b      	sxtb	r3, r3
 800874e:	b2db      	uxtb	r3, r3
 8008750:	717b      	strb	r3, [r7, #5]

	CS_0();
 8008752:	2200      	movs	r2, #0
 8008754:	2110      	movs	r1, #16
 8008756:	4809      	ldr	r0, [pc, #36]	; (800877c <setBuffer+0x48>)
 8008758:	f003 fb54 	bl	800be04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 800875c:	1d39      	adds	r1, r7, #4
 800875e:	2332      	movs	r3, #50	; 0x32
 8008760:	2202      	movs	r2, #2
 8008762:	4807      	ldr	r0, [pc, #28]	; (8008780 <setBuffer+0x4c>)
 8008764:	f005 fe40 	bl	800e3e8 <HAL_SPI_Transmit>
	//send8bit(CMD_WREG | REG_STATUS);
	//send8bit((0 <<3) | (1 << 2) | (val << 1));
	CS_1();
 8008768:	2201      	movs	r2, #1
 800876a:	2110      	movs	r1, #16
 800876c:	4803      	ldr	r0, [pc, #12]	; (800877c <setBuffer+0x48>)
 800876e:	f003 fb49 	bl	800be04 <HAL_GPIO_WritePin>
}
 8008772:	bf00      	nop
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	40020000 	.word	0x40020000
 8008780:	20023724 	.word	0x20023724

08008784 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008788:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <__NVIC_SystemReset+0x20>)
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008794:	4903      	ldr	r1, [pc, #12]	; (80087a4 <__NVIC_SystemReset+0x20>)
 8008796:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <__NVIC_SystemReset+0x24>)
 8008798:	4313      	orrs	r3, r2
 800879a:	60cb      	str	r3, [r1, #12]
 800879c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80087a0:	bf00      	nop
 80087a2:	e7fd      	b.n	80087a0 <__NVIC_SystemReset+0x1c>
 80087a4:	e000ed00 	.word	0xe000ed00
 80087a8:	05fa0004 	.word	0x05fa0004

080087ac <BLE_USART>:

/* Private variables ---------------------------------------------------------*/


void BLE_USART(UART_HandleTypeDef *huart, Sv *sendpData )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af02      	add	r7, sp, #8
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]

	if( USARTBLE.IAPflag == 1)
 80087b6:	4b20      	ldr	r3, [pc, #128]	; (8008838 <BLE_USART+0x8c>)
 80087b8:	785b      	ldrb	r3, [r3, #1]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d008      	beq.n	80087d0 <BLE_USART+0x24>
	{
		USARTBLE.sendflag =0;
 80087be:	4b1e      	ldr	r3, [pc, #120]	; (8008838 <BLE_USART+0x8c>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	701a      	strb	r2, [r3, #0]
		TM_DelayMillis(1000);
 80087c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087c8:	f000 f914 	bl	80089f4 <TM_DelayMillis>
		NVIC_SystemReset();
 80087cc:	f7ff ffda 	bl	8008784 <__NVIC_SystemReset>
		{
			HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 10);
		}
		*/
	}
	if(USARTBLE.sendflag ==1)
 80087d0:	4b19      	ldr	r3, [pc, #100]	; (8008838 <BLE_USART+0x8c>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d02b      	beq.n	8008830 <BLE_USART+0x84>
	{


		snprintf_(USARTBLE.buffer, 128 , "%.4f", sendpData->Statistic_max*1000);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	edd3 7a00 	vldr	s15, [r3]
 80087de:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800883c <BLE_USART+0x90>
 80087e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80087ea:	ed8d 7b00 	vstr	d7, [sp]
 80087ee:	4a14      	ldr	r2, [pc, #80]	; (8008840 <BLE_USART+0x94>)
 80087f0:	2180      	movs	r1, #128	; 0x80
 80087f2:	4814      	ldr	r0, [pc, #80]	; (8008844 <BLE_USART+0x98>)
 80087f4:	f002 f96a 	bl	800aacc <snprintf_>

		USARTBLE.bufferSize = min_(APP_BUFFER_SIZE, strlen(USARTBLE.buffer));
 80087f8:	4812      	ldr	r0, [pc, #72]	; (8008844 <BLE_USART+0x98>)
 80087fa:	f7ff fd21 	bl	8008240 <strlen>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b80      	cmp	r3, #128	; 0x80
 8008802:	d804      	bhi.n	800880e <BLE_USART+0x62>
 8008804:	480f      	ldr	r0, [pc, #60]	; (8008844 <BLE_USART+0x98>)
 8008806:	f7ff fd1b 	bl	8008240 <strlen>
 800880a:	4603      	mov	r3, r0
 800880c:	e000      	b.n	8008810 <BLE_USART+0x64>
 800880e:	2380      	movs	r3, #128	; 0x80
 8008810:	4a09      	ldr	r2, [pc, #36]	; (8008838 <BLE_USART+0x8c>)
 8008812:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
		//USARTBLE.sendTimeout = 100 ;
		if(HAL_UART_Transmit_DMA(huart, USARTBLE.buffer, USARTBLE.bufferSize)==HAL_OK)
 8008816:	4b08      	ldr	r3, [pc, #32]	; (8008838 <BLE_USART+0x8c>)
 8008818:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800881c:	b29b      	uxth	r3, r3
 800881e:	461a      	mov	r2, r3
 8008820:	4908      	ldr	r1, [pc, #32]	; (8008844 <BLE_USART+0x98>)
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f006 fed6 	bl	800f5d4 <HAL_UART_Transmit_DMA>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d100      	bne.n	8008830 <BLE_USART+0x84>
		{
			__NOP();
 800882e:	bf00      	nop
		 char C[20];
		 strcpy(C,  USARTBLE.Rbuffer );
		 */
		 //0x1;
	}
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	2001b460 	.word	0x2001b460
 800883c:	447a0000 	.word	0x447a0000
 8008840:	08012a40 	.word	0x08012a40
 8008844:	2001b500 	.word	0x2001b500

08008848 <checkBLECommandFromBLEGateway>:

_Bool checkBLECommandFromBLEGateway(char * BLEcommand,char * index, int len)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
	if(strlen(BLEcommand) > 0)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d011      	beq.n	8008880 <checkBLECommandFromBLEGateway+0x38>
	{
		   //Test 比對 function
	   char * pch;
	   /* 找尋 simple 字串 */
	   pch = strstr (BLEcommand,index);
 800885c:	68b9      	ldr	r1, [r7, #8]
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f00a f8c5 	bl	80129ee <strstr>
 8008864:	6178      	str	r0, [r7, #20]
	   if(strncmp(pch, index, len) == 0) {
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	461a      	mov	r2, r3
 800886a:	68b9      	ldr	r1, [r7, #8]
 800886c:	6978      	ldr	r0, [r7, #20]
 800886e:	f00a f8ac 	bl	80129ca <strncmp>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d101      	bne.n	800887c <checkBLECommandFromBLEGateway+0x34>
		   return true;
 8008878:	2301      	movs	r3, #1
 800887a:	e002      	b.n	8008882 <checkBLECommandFromBLEGateway+0x3a>
	   }
	   else
	   {
		   return false;
 800887c:	2300      	movs	r3, #0
 800887e:	e000      	b.n	8008882 <checkBLECommandFromBLEGateway+0x3a>

	}
	else
	{

		return false;
 8008880:	2300      	movs	r3, #0
	}

}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8008896:	4b0e      	ldr	r3, [pc, #56]	; (80088d0 <delay_init+0x44>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a0d      	ldr	r2, [pc, #52]	; (80088d0 <delay_init+0x44>)
 800889c:	f023 0304 	bic.w	r3, r3, #4
 80088a0:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	08db      	lsrs	r3, r3, #3
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <delay_init+0x48>)
 80088aa:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 80088ac:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <delay_init+0x48>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	461a      	mov	r2, r3
 80088b4:	0152      	lsls	r2, r2, #5
 80088b6:	1ad2      	subs	r2, r2, r3
 80088b8:	0092      	lsls	r2, r2, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	b29a      	uxth	r2, r3
 80088c0:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <delay_init+0x4c>)
 80088c2:	801a      	strh	r2, [r3, #0]
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	e000e010 	.word	0xe000e010
 80088d4:	2000003c 	.word	0x2000003c
 80088d8:	2000003e 	.word	0x2000003e

080088dc <delay_ms>:

void delay_ms(uint16_t nms)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 80088e6:	88fb      	ldrh	r3, [r7, #6]
 80088e8:	4a14      	ldr	r2, [pc, #80]	; (800893c <delay_ms+0x60>)
 80088ea:	8812      	ldrh	r2, [r2, #0]
 80088ec:	4611      	mov	r1, r2
 80088ee:	4a14      	ldr	r2, [pc, #80]	; (8008940 <delay_ms+0x64>)
 80088f0:	fb01 f303 	mul.w	r3, r1, r3
 80088f4:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 80088f6:	4b12      	ldr	r3, [pc, #72]	; (8008940 <delay_ms+0x64>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 80088fc:	4b10      	ldr	r3, [pc, #64]	; (8008940 <delay_ms+0x64>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a0f      	ldr	r2, [pc, #60]	; (8008940 <delay_ms+0x64>)
 8008902:	f043 0301 	orr.w	r3, r3, #1
 8008906:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8008908:	4b0d      	ldr	r3, [pc, #52]	; (8008940 <delay_ms+0x64>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d004      	beq.n	8008922 <delay_ms+0x46>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0f2      	beq.n	8008908 <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 8008922:	4b07      	ldr	r3, [pc, #28]	; (8008940 <delay_ms+0x64>)
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8008928:	4b05      	ldr	r3, [pc, #20]	; (8008940 <delay_ms+0x64>)
 800892a:	2200      	movs	r2, #0
 800892c:	609a      	str	r2, [r3, #8]
}
 800892e:	bf00      	nop
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	2000003e 	.word	0x2000003e
 8008940:	e000e010 	.word	0xe000e010

08008944 <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 800894c:	4b14      	ldr	r3, [pc, #80]	; (80089a0 <delay_us+0x5c>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	4619      	mov	r1, r3
 8008952:	4a14      	ldr	r2, [pc, #80]	; (80089a4 <delay_us+0x60>)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	fb03 f301 	mul.w	r3, r3, r1
 800895a:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 800895c:	4b11      	ldr	r3, [pc, #68]	; (80089a4 <delay_us+0x60>)
 800895e:	2200      	movs	r2, #0
 8008960:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 8008962:	4b10      	ldr	r3, [pc, #64]	; (80089a4 <delay_us+0x60>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a0f      	ldr	r2, [pc, #60]	; (80089a4 <delay_us+0x60>)
 8008968:	f043 0301 	orr.w	r3, r3, #1
 800896c:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800896e:	4b0d      	ldr	r3, [pc, #52]	; (80089a4 <delay_us+0x60>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d004      	beq.n	8008988 <delay_us+0x44>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0f2      	beq.n	800896e <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 8008988:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <delay_us+0x60>)
 800898a:	2200      	movs	r2, #0
 800898c:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800898e:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <delay_us+0x60>)
 8008990:	2200      	movs	r2, #0
 8008992:	609a      	str	r2, [r3, #8]
}
 8008994:	bf00      	nop
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	2000003c 	.word	0x2000003c
 80089a4:	e000e010 	.word	0xe000e010

080089a8 <TM_Delay_Init>:

uint32_t multiplier;

void TM_Delay_Init(void) {
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
	/* While loop takes 4 cycles */
	/* For 1 us delay, we need to divide with 4M */
	multiplier = 216000000 / 4000000;
 80089ac:	4b03      	ldr	r3, [pc, #12]	; (80089bc <TM_Delay_Init+0x14>)
 80089ae:	2236      	movs	r2, #54	; 0x36
 80089b0:	601a      	str	r2, [r3, #0]
}
 80089b2:	bf00      	nop
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	200080f8 	.word	0x200080f8

080089c0 <TM_DelayMicros>:

void TM_DelayMicros(uint32_t micros) {
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
	/* Multiply micros with multipler */
	/* Substract 10 */
	micros = micros * multiplier - 10;
 80089c8:	4b09      	ldr	r3, [pc, #36]	; (80089f0 <TM_DelayMicros+0x30>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	fb02 f303 	mul.w	r3, r2, r3
 80089d2:	3b0a      	subs	r3, #10
 80089d4:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (micros--);
 80089d6:	bf00      	nop
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	1e5a      	subs	r2, r3, #1
 80089dc:	607a      	str	r2, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1fa      	bne.n	80089d8 <TM_DelayMicros+0x18>
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	200080f8 	.word	0x200080f8

080089f4 <TM_DelayMillis>:

void TM_DelayMillis(uint32_t millis) {
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
	/* Multiply millis with multipler */
	/* Substract 10 */
	millis = 1000 * millis * multiplier - 10;
 80089fc:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <TM_DelayMillis+0x38>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	fb02 f303 	mul.w	r3, r2, r3
 8008a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a0a:	fb02 f303 	mul.w	r3, r2, r3
 8008a0e:	3b0a      	subs	r3, #10
 8008a10:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (millis--);
 8008a12:	bf00      	nop
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	1e5a      	subs	r2, r3, #1
 8008a18:	607a      	str	r2, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1fa      	bne.n	8008a14 <TM_DelayMillis+0x20>
}
 8008a1e:	bf00      	nop
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	200080f8 	.word	0x200080f8

08008a30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4a07      	ldr	r2, [pc, #28]	; (8008a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8008a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	4a06      	ldr	r2, [pc, #24]	; (8008a60 <vApplicationGetIdleTaskMemory+0x30>)
 8008a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2280      	movs	r2, #128	; 0x80
 8008a4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8008a4e:	bf00      	nop
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	20000040 	.word	0x20000040
 8008a60:	20000094 	.word	0x20000094

08008a64 <readIICEEPROM_2402C>:
 * TODO: IIC Function
 *
 *
 * */
void readIICEEPROM_2402C(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af04      	add	r7, sp, #16
	  HAL_I2C_Mem_Read(&hi2c2, ADDR_24LCxx_Read, 0, I2C_MEMADD_SIZE_16BIT,ReadBufferEEPROM,BufferSize, 1000);
 8008a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a6e:	9302      	str	r3, [sp, #8]
 8008a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <readIICEEPROM_2402C+0x28>)
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	21a1      	movs	r1, #161	; 0xa1
 8008a80:	4803      	ldr	r0, [pc, #12]	; (8008a90 <readIICEEPROM_2402C+0x2c>)
 8008a82:	f003 fa9b 	bl	800bfbc <HAL_I2C_Mem_Read>
}
 8008a86:	bf00      	nop
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20008318 	.word	0x20008318
 8008a90:	200082cc 	.word	0x200082cc

08008a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008a94:	b5b0      	push	{r4, r5, r7, lr}
 8008a96:	b096      	sub	sp, #88	; 0x58
 8008a98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008a9a:	f002 faea 	bl	800b072 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008a9e:	f000 f90b 	bl	8008cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008aa2:	f000 fad1 	bl	8009048 <MX_GPIO_Init>
  MX_DMA_Init();
 8008aa6:	f000 fa8d 	bl	8008fc4 <MX_DMA_Init>
  MX_SPI1_Init();
 8008aaa:	f000 fa1d 	bl	8008ee8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8008aae:	f000 f99b 	bl	8008de8 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8008ab2:	f000 fa57 	bl	8008f64 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8008ab6:	f000 f9d7 	bl	8008e68 <MX_I2C2_Init>





  USARTBLE.RxCount=0;
 8008aba:	4b6b      	ldr	r3, [pc, #428]	; (8008c68 <main+0x1d4>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	605a      	str	r2, [r3, #4]
  HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 1);
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	496a      	ldr	r1, [pc, #424]	; (8008c6c <main+0x1d8>)
 8008ac4:	486a      	ldr	r0, [pc, #424]	; (8008c70 <main+0x1dc>)
 8008ac6:	f006 fce3 	bl	800f490 <HAL_UART_Receive_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8008aca:	b662      	cpsie	i
  __enable_irq();

  statisticDataSet = rawData;
 8008acc:	4b69      	ldr	r3, [pc, #420]	; (8008c74 <main+0x1e0>)
 8008ace:	4a6a      	ldr	r2, [pc, #424]	; (8008c78 <main+0x1e4>)
 8008ad0:	601a      	str	r2, [r3, #0]
   dataLength = sizeof(dataRecive)/sizeof(float);
 8008ad2:	4b6a      	ldr	r3, [pc, #424]	; (8008c7c <main+0x1e8>)
 8008ad4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ad8:	601a      	str	r2, [r3, #0]

   //TODO: Initial UART status
   UART_Flag = UART_NORMAL;
 8008ada:	4b69      	ldr	r3, [pc, #420]	; (8008c80 <main+0x1ec>)
 8008adc:	2201      	movs	r2, #1
 8008ade:	601a      	str	r2, [r3, #0]

   //TODO: Test BLE command
   //char str[] ="This is a simple string aaa";
   float32_t aa[3] = {1,2,3};
 8008ae0:	4a68      	ldr	r2, [pc, #416]	; (8008c84 <main+0x1f0>)
 8008ae2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008ae6:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ae8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   float32_t b[3];
   memcpy(b,aa,sizeof(aa));
 8008aec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008af0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008af4:	ca07      	ldmia	r2, {r0, r1, r2}
 8008af6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   //_Bool command = checkBLECommandFromBLEGateway(str ,str);

   //TODO: Initialize ADS1256 data buffer size
   ADS1256.data_index = 0;
 8008afa:	4b63      	ldr	r3, [pc, #396]	; (8008c88 <main+0x1f4>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	601a      	str	r2, [r3, #0]
   ADS1256.data_length = dataLength;
 8008b00:	4b5e      	ldr	r3, [pc, #376]	; (8008c7c <main+0x1e8>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a60      	ldr	r2, [pc, #384]	; (8008c88 <main+0x1f4>)
 8008b06:	6053      	str	r3, [r2, #4]

   //TODO: Initialize Frequency range to collection to feature
   //F2B.f = 1.4567;

   //TODO: Initialize delay systick
   delay_init(216);
 8008b08:	20d8      	movs	r0, #216	; 0xd8
 8008b0a:	f7ff febf 	bl	800888c <delay_init>
   delay_ms(500);
 8008b0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b12:	f7ff fee3 	bl	80088dc <delay_ms>
   delay_ms(500);
 8008b16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b1a:	f7ff fedf 	bl	80088dc <delay_ms>
   delay_ms(500);
 8008b1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b22:	f7ff fedb 	bl	80088dc <delay_ms>

   TM_Delay_Init();
 8008b26:	f7ff ff3f 	bl	80089a8 <TM_Delay_Init>

   readIICEEPROM_2402C();
 8008b2a:	f7ff ff9b 	bl	8008a64 <readIICEEPROM_2402C>
   waitDRDY();
 8008b2e:	f7ff fd8d 	bl	800864c <waitDRDY>
   writeCMD(CMD_SDATAC);
 8008b32:	200f      	movs	r0, #15
 8008b34:	f7ff fd24 	bl	8008580 <writeCMD>

   //TODO: Reset ADS1256
   waitDRDY();
 8008b38:	f7ff fd88 	bl	800864c <waitDRDY>
   writeCMD(CMD_RESET);
 8008b3c:	20fe      	movs	r0, #254	; 0xfe
 8008b3e:	f7ff fd1f 	bl	8008580 <writeCMD>
   delay_ms(10);
 8008b42:	200a      	movs	r0, #10
 8008b44:	f7ff feca 	bl	80088dc <delay_ms>
   TM_DelayMicros(1);
 8008b48:	2001      	movs	r0, #1
 8008b4a:	f7ff ff39 	bl	80089c0 <TM_DelayMicros>

   //TODO: Initialize ADS1256 parameter (Buffer, PGA, Sampling rate)
   waitDRDY();
 8008b4e:	f7ff fd7d 	bl	800864c <waitDRDY>
   setBuffer();
 8008b52:	f7ff fdef 	bl	8008734 <setBuffer>
   waitDRDY();
 8008b56:	f7ff fd79 	bl	800864c <waitDRDY>
   setPGA(PGA_GAIN1);
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	f7ff fd68 	bl	8008630 <setPGA>
   waitDRDY();
 8008b60:	f7ff fd74 	bl	800864c <waitDRDY>
   setDataRate(DRATE_15000);
 8008b64:	20e0      	movs	r0, #224	; 0xe0
 8008b66:	f7ff fd2b 	bl	80085c0 <setDataRate>

   //TODO: Read chip id
   waitDRDY();
 8008b6a:	f7ff fd6f 	bl	800864c <waitDRDY>
   id = readChipID();
 8008b6e:	f7ff fd8b 	bl	8008688 <readChipID>
 8008b72:	4603      	mov	r3, r0
 8008b74:	461a      	mov	r2, r3
 8008b76:	4b45      	ldr	r3, [pc, #276]	; (8008c8c <main+0x1f8>)
 8008b78:	701a      	strb	r2, [r3, #0]

   delay_ms(500);// wait for initialization
 8008b7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b7e:	f7ff fead 	bl	80088dc <delay_ms>

   uint8_t  posChannels [4] = {AIN0, AIN2, AIN4, AIN6};
 8008b82:	4b43      	ldr	r3, [pc, #268]	; (8008c90 <main+0x1fc>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	63fb      	str	r3, [r7, #60]	; 0x3c
   uint8_t  negChannels [4] = {AIN1, AIN3, AIN5, AIN7};
 8008b88:	4b42      	ldr	r3, [pc, #264]	; (8008c94 <main+0x200>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	63bb      	str	r3, [r7, #56]	; 0x38

   //TODO: Set differential analog input channel.
   waitDRDY();
 8008b8e:	f7ff fd5d 	bl	800864c <waitDRDY>
   setDIFFChannel(posChannels[0], negChannels[0]);
 8008b92:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008b96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff fcd7 	bl	8008550 <setDIFFChannel>

   waitDRDY();
 8008ba2:	f7ff fd53 	bl	800864c <waitDRDY>
   writeCMD(CMD_SELFCAL);
 8008ba6:	20f0      	movs	r0, #240	; 0xf0
 8008ba8:	f7ff fcea 	bl	8008580 <writeCMD>

   waitDRDY();
 8008bac:	f7ff fd4e 	bl	800864c <waitDRDY>
   delay_us(15);
 8008bb0:	200f      	movs	r0, #15
 8008bb2:	f7ff fec7 	bl	8008944 <delay_us>
   waitDRDY();
 8008bb6:	f7ff fd49 	bl	800864c <waitDRDY>
   writeCMD(CMD_SYNC);    // SYNC command
 8008bba:	20fc      	movs	r0, #252	; 0xfc
 8008bbc:	f7ff fce0 	bl	8008580 <writeCMD>
   delay_us(10);
 8008bc0:	200a      	movs	r0, #10
 8008bc2:	f7ff febf 	bl	8008944 <delay_us>
   waitDRDY();
 8008bc6:	f7ff fd41 	bl	800864c <waitDRDY>
   writeCMD(CMD_WAKEUP);  // WAKEUP command
 8008bca:	2000      	movs	r0, #0
 8008bcc:	f7ff fcd8 	bl	8008580 <writeCMD>
   delay_us(15); // min delay: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
 8008bd0:	200f      	movs	r0, #15
 8008bd2:	f7ff feb7 	bl	8008944 <delay_us>



   //TODO: Set continuous mode.

	waitDRDY();
 8008bd6:	f7ff fd39 	bl	800864c <waitDRDY>
	CS_0();
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2110      	movs	r1, #16
 8008bde:	482e      	ldr	r0, [pc, #184]	; (8008c98 <main+0x204>)
 8008be0:	f003 f910 	bl	800be04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, RDATACcmdbuffer ,1,50);
 8008be4:	2332      	movs	r3, #50	; 0x32
 8008be6:	2201      	movs	r2, #1
 8008be8:	492c      	ldr	r1, [pc, #176]	; (8008c9c <main+0x208>)
 8008bea:	482d      	ldr	r0, [pc, #180]	; (8008ca0 <main+0x20c>)
 8008bec:	f005 fbfc 	bl	800e3e8 <HAL_SPI_Transmit>
	delay_ms(25); // min delay: t6 = 50 * 1/7.68 MHz = 6.5 microseconds
 8008bf0:	2019      	movs	r0, #25
 8008bf2:	f7ff fe73 	bl	80088dc <delay_ms>
	ADS1256.data_startFlag = 1;
 8008bf6:	4a24      	ldr	r2, [pc, #144]	; (8008c88 <main+0x1f4>)
 8008bf8:	f244 0308 	movw	r3, #16392	; 0x4008
 8008bfc:	4413      	add	r3, r2
 8008bfe:	2201      	movs	r2, #1
 8008c00:	701a      	strb	r2, [r3, #0]
	delay_us(1);
 8008c02:	2001      	movs	r0, #1
 8008c04:	f7ff fe9e 	bl	8008944 <delay_us>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of adcBinarySem */
  osSemaphoreDef(adcBinarySem);
 8008c08:	2300      	movs	r3, #0
 8008c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	637b      	str	r3, [r7, #52]	; 0x34
  adcBinarySemHandle = osSemaphoreCreate(osSemaphore(adcBinarySem), 1);
 8008c10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c14:	2101      	movs	r1, #1
 8008c16:	4618      	mov	r0, r3
 8008c18:	f007 fcb9 	bl	801058e <osSemaphoreCreate>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	4b21      	ldr	r3, [pc, #132]	; (8008ca4 <main+0x210>)
 8008c20:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of adcQueue */
  osMessageQDef(adcQueue, 16, long);
 8008c22:	4b21      	ldr	r3, [pc, #132]	; (8008ca8 <main+0x214>)
 8008c24:	f107 0420 	add.w	r4, r7, #32
 8008c28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  adcQueueHandle = osMessageCreate(osMessageQ(adcQueue), NULL);
 8008c2e:	f107 0320 	add.w	r3, r7, #32
 8008c32:	2100      	movs	r1, #0
 8008c34:	4618      	mov	r0, r3
 8008c36:	f007 fcdd 	bl	80105f4 <osMessageCreate>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	4b1b      	ldr	r3, [pc, #108]	; (8008cac <main+0x218>)
 8008c3e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ADC_Task */
  osThreadDef(ADC_Task, ADC_Thread, osPriorityRealtime, 0, 200);
 8008c40:	4b1b      	ldr	r3, [pc, #108]	; (8008cb0 <main+0x21c>)
 8008c42:	1d3c      	adds	r4, r7, #4
 8008c44:	461d      	mov	r5, r3
 8008c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008c4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 8008c52:	1d3b      	adds	r3, r7, #4
 8008c54:	2100      	movs	r1, #0
 8008c56:	4618      	mov	r0, r3
 8008c58:	f007 fc4d 	bl	80104f6 <osThreadCreate>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	4b15      	ldr	r3, [pc, #84]	; (8008cb4 <main+0x220>)
 8008c60:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008c62:	f007 fc41 	bl	80104e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008c66:	e7fe      	b.n	8008c66 <main+0x1d2>
 8008c68:	2001b460 	.word	0x2001b460
 8008c6c:	20023720 	.word	0x20023720
 8008c70:	200236a0 	.word	0x200236a0
 8008c74:	20008100 	.word	0x20008100
 8008c78:	2001745c 	.word	0x2001745c
 8008c7c:	2000029c 	.word	0x2000029c
 8008c80:	200002a4 	.word	0x200002a4
 8008c84:	08012a48 	.word	0x08012a48
 8008c88:	20003ff4 	.word	0x20003ff4
 8008c8c:	20000294 	.word	0x20000294
 8008c90:	08012a54 	.word	0x08012a54
 8008c94:	08012a58 	.word	0x08012a58
 8008c98:	40020000 	.word	0x40020000
 8008c9c:	20000004 	.word	0x20000004
 8008ca0:	20023724 	.word	0x20023724
 8008ca4:	2000841c 	.word	0x2000841c
 8008ca8:	08012a5c 	.word	0x08012a5c
 8008cac:	20017454 	.word	0x20017454
 8008cb0:	08012a78 	.word	0x08012a78
 8008cb4:	20008424 	.word	0x20008424

08008cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b0b8      	sub	sp, #224	; 0xe0
 8008cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cbe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008cc2:	2234      	movs	r2, #52	; 0x34
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f009 fe77 	bl	80129ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008ccc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	605a      	str	r2, [r3, #4]
 8008cd6:	609a      	str	r2, [r3, #8]
 8008cd8:	60da      	str	r2, [r3, #12]
 8008cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008cdc:	f107 0308 	add.w	r3, r7, #8
 8008ce0:	2290      	movs	r2, #144	; 0x90
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f009 fe68 	bl	80129ba <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008cea:	4b3d      	ldr	r3, [pc, #244]	; (8008de0 <SystemClock_Config+0x128>)
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	4a3c      	ldr	r2, [pc, #240]	; (8008de0 <SystemClock_Config+0x128>)
 8008cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8008cf6:	4b3a      	ldr	r3, [pc, #232]	; (8008de0 <SystemClock_Config+0x128>)
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cfe:	607b      	str	r3, [r7, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d02:	4b38      	ldr	r3, [pc, #224]	; (8008de4 <SystemClock_Config+0x12c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a37      	ldr	r2, [pc, #220]	; (8008de4 <SystemClock_Config+0x12c>)
 8008d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	4b35      	ldr	r3, [pc, #212]	; (8008de4 <SystemClock_Config+0x12c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8008d1a:	230a      	movs	r3, #10
 8008d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008d26:	2310      	movs	r3, #16
 8008d28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d32:	2302      	movs	r3, #2
 8008d34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008d3e:	2308      	movs	r3, #8
 8008d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8008d44:	23d8      	movs	r3, #216	; 0xd8
 8008d46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008d50:	2302      	movs	r3, #2
 8008d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f004 f9e8 	bl	800d130 <HAL_RCC_OscConfig>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8008d66:	f000 fb21 	bl	80093ac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008d6a:	f004 f991 	bl	800d090 <HAL_PWREx_EnableOverDrive>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8008d74:	f000 fb1a 	bl	80093ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d78:	230f      	movs	r3, #15
 8008d7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d7e:	2302      	movs	r3, #2
 8008d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d84:	2300      	movs	r3, #0
 8008d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008d8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008d9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008d9e:	2107      	movs	r1, #7
 8008da0:	4618      	mov	r0, r3
 8008da2:	f004 fc73 	bl	800d68c <HAL_RCC_ClockConfig>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8008dac:	f000 fafe 	bl	80093ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_I2C1
 8008db0:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8008db4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8008db6:	2300      	movs	r3, #0
 8008db8:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008dc2:	f107 0308 	add.w	r3, r7, #8
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f004 fe56 	bl	800da78 <HAL_RCCEx_PeriphCLKConfig>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8008dd2:	f000 faeb 	bl	80093ac <Error_Handler>
  }
}
 8008dd6:	bf00      	nop
 8008dd8:	37e0      	adds	r7, #224	; 0xe0
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	40023800 	.word	0x40023800
 8008de4:	40007000 	.word	0x40007000

08008de8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008dec:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <MX_I2C1_Init+0x74>)
 8008dee:	4a1c      	ldr	r2, [pc, #112]	; (8008e60 <MX_I2C1_Init+0x78>)
 8008df0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8008df2:	4b1a      	ldr	r3, [pc, #104]	; (8008e5c <MX_I2C1_Init+0x74>)
 8008df4:	4a1b      	ldr	r2, [pc, #108]	; (8008e64 <MX_I2C1_Init+0x7c>)
 8008df6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 4;
 8008df8:	4b18      	ldr	r3, [pc, #96]	; (8008e5c <MX_I2C1_Init+0x74>)
 8008dfa:	2204      	movs	r2, #4
 8008dfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008dfe:	4b17      	ldr	r3, [pc, #92]	; (8008e5c <MX_I2C1_Init+0x74>)
 8008e00:	2201      	movs	r2, #1
 8008e02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008e04:	4b15      	ldr	r3, [pc, #84]	; (8008e5c <MX_I2C1_Init+0x74>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008e0a:	4b14      	ldr	r3, [pc, #80]	; (8008e5c <MX_I2C1_Init+0x74>)
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008e10:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <MX_I2C1_Init+0x74>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8008e16:	4b11      	ldr	r3, [pc, #68]	; (8008e5c <MX_I2C1_Init+0x74>)
 8008e18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008e1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008e1e:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <MX_I2C1_Init+0x74>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008e24:	480d      	ldr	r0, [pc, #52]	; (8008e5c <MX_I2C1_Init+0x74>)
 8008e26:	f003 f839 	bl	800be9c <HAL_I2C_Init>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008e30:	f000 fabc 	bl	80093ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008e34:	2100      	movs	r1, #0
 8008e36:	4809      	ldr	r0, [pc, #36]	; (8008e5c <MX_I2C1_Init+0x74>)
 8008e38:	f004 f893 	bl	800cf62 <HAL_I2CEx_ConfigAnalogFilter>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8008e42:	f000 fab3 	bl	80093ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008e46:	2100      	movs	r1, #0
 8008e48:	4804      	ldr	r0, [pc, #16]	; (8008e5c <MX_I2C1_Init+0x74>)
 8008e4a:	f004 f8d5 	bl	800cff8 <HAL_I2CEx_ConfigDigitalFilter>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8008e54:	f000 faaa 	bl	80093ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008e58:	bf00      	nop
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	20008270 	.word	0x20008270
 8008e60:	40005400 	.word	0x40005400
 8008e64:	20404768 	.word	0x20404768

08008e68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008e6c:	4b1b      	ldr	r3, [pc, #108]	; (8008edc <MX_I2C2_Init+0x74>)
 8008e6e:	4a1c      	ldr	r2, [pc, #112]	; (8008ee0 <MX_I2C2_Init+0x78>)
 8008e70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8008e72:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <MX_I2C2_Init+0x74>)
 8008e74:	4a1b      	ldr	r2, [pc, #108]	; (8008ee4 <MX_I2C2_Init+0x7c>)
 8008e76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 8;
 8008e78:	4b18      	ldr	r3, [pc, #96]	; (8008edc <MX_I2C2_Init+0x74>)
 8008e7a:	2208      	movs	r2, #8
 8008e7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008e7e:	4b17      	ldr	r3, [pc, #92]	; (8008edc <MX_I2C2_Init+0x74>)
 8008e80:	2201      	movs	r2, #1
 8008e82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008e84:	4b15      	ldr	r3, [pc, #84]	; (8008edc <MX_I2C2_Init+0x74>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008e8a:	4b14      	ldr	r3, [pc, #80]	; (8008edc <MX_I2C2_Init+0x74>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008e90:	4b12      	ldr	r3, [pc, #72]	; (8008edc <MX_I2C2_Init+0x74>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8008e96:	4b11      	ldr	r3, [pc, #68]	; (8008edc <MX_I2C2_Init+0x74>)
 8008e98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008e9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008e9e:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <MX_I2C2_Init+0x74>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008ea4:	480d      	ldr	r0, [pc, #52]	; (8008edc <MX_I2C2_Init+0x74>)
 8008ea6:	f002 fff9 	bl	800be9c <HAL_I2C_Init>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8008eb0:	f000 fa7c 	bl	80093ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	4809      	ldr	r0, [pc, #36]	; (8008edc <MX_I2C2_Init+0x74>)
 8008eb8:	f004 f853 	bl	800cf62 <HAL_I2CEx_ConfigAnalogFilter>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8008ec2:	f000 fa73 	bl	80093ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	4804      	ldr	r0, [pc, #16]	; (8008edc <MX_I2C2_Init+0x74>)
 8008eca:	f004 f895 	bl	800cff8 <HAL_I2CEx_ConfigDigitalFilter>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8008ed4:	f000 fa6a 	bl	80093ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8008ed8:	bf00      	nop
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	200082cc 	.word	0x200082cc
 8008ee0:	40005800 	.word	0x40005800
 8008ee4:	20404768 	.word	0x20404768

08008ee8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008eec:	4b1b      	ldr	r3, [pc, #108]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008eee:	4a1c      	ldr	r2, [pc, #112]	; (8008f60 <MX_SPI1_Init+0x78>)
 8008ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008ef2:	4b1a      	ldr	r3, [pc, #104]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008efa:	4b18      	ldr	r3, [pc, #96]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008f00:	4b16      	ldr	r3, [pc, #88]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008f02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008f06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f08:	4b14      	ldr	r3, [pc, #80]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008f0e:	4b13      	ldr	r3, [pc, #76]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008f10:	2201      	movs	r2, #1
 8008f12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008f14:	4b11      	ldr	r3, [pc, #68]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8008f1c:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008f1e:	2228      	movs	r2, #40	; 0x28
 8008f20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f22:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f28:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f2e:	4b0b      	ldr	r3, [pc, #44]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008f34:	4b09      	ldr	r3, [pc, #36]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008f36:	2207      	movs	r2, #7
 8008f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008f3a:	4b08      	ldr	r3, [pc, #32]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008f40:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008f46:	4805      	ldr	r0, [pc, #20]	; (8008f5c <MX_SPI1_Init+0x74>)
 8008f48:	f005 f9bc 	bl	800e2c4 <HAL_SPI_Init>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8008f52:	f000 fa2b 	bl	80093ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008f56:	bf00      	nop
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20023724 	.word	0x20023724
 8008f60:	40013000 	.word	0x40013000

08008f64 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8008f68:	4b13      	ldr	r3, [pc, #76]	; (8008fb8 <MX_USART6_UART_Init+0x54>)
 8008f6a:	4a14      	ldr	r2, [pc, #80]	; (8008fbc <MX_USART6_UART_Init+0x58>)
 8008f6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 500000;
 8008f6e:	4b12      	ldr	r3, [pc, #72]	; (8008fb8 <MX_USART6_UART_Init+0x54>)
 8008f70:	4a13      	ldr	r2, [pc, #76]	; (8008fc0 <MX_USART6_UART_Init+0x5c>)
 8008f72:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008f74:	4b10      	ldr	r3, [pc, #64]	; (8008fb8 <MX_USART6_UART_Init+0x54>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008f7a:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <MX_USART6_UART_Init+0x54>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008f80:	4b0d      	ldr	r3, [pc, #52]	; (8008fb8 <MX_USART6_UART_Init+0x54>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008f86:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <MX_USART6_UART_Init+0x54>)
 8008f88:	220c      	movs	r2, #12
 8008f8a:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <MX_USART6_UART_Init+0x54>)
 8008f8e:	2200      	movs	r2, #0
 8008f90:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f92:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <MX_USART6_UART_Init+0x54>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008f98:	4b07      	ldr	r3, [pc, #28]	; (8008fb8 <MX_USART6_UART_Init+0x54>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008f9e:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <MX_USART6_UART_Init+0x54>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008fa4:	4804      	ldr	r0, [pc, #16]	; (8008fb8 <MX_USART6_UART_Init+0x54>)
 8008fa6:	f006 f994 	bl	800f2d2 <HAL_UART_Init>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <MX_USART6_UART_Init+0x50>
  {
    Error_Handler();
 8008fb0:	f000 f9fc 	bl	80093ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8008fb4:	bf00      	nop
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	200236a0 	.word	0x200236a0
 8008fbc:	40011400 	.word	0x40011400
 8008fc0:	0007a120 	.word	0x0007a120

08008fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008fca:	4b1e      	ldr	r3, [pc, #120]	; (8009044 <MX_DMA_Init+0x80>)
 8008fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fce:	4a1d      	ldr	r2, [pc, #116]	; (8009044 <MX_DMA_Init+0x80>)
 8008fd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8008fd6:	4b1b      	ldr	r3, [pc, #108]	; (8009044 <MX_DMA_Init+0x80>)
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fde:	607b      	str	r3, [r7, #4]
 8008fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008fe2:	4b18      	ldr	r3, [pc, #96]	; (8009044 <MX_DMA_Init+0x80>)
 8008fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe6:	4a17      	ldr	r2, [pc, #92]	; (8009044 <MX_DMA_Init+0x80>)
 8008fe8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fec:	6313      	str	r3, [r2, #48]	; 0x30
 8008fee:	4b15      	ldr	r3, [pc, #84]	; (8009044 <MX_DMA_Init+0x80>)
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2105      	movs	r1, #5
 8008ffe:	2011      	movs	r0, #17
 8009000:	f002 f96f 	bl	800b2e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8009004:	2011      	movs	r0, #17
 8009006:	f002 f988 	bl	800b31a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800900a:	2200      	movs	r2, #0
 800900c:	2105      	movs	r1, #5
 800900e:	2038      	movs	r0, #56	; 0x38
 8009010:	f002 f967 	bl	800b2e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8009014:	2038      	movs	r0, #56	; 0x38
 8009016:	f002 f980 	bl	800b31a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800901a:	2200      	movs	r2, #0
 800901c:	2105      	movs	r1, #5
 800901e:	203b      	movs	r0, #59	; 0x3b
 8009020:	f002 f95f 	bl	800b2e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8009024:	203b      	movs	r0, #59	; 0x3b
 8009026:	f002 f978 	bl	800b31a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800902a:	2200      	movs	r2, #0
 800902c:	2105      	movs	r1, #5
 800902e:	2045      	movs	r0, #69	; 0x45
 8009030:	f002 f957 	bl	800b2e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8009034:	2045      	movs	r0, #69	; 0x45
 8009036:	f002 f970 	bl	800b31a <HAL_NVIC_EnableIRQ>

}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	40023800 	.word	0x40023800

08009048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08a      	sub	sp, #40	; 0x28
 800904c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800904e:	f107 0314 	add.w	r3, r7, #20
 8009052:	2200      	movs	r2, #0
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	605a      	str	r2, [r3, #4]
 8009058:	609a      	str	r2, [r3, #8]
 800905a:	60da      	str	r2, [r3, #12]
 800905c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800905e:	4b3e      	ldr	r3, [pc, #248]	; (8009158 <MX_GPIO_Init+0x110>)
 8009060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009062:	4a3d      	ldr	r2, [pc, #244]	; (8009158 <MX_GPIO_Init+0x110>)
 8009064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009068:	6313      	str	r3, [r2, #48]	; 0x30
 800906a:	4b3b      	ldr	r3, [pc, #236]	; (8009158 <MX_GPIO_Init+0x110>)
 800906c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009072:	613b      	str	r3, [r7, #16]
 8009074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009076:	4b38      	ldr	r3, [pc, #224]	; (8009158 <MX_GPIO_Init+0x110>)
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	4a37      	ldr	r2, [pc, #220]	; (8009158 <MX_GPIO_Init+0x110>)
 800907c:	f043 0301 	orr.w	r3, r3, #1
 8009080:	6313      	str	r3, [r2, #48]	; 0x30
 8009082:	4b35      	ldr	r3, [pc, #212]	; (8009158 <MX_GPIO_Init+0x110>)
 8009084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800908e:	4b32      	ldr	r3, [pc, #200]	; (8009158 <MX_GPIO_Init+0x110>)
 8009090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009092:	4a31      	ldr	r2, [pc, #196]	; (8009158 <MX_GPIO_Init+0x110>)
 8009094:	f043 0302 	orr.w	r3, r3, #2
 8009098:	6313      	str	r3, [r2, #48]	; 0x30
 800909a:	4b2f      	ldr	r3, [pc, #188]	; (8009158 <MX_GPIO_Init+0x110>)
 800909c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	60bb      	str	r3, [r7, #8]
 80090a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80090a6:	4b2c      	ldr	r3, [pc, #176]	; (8009158 <MX_GPIO_Init+0x110>)
 80090a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090aa:	4a2b      	ldr	r2, [pc, #172]	; (8009158 <MX_GPIO_Init+0x110>)
 80090ac:	f043 0308 	orr.w	r3, r3, #8
 80090b0:	6313      	str	r3, [r2, #48]	; 0x30
 80090b2:	4b29      	ldr	r3, [pc, #164]	; (8009158 <MX_GPIO_Init+0x110>)
 80090b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b6:	f003 0308 	and.w	r3, r3, #8
 80090ba:	607b      	str	r3, [r7, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80090be:	4b26      	ldr	r3, [pc, #152]	; (8009158 <MX_GPIO_Init+0x110>)
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	4a25      	ldr	r2, [pc, #148]	; (8009158 <MX_GPIO_Init+0x110>)
 80090c4:	f043 0304 	orr.w	r3, r3, #4
 80090c8:	6313      	str	r3, [r2, #48]	; 0x30
 80090ca:	4b23      	ldr	r3, [pc, #140]	; (8009158 <MX_GPIO_Init+0x110>)
 80090cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	603b      	str	r3, [r7, #0]
 80090d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80090d6:	2200      	movs	r2, #0
 80090d8:	2110      	movs	r1, #16
 80090da:	4820      	ldr	r0, [pc, #128]	; (800915c <MX_GPIO_Init+0x114>)
 80090dc:	f002 fe92 	bl	800be04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80090e0:	2200      	movs	r2, #0
 80090e2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80090e6:	481e      	ldr	r0, [pc, #120]	; (8009160 <MX_GPIO_Init+0x118>)
 80090e8:	f002 fe8c 	bl	800be04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80090ec:	2308      	movs	r3, #8
 80090ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80090f0:	4b1c      	ldr	r3, [pc, #112]	; (8009164 <MX_GPIO_Init+0x11c>)
 80090f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f4:	2300      	movs	r3, #0
 80090f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090f8:	f107 0314 	add.w	r3, r7, #20
 80090fc:	4619      	mov	r1, r3
 80090fe:	4817      	ldr	r0, [pc, #92]	; (800915c <MX_GPIO_Init+0x114>)
 8009100:	f002 fcbe 	bl	800ba80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009104:	2310      	movs	r3, #16
 8009106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009108:	2301      	movs	r3, #1
 800910a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800910c:	2301      	movs	r3, #1
 800910e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009110:	2303      	movs	r3, #3
 8009112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009114:	f107 0314 	add.w	r3, r7, #20
 8009118:	4619      	mov	r1, r3
 800911a:	4810      	ldr	r0, [pc, #64]	; (800915c <MX_GPIO_Init+0x114>)
 800911c:	f002 fcb0 	bl	800ba80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8009120:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009126:	2301      	movs	r3, #1
 8009128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800912a:	2300      	movs	r3, #0
 800912c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800912e:	2300      	movs	r3, #0
 8009130:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009132:	f107 0314 	add.w	r3, r7, #20
 8009136:	4619      	mov	r1, r3
 8009138:	4809      	ldr	r0, [pc, #36]	; (8009160 <MX_GPIO_Init+0x118>)
 800913a:	f002 fca1 	bl	800ba80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800913e:	2200      	movs	r2, #0
 8009140:	2105      	movs	r1, #5
 8009142:	2009      	movs	r0, #9
 8009144:	f002 f8cd 	bl	800b2e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8009148:	2009      	movs	r0, #9
 800914a:	f002 f8e6 	bl	800b31a <HAL_NVIC_EnableIRQ>

}
 800914e:	bf00      	nop
 8009150:	3728      	adds	r7, #40	; 0x28
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	40023800 	.word	0x40023800
 800915c:	40020000 	.word	0x40020000
 8009160:	40020c00 	.word	0x40020c00
 8009164:	10210000 	.word	0x10210000

08009168 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && ADS1256.data_startFlag == 1 && I2cC.i2cRecive == 0  )//&& UART_Flag == UART_NORMAL
 8009172:	88fb      	ldrh	r3, [r7, #6]
 8009174:	2b08      	cmp	r3, #8
 8009176:	d157      	bne.n	8009228 <HAL_GPIO_EXTI_Callback+0xc0>
 8009178:	4b2d      	ldr	r3, [pc, #180]	; (8009230 <HAL_GPIO_EXTI_Callback+0xc8>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b03      	cmp	r3, #3
 800917e:	d153      	bne.n	8009228 <HAL_GPIO_EXTI_Callback+0xc0>
 8009180:	4a2c      	ldr	r2, [pc, #176]	; (8009234 <HAL_GPIO_EXTI_Callback+0xcc>)
 8009182:	f244 0308 	movw	r3, #16392	; 0x4008
 8009186:	4413      	add	r3, r2
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d14c      	bne.n	8009228 <HAL_GPIO_EXTI_Callback+0xc0>
 800918e:	4b2a      	ldr	r3, [pc, #168]	; (8009238 <HAL_GPIO_EXTI_Callback+0xd0>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d148      	bne.n	8009228 <HAL_GPIO_EXTI_Callback+0xc0>
	{
		    /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE because it will get set to pdTRUE inside the interrupt-safe API function if a context switch is required. */
		HAL_SPI_TransmitReceive_DMA(&hspi1,RDATACsend_data,Databuffer,3);
 8009196:	2303      	movs	r3, #3
 8009198:	4a28      	ldr	r2, [pc, #160]	; (800923c <HAL_GPIO_EXTI_Callback+0xd4>)
 800919a:	4929      	ldr	r1, [pc, #164]	; (8009240 <HAL_GPIO_EXTI_Callback+0xd8>)
 800919c:	4829      	ldr	r0, [pc, #164]	; (8009244 <HAL_GPIO_EXTI_Callback+0xdc>)
 800919e:	f005 fc9d 	bl	800eadc <HAL_SPI_TransmitReceive_DMA>

		transmissionDataByUart[ADS1256.data_index * 3 + 0] = Databuffer[0];
 80091a2:	4b24      	ldr	r3, [pc, #144]	; (8009234 <HAL_GPIO_EXTI_Callback+0xcc>)
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	4613      	mov	r3, r2
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	4413      	add	r3, r2
 80091ac:	4a23      	ldr	r2, [pc, #140]	; (800923c <HAL_GPIO_EXTI_Callback+0xd4>)
 80091ae:	7811      	ldrb	r1, [r2, #0]
 80091b0:	4a25      	ldr	r2, [pc, #148]	; (8009248 <HAL_GPIO_EXTI_Callback+0xe0>)
 80091b2:	54d1      	strb	r1, [r2, r3]
		transmissionDataByUart[ADS1256.data_index * 3 + 1] = Databuffer[1];
 80091b4:	4b1f      	ldr	r3, [pc, #124]	; (8009234 <HAL_GPIO_EXTI_Callback+0xcc>)
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	4613      	mov	r3, r2
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	4413      	add	r3, r2
 80091be:	3301      	adds	r3, #1
 80091c0:	4a1e      	ldr	r2, [pc, #120]	; (800923c <HAL_GPIO_EXTI_Callback+0xd4>)
 80091c2:	7851      	ldrb	r1, [r2, #1]
 80091c4:	4a20      	ldr	r2, [pc, #128]	; (8009248 <HAL_GPIO_EXTI_Callback+0xe0>)
 80091c6:	54d1      	strb	r1, [r2, r3]
		transmissionDataByUart[ADS1256.data_index * 3 + 2] = Databuffer[2];
 80091c8:	4b1a      	ldr	r3, [pc, #104]	; (8009234 <HAL_GPIO_EXTI_Callback+0xcc>)
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	4613      	mov	r3, r2
 80091ce:	005b      	lsls	r3, r3, #1
 80091d0:	4413      	add	r3, r2
 80091d2:	3302      	adds	r3, #2
 80091d4:	4a19      	ldr	r2, [pc, #100]	; (800923c <HAL_GPIO_EXTI_Callback+0xd4>)
 80091d6:	7891      	ldrb	r1, [r2, #2]
 80091d8:	4a1b      	ldr	r2, [pc, #108]	; (8009248 <HAL_GPIO_EXTI_Callback+0xe0>)
 80091da:	54d1      	strb	r1, [r2, r3]

		ADS1256.data_index++;
 80091dc:	4b15      	ldr	r3, [pc, #84]	; (8009234 <HAL_GPIO_EXTI_Callback+0xcc>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3301      	adds	r3, #1
 80091e2:	4a14      	ldr	r2, [pc, #80]	; (8009234 <HAL_GPIO_EXTI_Callback+0xcc>)
 80091e4:	6013      	str	r3, [r2, #0]

		if(ADS1256.data_index == 15000) //divide 2 for FFT real data equal 4096
 80091e6:	4b13      	ldr	r3, [pc, #76]	; (8009234 <HAL_GPIO_EXTI_Callback+0xcc>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f643 2298 	movw	r2, #15000	; 0x3a98
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d11a      	bne.n	8009228 <HAL_GPIO_EXTI_Callback+0xc0>
		{
			UART_Flag = UART_BUSY;
 80091f2:	4b16      	ldr	r3, [pc, #88]	; (800924c <HAL_GPIO_EXTI_Callback+0xe4>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]
			BaseType_t xHigherPriorityTaskWoken;
			xHigherPriorityTaskWoken = pdFALSE;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]
			xSemaphoreGiveFromISR(adcBinarySemHandle,&xHigherPriorityTaskWoken);
 80091fc:	4b14      	ldr	r3, [pc, #80]	; (8009250 <HAL_GPIO_EXTI_Callback+0xe8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f107 020c 	add.w	r2, r7, #12
 8009204:	4611      	mov	r1, r2
 8009206:	4618      	mov	r0, r3
 8009208:	f007 fd1c 	bl	8010c44 <xQueueGiveFromISR>


			if(xHigherPriorityTaskWoken == pdTRUE)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d10a      	bne.n	8009228 <HAL_GPIO_EXTI_Callback+0xc0>
			{
				portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d007      	beq.n	8009228 <HAL_GPIO_EXTI_Callback+0xc0>
 8009218:	4b0e      	ldr	r3, [pc, #56]	; (8009254 <HAL_GPIO_EXTI_Callback+0xec>)
 800921a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800921e:	601a      	str	r2, [r3, #0]
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	f3bf 8f6f 	isb	sy

		}


	}
}
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	20000294 	.word	0x20000294
 8009234:	20003ff4 	.word	0x20003ff4
 8009238:	20023788 	.word	0x20023788
 800923c:	20000298 	.word	0x20000298
 8009240:	20000000 	.word	0x20000000
 8009244:	20023724 	.word	0x20023724
 8009248:	20008428 	.word	0x20008428
 800924c:	200002a4 	.word	0x200002a4
 8009250:	2000841c 	.word	0x2000841c
 8009254:	e000ed04 	.word	0xe000ed04

08009258 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
  USARTBLE.iapbuffer[USARTBLE.RxCount++]= aRxBuffer[0];
 8009260:	4b26      	ldr	r3, [pc, #152]	; (80092fc <HAL_UART_RxCpltCallback+0xa4>)
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	4925      	ldr	r1, [pc, #148]	; (80092fc <HAL_UART_RxCpltCallback+0xa4>)
 8009268:	604a      	str	r2, [r1, #4]
 800926a:	4a25      	ldr	r2, [pc, #148]	; (8009300 <HAL_UART_RxCpltCallback+0xa8>)
 800926c:	7811      	ldrb	r1, [r2, #0]
 800926e:	4a23      	ldr	r2, [pc, #140]	; (80092fc <HAL_UART_RxCpltCallback+0xa4>)
 8009270:	4413      	add	r3, r2
 8009272:	460a      	mov	r2, r1
 8009274:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
  if(aRxBuffer[0]==0x0A)//when receive 0x0a("\n" Line feeds string),it is a effective command, Send a receive flag.
 8009278:	4b21      	ldr	r3, [pc, #132]	; (8009300 <HAL_UART_RxCpltCallback+0xa8>)
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b0a      	cmp	r3, #10
 800927e:	d120      	bne.n	80092c2 <HAL_UART_RxCpltCallback+0x6a>
  	{
	  USARTBLE.RxCount=0;
 8009280:	4b1e      	ldr	r3, [pc, #120]	; (80092fc <HAL_UART_RxCpltCallback+0xa4>)
 8009282:	2200      	movs	r2, #0
 8009284:	605a      	str	r2, [r3, #4]
	  _Bool command = checkBLECommandFromBLEGateway(USARTBLE.iapbuffer ,"request",7);
 8009286:	2207      	movs	r2, #7
 8009288:	491e      	ldr	r1, [pc, #120]	; (8009304 <HAL_UART_RxCpltCallback+0xac>)
 800928a:	481f      	ldr	r0, [pc, #124]	; (8009308 <HAL_UART_RxCpltCallback+0xb0>)
 800928c:	f7ff fadc 	bl	8008848 <checkBLECommandFromBLEGateway>
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]
	  if(command)
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <HAL_UART_RxCpltCallback+0x58>
	  {
		  USARTBLE.IAPflag =1;
 800929a:	4b18      	ldr	r3, [pc, #96]	; (80092fc <HAL_UART_RxCpltCallback+0xa4>)
 800929c:	2201      	movs	r2, #1
 800929e:	705a      	strb	r2, [r3, #1]
		  USARTBLE.sendflag = 0;
 80092a0:	4b16      	ldr	r3, [pc, #88]	; (80092fc <HAL_UART_RxCpltCallback+0xa4>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	701a      	strb	r2, [r3, #0]
		  BLE_USART(huart, &statistic_value);
 80092a6:	4919      	ldr	r1, [pc, #100]	; (800930c <HAL_UART_RxCpltCallback+0xb4>)
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff fa7f 	bl	80087ac <BLE_USART>
 80092ae:	e008      	b.n	80092c2 <HAL_UART_RxCpltCallback+0x6a>
	  }
	  else
	  {
		  memset( USARTBLE.iapbuffer, 0, strlen(USARTBLE.iapbuffer) );
 80092b0:	4815      	ldr	r0, [pc, #84]	; (8009308 <HAL_UART_RxCpltCallback+0xb0>)
 80092b2:	f7fe ffc5 	bl	8008240 <strlen>
 80092b6:	4603      	mov	r3, r0
 80092b8:	461a      	mov	r2, r3
 80092ba:	2100      	movs	r1, #0
 80092bc:	4812      	ldr	r0, [pc, #72]	; (8009308 <HAL_UART_RxCpltCallback+0xb0>)
 80092be:	f009 fb7c 	bl	80129ba <memset>
	  }

  	}
  	if(USARTBLE.RxCount>=15)//no  "\n" Line feeds string full over to 24 byte, clear data
 80092c2:	4b0e      	ldr	r3, [pc, #56]	; (80092fc <HAL_UART_RxCpltCallback+0xa4>)
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2b0e      	cmp	r3, #14
 80092c8:	dd0b      	ble.n	80092e2 <HAL_UART_RxCpltCallback+0x8a>
  	{
  		USARTBLE.RxCount=0;
 80092ca:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <HAL_UART_RxCpltCallback+0xa4>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	605a      	str	r2, [r3, #4]
  		memset( USARTBLE.iapbuffer, 0, strlen(USARTBLE.iapbuffer) ); //clear Receive data
 80092d0:	480d      	ldr	r0, [pc, #52]	; (8009308 <HAL_UART_RxCpltCallback+0xb0>)
 80092d2:	f7fe ffb5 	bl	8008240 <strlen>
 80092d6:	4603      	mov	r3, r0
 80092d8:	461a      	mov	r2, r3
 80092da:	2100      	movs	r1, #0
 80092dc:	480a      	ldr	r0, [pc, #40]	; (8009308 <HAL_UART_RxCpltCallback+0xb0>)
 80092de:	f009 fb6c 	bl	80129ba <memset>
  	}

  while(HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 1)==HAL_OK);
 80092e2:	bf00      	nop
 80092e4:	2201      	movs	r2, #1
 80092e6:	4906      	ldr	r1, [pc, #24]	; (8009300 <HAL_UART_RxCpltCallback+0xa8>)
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f006 f8d1 	bl	800f490 <HAL_UART_Receive_IT>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d0f7      	beq.n	80092e4 <HAL_UART_RxCpltCallback+0x8c>
}
 80092f4:	bf00      	nop
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	2001b460 	.word	0x2001b460
 8009300:	20023720 	.word	0x20023720
 8009304:	08012a94 	.word	0x08012a94
 8009308:	2001b600 	.word	0x2001b600
 800930c:	20008050 	.word	0x20008050

08009310 <ADC_Thread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Thread */
void ADC_Thread(void const * argument)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS( 500 );
 8009318:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800931c:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800931e:	4b19      	ldr	r3, [pc, #100]	; (8009384 <ADC_Thread+0x74>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68f9      	ldr	r1, [r7, #12]
 8009324:	4618      	mov	r0, r3
 8009326:	f007 fd1f 	bl	8010d68 <xQueueSemaphoreTake>
 800932a:	4603      	mov	r3, r0
 800932c:	2b01      	cmp	r3, #1
 800932e:	d1f6      	bne.n	800931e <ADC_Thread+0xe>
 8009330:	4b15      	ldr	r3, [pc, #84]	; (8009388 <ADC_Thread+0x78>)
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1f2      	bne.n	800931e <ADC_Thread+0xe>
//				if(ADS1256.data_index == 15000) //divide 2 for FFT real data equal 4096
//				{
//

//
				    HAL_UART_Transmit(&huart6, STX, 2, 50);
 8009338:	2332      	movs	r3, #50	; 0x32
 800933a:	2202      	movs	r2, #2
 800933c:	4913      	ldr	r1, [pc, #76]	; (800938c <ADC_Thread+0x7c>)
 800933e:	4814      	ldr	r0, [pc, #80]	; (8009390 <ADC_Thread+0x80>)
 8009340:	f006 f815 	bl	800f36e <HAL_UART_Transmit>
				    HAL_UART_Transmit(&huart6, transmissionDataByUart, 45000 , 1000);
 8009344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009348:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 800934c:	4911      	ldr	r1, [pc, #68]	; (8009394 <ADC_Thread+0x84>)
 800934e:	4810      	ldr	r0, [pc, #64]	; (8009390 <ADC_Thread+0x80>)
 8009350:	f006 f80d 	bl	800f36e <HAL_UART_Transmit>
				    HAL_UART_Transmit(&huart6, ETX, 2, 50);
 8009354:	2332      	movs	r3, #50	; 0x32
 8009356:	2202      	movs	r2, #2
 8009358:	490f      	ldr	r1, [pc, #60]	; (8009398 <ADC_Thread+0x88>)
 800935a:	480d      	ldr	r0, [pc, #52]	; (8009390 <ADC_Thread+0x80>)
 800935c:	f006 f807 	bl	800f36e <HAL_UART_Transmit>
//				  	ADS1256.data_index = 0;
//
//
//				  	transmitCount++;
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8009360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009364:	480d      	ldr	r0, [pc, #52]	; (800939c <ADC_Thread+0x8c>)
 8009366:	f002 fd66 	bl	800be36 <HAL_GPIO_TogglePin>
//
//					if(xStatus == pdPASS)
//					{
//						vTaskResume(FFT_TaskHandle);
//					};
				    transmitCount++;
 800936a:	4b0d      	ldr	r3, [pc, #52]	; (80093a0 <ADC_Thread+0x90>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3301      	adds	r3, #1
 8009370:	4a0b      	ldr	r2, [pc, #44]	; (80093a0 <ADC_Thread+0x90>)
 8009372:	6013      	str	r3, [r2, #0]
				    ADS1256.data_index = 0;
 8009374:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <ADC_Thread+0x94>)
 8009376:	2200      	movs	r2, #0
 8009378:	601a      	str	r2, [r3, #0]
					UART_Flag = UART_NORMAL;
 800937a:	4b0b      	ldr	r3, [pc, #44]	; (80093a8 <ADC_Thread+0x98>)
 800937c:	2201      	movs	r2, #1
 800937e:	601a      	str	r2, [r3, #0]
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 8009380:	e7cd      	b.n	800931e <ADC_Thread+0xe>
 8009382:	bf00      	nop
 8009384:	2000841c 	.word	0x2000841c
 8009388:	20023788 	.word	0x20023788
 800938c:	20000008 	.word	0x20000008
 8009390:	200236a0 	.word	0x200236a0
 8009394:	20008428 	.word	0x20008428
 8009398:	2000000c 	.word	0x2000000c
 800939c:	40020c00 	.word	0x40020c00
 80093a0:	200002a0 	.word	0x200002a0
 80093a4:	20003ff4 	.word	0x20003ff4
 80093a8:	200002a4 	.word	0x200002a4

080093ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80093ac:	b480      	push	{r7}
 80093ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80093b0:	bf00      	nop
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b085      	sub	sp, #20
 80093be:	af00      	add	r7, sp, #0
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	603b      	str	r3, [r7, #0]
 80093c6:	4603      	mov	r3, r0
 80093c8:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d204      	bcs.n	80093dc <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4413      	add	r3, r2
 80093d8:	7bfa      	ldrb	r2, [r7, #15]
 80093da:	701a      	strb	r2, [r3, #0]
  }
}
 80093dc:	bf00      	nop
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	607a      	str	r2, [r7, #4]
 80093f2:	603b      	str	r3, [r7, #0]
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80093f8:	bf00      	nop
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60fb      	str	r3, [r7, #12]
 8009412:	e002      	b.n	800941a <_strnlen_s+0x16>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	3301      	adds	r3, #1
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d004      	beq.n	800942c <_strnlen_s+0x28>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	1e5a      	subs	r2, r3, #1
 8009426:	603a      	str	r2, [r7, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1f3      	bne.n	8009414 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	1ad3      	subs	r3, r2, r3
}
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	4603      	mov	r3, r0
 8009446:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8009448:	79fb      	ldrb	r3, [r7, #7]
 800944a:	2b2f      	cmp	r3, #47	; 0x2f
 800944c:	d904      	bls.n	8009458 <_is_digit+0x1a>
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	2b39      	cmp	r3, #57	; 0x39
 8009452:	d801      	bhi.n	8009458 <_is_digit+0x1a>
 8009454:	2301      	movs	r3, #1
 8009456:	e000      	b.n	800945a <_is_digit+0x1c>
 8009458:	2300      	movs	r3, #0
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	b2db      	uxtb	r3, r3
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8009474:	2300      	movs	r3, #0
 8009476:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8009478:	e00e      	b.n	8009498 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	005b      	lsls	r3, r3, #1
 8009484:	4618      	mov	r0, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	1c59      	adds	r1, r3, #1
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	6011      	str	r1, [r2, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	4403      	add	r3, r0
 8009494:	3b30      	subs	r3, #48	; 0x30
 8009496:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	4618      	mov	r0, r3
 80094a0:	f7ff ffcd 	bl	800943e <_is_digit>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e7      	bne.n	800947a <_atoi+0xe>
  }
  return i;
 80094aa:	68fb      	ldr	r3, [r7, #12]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80094b4:	b590      	push	{r4, r7, lr}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
 80094c0:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80094c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d125      	bne.n	800951c <_out_rev+0x68>
 80094d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d120      	bne.n	800951c <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	617b      	str	r3, [r7, #20]
 80094de:	e00a      	b.n	80094f6 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	1c53      	adds	r3, r2, #1
 80094e4:	607b      	str	r3, [r7, #4]
 80094e6:	68fc      	ldr	r4, [r7, #12]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	68b9      	ldr	r1, [r7, #8]
 80094ec:	2020      	movs	r0, #32
 80094ee:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	3301      	adds	r3, #1
 80094f4:	617b      	str	r3, [r7, #20]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d3f0      	bcc.n	80094e0 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80094fe:	e00d      	b.n	800951c <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8009500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009502:	3b01      	subs	r3, #1
 8009504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	4413      	add	r3, r2
 800950c:	7818      	ldrb	r0, [r3, #0]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	1c53      	adds	r3, r2, #1
 8009512:	607b      	str	r3, [r7, #4]
 8009514:	68fc      	ldr	r4, [r7, #12]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	68b9      	ldr	r1, [r7, #8]
 800951a:	47a0      	blx	r4
  while (len) {
 800951c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1ee      	bne.n	8009500 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8009522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009524:	f003 0302 	and.w	r3, r3, #2
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00e      	beq.n	800954a <_out_rev+0x96>
    while (idx - start_idx < width) {
 800952c:	e007      	b.n	800953e <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	1c53      	adds	r3, r2, #1
 8009532:	607b      	str	r3, [r7, #4]
 8009534:	68fc      	ldr	r4, [r7, #12]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	68b9      	ldr	r1, [r7, #8]
 800953a:	2020      	movs	r0, #32
 800953c:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009546:	429a      	cmp	r2, r3
 8009548:	d8f1      	bhi.n	800952e <_out_rev+0x7a>
    }
  }

  return idx;
 800954a:	687b      	ldr	r3, [r7, #4]
}
 800954c:	4618      	mov	r0, r3
 800954e:	371c      	adds	r7, #28
 8009550:	46bd      	mov	sp, r7
 8009552:	bd90      	pop	{r4, r7, pc}

08009554 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af04      	add	r7, sp, #16
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	f003 0302 	and.w	r3, r3, #2
 8009568:	2b00      	cmp	r3, #0
 800956a:	d136      	bne.n	80095da <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d018      	beq.n	80095a4 <_ntoa_format+0x50>
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	2b00      	cmp	r3, #0
 800957a:	d013      	beq.n	80095a4 <_ntoa_format+0x50>
 800957c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d104      	bne.n	800958e <_ntoa_format+0x3a>
 8009584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009586:	f003 030c 	and.w	r3, r3, #12
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00a      	beq.n	80095a4 <_ntoa_format+0x50>
      width--;
 800958e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009590:	3b01      	subs	r3, #1
 8009592:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009594:	e006      	b.n	80095a4 <_ntoa_format+0x50>
      buf[len++] = '0';
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	61fa      	str	r2, [r7, #28]
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	4413      	add	r3, r2
 80095a0:	2230      	movs	r2, #48	; 0x30
 80095a2:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80095a4:	69fa      	ldr	r2, [r7, #28]
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d20a      	bcs.n	80095c2 <_ntoa_format+0x6e>
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	2b1f      	cmp	r3, #31
 80095b0:	d9f1      	bls.n	8009596 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80095b2:	e006      	b.n	80095c2 <_ntoa_format+0x6e>
      buf[len++] = '0';
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	1c5a      	adds	r2, r3, #1
 80095b8:	61fa      	str	r2, [r7, #28]
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	4413      	add	r3, r2
 80095be:	2230      	movs	r2, #48	; 0x30
 80095c0:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d006      	beq.n	80095da <_ntoa_format+0x86>
 80095cc:	69fa      	ldr	r2, [r7, #28]
 80095ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d202      	bcs.n	80095da <_ntoa_format+0x86>
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	2b1f      	cmp	r3, #31
 80095d8:	d9ec      	bls.n	80095b4 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80095da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095dc:	f003 0310 	and.w	r3, r3, #16
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d058      	beq.n	8009696 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d116      	bne.n	800961c <_ntoa_format+0xc8>
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d013      	beq.n	800961c <_ntoa_format+0xc8>
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d003      	beq.n	8009604 <_ntoa_format+0xb0>
 80095fc:	69fa      	ldr	r2, [r7, #28]
 80095fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009600:	429a      	cmp	r2, r3
 8009602:	d10b      	bne.n	800961c <_ntoa_format+0xc8>
      len--;
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	3b01      	subs	r3, #1
 8009608:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d005      	beq.n	800961c <_ntoa_format+0xc8>
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	2b10      	cmp	r3, #16
 8009614:	d102      	bne.n	800961c <_ntoa_format+0xc8>
        len--;
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	3b01      	subs	r3, #1
 800961a:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	2b10      	cmp	r3, #16
 8009620:	d10f      	bne.n	8009642 <_ntoa_format+0xee>
 8009622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <_ntoa_format+0xee>
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	2b1f      	cmp	r3, #31
 8009630:	d807      	bhi.n	8009642 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	61fa      	str	r2, [r7, #28]
 8009638:	69ba      	ldr	r2, [r7, #24]
 800963a:	4413      	add	r3, r2
 800963c:	2278      	movs	r2, #120	; 0x78
 800963e:	701a      	strb	r2, [r3, #0]
 8009640:	e01f      	b.n	8009682 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	2b10      	cmp	r3, #16
 8009646:	d10f      	bne.n	8009668 <_ntoa_format+0x114>
 8009648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964a:	f003 0320 	and.w	r3, r3, #32
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00a      	beq.n	8009668 <_ntoa_format+0x114>
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	2b1f      	cmp	r3, #31
 8009656:	d807      	bhi.n	8009668 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	61fa      	str	r2, [r7, #28]
 800965e:	69ba      	ldr	r2, [r7, #24]
 8009660:	4413      	add	r3, r2
 8009662:	2258      	movs	r2, #88	; 0x58
 8009664:	701a      	strb	r2, [r3, #0]
 8009666:	e00c      	b.n	8009682 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966a:	2b02      	cmp	r3, #2
 800966c:	d109      	bne.n	8009682 <_ntoa_format+0x12e>
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	2b1f      	cmp	r3, #31
 8009672:	d806      	bhi.n	8009682 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	1c5a      	adds	r2, r3, #1
 8009678:	61fa      	str	r2, [r7, #28]
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	4413      	add	r3, r2
 800967e:	2262      	movs	r2, #98	; 0x62
 8009680:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	2b1f      	cmp	r3, #31
 8009686:	d806      	bhi.n	8009696 <_ntoa_format+0x142>
      buf[len++] = '0';
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	61fa      	str	r2, [r7, #28]
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	4413      	add	r3, r2
 8009692:	2230      	movs	r2, #48	; 0x30
 8009694:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	2b1f      	cmp	r3, #31
 800969a:	d824      	bhi.n	80096e6 <_ntoa_format+0x192>
    if (negative) {
 800969c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d007      	beq.n	80096b4 <_ntoa_format+0x160>
      buf[len++] = '-';
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	61fa      	str	r2, [r7, #28]
 80096aa:	69ba      	ldr	r2, [r7, #24]
 80096ac:	4413      	add	r3, r2
 80096ae:	222d      	movs	r2, #45	; 0x2d
 80096b0:	701a      	strb	r2, [r3, #0]
 80096b2:	e018      	b.n	80096e6 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	f003 0304 	and.w	r3, r3, #4
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d007      	beq.n	80096ce <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	61fa      	str	r2, [r7, #28]
 80096c4:	69ba      	ldr	r2, [r7, #24]
 80096c6:	4413      	add	r3, r2
 80096c8:	222b      	movs	r2, #43	; 0x2b
 80096ca:	701a      	strb	r2, [r3, #0]
 80096cc:	e00b      	b.n	80096e6 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	f003 0308 	and.w	r3, r3, #8
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d006      	beq.n	80096e6 <_ntoa_format+0x192>
      buf[len++] = ' ';
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	1c5a      	adds	r2, r3, #1
 80096dc:	61fa      	str	r2, [r7, #28]
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	4413      	add	r3, r2
 80096e2:	2220      	movs	r2, #32
 80096e4:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	9303      	str	r3, [sp, #12]
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	9302      	str	r3, [sp, #8]
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	68b9      	ldr	r1, [r7, #8]
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7ff fed9 	bl	80094b4 <_out_rev>
 8009702:	4603      	mov	r3, r0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b096      	sub	sp, #88	; 0x58
 8009710:	af08      	add	r7, sp, #32
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800971a:	2300      	movs	r3, #0
 800971c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800971e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009720:	2b00      	cmp	r3, #0
 8009722:	d103      	bne.n	800972c <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8009724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009726:	f023 0310 	bic.w	r3, r3, #16
 800972a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800972c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800972e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009732:	2b00      	cmp	r3, #0
 8009734:	d002      	beq.n	800973c <_ntoa_long+0x30>
 8009736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009738:	2b00      	cmp	r3, #0
 800973a:	d033      	beq.n	80097a4 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800973c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800973e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009740:	fbb3 f2f2 	udiv	r2, r3, r2
 8009744:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009746:	fb01 f202 	mul.w	r2, r1, r2
 800974a:	1a9b      	subs	r3, r3, r2
 800974c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8009750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009754:	2b09      	cmp	r3, #9
 8009756:	d804      	bhi.n	8009762 <_ntoa_long+0x56>
 8009758:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800975c:	3330      	adds	r3, #48	; 0x30
 800975e:	b2da      	uxtb	r2, r3
 8009760:	e00d      	b.n	800977e <_ntoa_long+0x72>
 8009762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009764:	f003 0320 	and.w	r3, r3, #32
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <_ntoa_long+0x64>
 800976c:	2241      	movs	r2, #65	; 0x41
 800976e:	e000      	b.n	8009772 <_ntoa_long+0x66>
 8009770:	2261      	movs	r2, #97	; 0x61
 8009772:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009776:	4413      	add	r3, r2
 8009778:	b2db      	uxtb	r3, r3
 800977a:	3b0a      	subs	r3, #10
 800977c:	b2da      	uxtb	r2, r3
 800977e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009780:	1c59      	adds	r1, r3, #1
 8009782:	6379      	str	r1, [r7, #52]	; 0x34
 8009784:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009788:	440b      	add	r3, r1
 800978a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800978e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009792:	fbb2 f3f3 	udiv	r3, r2, r3
 8009796:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8009798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <_ntoa_long+0x98>
 800979e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a0:	2b1f      	cmp	r3, #31
 80097a2:	d9cb      	bls.n	800973c <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80097a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097a6:	9306      	str	r3, [sp, #24]
 80097a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097aa:	9305      	str	r3, [sp, #20]
 80097ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ae:	9304      	str	r3, [sp, #16]
 80097b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097b2:	9303      	str	r3, [sp, #12]
 80097b4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80097b8:	9302      	str	r3, [sp, #8]
 80097ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	f107 0310 	add.w	r3, r7, #16
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	68b9      	ldr	r1, [r7, #8]
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f7ff fec2 	bl	8009554 <_ntoa_format>
 80097d0:	4603      	mov	r3, r0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3738      	adds	r7, #56	; 0x38
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80097da:	b590      	push	{r4, r7, lr}
 80097dc:	b097      	sub	sp, #92	; 0x5c
 80097de:	af08      	add	r7, sp, #32
 80097e0:	60f8      	str	r0, [r7, #12]
 80097e2:	60b9      	str	r1, [r7, #8]
 80097e4:	607a      	str	r2, [r7, #4]
 80097e6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80097ec:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80097f0:	4323      	orrs	r3, r4
 80097f2:	d103      	bne.n	80097fc <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80097f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097f6:	f023 0310 	bic.w	r3, r3, #16
 80097fa:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80097fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <_ntoa_long_long+0x34>
 8009806:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800980a:	4323      	orrs	r3, r4
 800980c:	d039      	beq.n	8009882 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 800980e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009812:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009816:	f7fe fd1b 	bl	8008250 <__aeabi_uldivmod>
 800981a:	461c      	mov	r4, r3
 800981c:	4613      	mov	r3, r2
 800981e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8009822:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009826:	2b09      	cmp	r3, #9
 8009828:	d804      	bhi.n	8009834 <_ntoa_long_long+0x5a>
 800982a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800982e:	3330      	adds	r3, #48	; 0x30
 8009830:	b2da      	uxtb	r2, r3
 8009832:	e00d      	b.n	8009850 <_ntoa_long_long+0x76>
 8009834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009836:	f003 0320 	and.w	r3, r3, #32
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <_ntoa_long_long+0x68>
 800983e:	2241      	movs	r2, #65	; 0x41
 8009840:	e000      	b.n	8009844 <_ntoa_long_long+0x6a>
 8009842:	2261      	movs	r2, #97	; 0x61
 8009844:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009848:	4413      	add	r3, r2
 800984a:	b2db      	uxtb	r3, r3
 800984c:	3b0a      	subs	r3, #10
 800984e:	b2da      	uxtb	r2, r3
 8009850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009852:	1c59      	adds	r1, r3, #1
 8009854:	6379      	str	r1, [r7, #52]	; 0x34
 8009856:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800985a:	440b      	add	r3, r1
 800985c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8009860:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009864:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009868:	f7fe fcf2 	bl	8008250 <__aeabi_uldivmod>
 800986c:	4603      	mov	r3, r0
 800986e:	460c      	mov	r4, r1
 8009870:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8009874:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8009878:	4323      	orrs	r3, r4
 800987a:	d002      	beq.n	8009882 <_ntoa_long_long+0xa8>
 800987c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987e:	2b1f      	cmp	r3, #31
 8009880:	d9c5      	bls.n	800980e <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8009882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009884:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009886:	9206      	str	r2, [sp, #24]
 8009888:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800988a:	9205      	str	r2, [sp, #20]
 800988c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800988e:	9204      	str	r2, [sp, #16]
 8009890:	9303      	str	r3, [sp, #12]
 8009892:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8009896:	9302      	str	r3, [sp, #8]
 8009898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	f107 0310 	add.w	r3, r7, #16
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	68b9      	ldr	r1, [r7, #8]
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f7ff fe53 	bl	8009554 <_ntoa_format>
 80098ae:	4603      	mov	r3, r0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	373c      	adds	r7, #60	; 0x3c
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd90      	pop	{r4, r7, pc}

080098b8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80098b8:	b590      	push	{r4, r7, lr}
 80098ba:	b09d      	sub	sp, #116	; 0x74
 80098bc:	af04      	add	r7, sp, #16
 80098be:	6178      	str	r0, [r7, #20]
 80098c0:	6139      	str	r1, [r7, #16]
 80098c2:	60fa      	str	r2, [r7, #12]
 80098c4:	60bb      	str	r3, [r7, #8]
 80098c6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80098ce:	f04f 0300 	mov.w	r3, #0
 80098d2:	f04f 0400 	mov.w	r4, #0
 80098d6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80098da:	ed97 6b00 	vldr	d6, [r7]
 80098de:	ed97 7b00 	vldr	d7, [r7]
 80098e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80098e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ea:	d00f      	beq.n	800990c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80098ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098ee:	9303      	str	r3, [sp, #12]
 80098f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098f2:	9302      	str	r3, [sp, #8]
 80098f4:	2303      	movs	r3, #3
 80098f6:	9301      	str	r3, [sp, #4]
 80098f8:	4bb7      	ldr	r3, [pc, #732]	; (8009bd8 <_ftoa+0x320>)
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	6939      	ldr	r1, [r7, #16]
 8009902:	6978      	ldr	r0, [r7, #20]
 8009904:	f7ff fdd6 	bl	80094b4 <_out_rev>
 8009908:	4603      	mov	r3, r0
 800990a:	e21e      	b.n	8009d4a <_ftoa+0x492>
  if (value < -DBL_MAX)
 800990c:	ed97 7b00 	vldr	d7, [r7]
 8009910:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8009bb0 <_ftoa+0x2f8>
 8009914:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991c:	d50f      	bpl.n	800993e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800991e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009920:	9303      	str	r3, [sp, #12]
 8009922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009924:	9302      	str	r3, [sp, #8]
 8009926:	2304      	movs	r3, #4
 8009928:	9301      	str	r3, [sp, #4]
 800992a:	4bac      	ldr	r3, [pc, #688]	; (8009bdc <_ftoa+0x324>)
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	6939      	ldr	r1, [r7, #16]
 8009934:	6978      	ldr	r0, [r7, #20]
 8009936:	f7ff fdbd 	bl	80094b4 <_out_rev>
 800993a:	4603      	mov	r3, r0
 800993c:	e205      	b.n	8009d4a <_ftoa+0x492>
  if (value > DBL_MAX)
 800993e:	ed97 7b00 	vldr	d7, [r7]
 8009942:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8009bb8 <_ftoa+0x300>
 8009946:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800994a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994e:	dd1d      	ble.n	800998c <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8009950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009952:	f003 0304 	and.w	r3, r3, #4
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <_ftoa+0xa6>
 800995a:	4ba1      	ldr	r3, [pc, #644]	; (8009be0 <_ftoa+0x328>)
 800995c:	e000      	b.n	8009960 <_ftoa+0xa8>
 800995e:	4ba1      	ldr	r3, [pc, #644]	; (8009be4 <_ftoa+0x32c>)
 8009960:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009962:	f002 0204 	and.w	r2, r2, #4
 8009966:	2a00      	cmp	r2, #0
 8009968:	d001      	beq.n	800996e <_ftoa+0xb6>
 800996a:	2204      	movs	r2, #4
 800996c:	e000      	b.n	8009970 <_ftoa+0xb8>
 800996e:	2203      	movs	r2, #3
 8009970:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009972:	9103      	str	r1, [sp, #12]
 8009974:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8009976:	9102      	str	r1, [sp, #8]
 8009978:	9201      	str	r2, [sp, #4]
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	6939      	ldr	r1, [r7, #16]
 8009982:	6978      	ldr	r0, [r7, #20]
 8009984:	f7ff fd96 	bl	80094b4 <_out_rev>
 8009988:	4603      	mov	r3, r0
 800998a:	e1de      	b.n	8009d4a <_ftoa+0x492>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800998c:	ed97 7b00 	vldr	d7, [r7]
 8009990:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8009bc0 <_ftoa+0x308>
 8009994:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999c:	dc08      	bgt.n	80099b0 <_ftoa+0xf8>
 800999e:	ed97 7b00 	vldr	d7, [r7]
 80099a2:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8009bc8 <_ftoa+0x310>
 80099a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80099aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ae:	d50f      	bpl.n	80099d0 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80099b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099b2:	9302      	str	r3, [sp, #8]
 80099b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099b6:	9301      	str	r3, [sp, #4]
 80099b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	ed97 0b00 	vldr	d0, [r7]
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	6939      	ldr	r1, [r7, #16]
 80099c6:	6978      	ldr	r0, [r7, #20]
 80099c8:	f000 f9c6 	bl	8009d58 <_etoa>
 80099cc:	4603      	mov	r3, r0
 80099ce:	e1bc      	b.n	8009d4a <_ftoa+0x492>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80099d0:	2300      	movs	r3, #0
 80099d2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80099d6:	ed97 7b00 	vldr	d7, [r7]
 80099da:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80099de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e2:	d50a      	bpl.n	80099fa <_ftoa+0x142>
    negative = true;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80099ea:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8009bd0 <_ftoa+0x318>
 80099ee:	ed97 7b00 	vldr	d7, [r7]
 80099f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80099f6:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80099fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10e      	bne.n	8009a22 <_ftoa+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8009a04:	2306      	movs	r3, #6
 8009a06:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8009a08:	e00b      	b.n	8009a22 <_ftoa+0x16a>
    buf[len++] = '0';
 8009a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009a10:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009a14:	4413      	add	r3, r2
 8009a16:	2230      	movs	r2, #48	; 0x30
 8009a18:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8009a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8009a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a24:	2b1f      	cmp	r3, #31
 8009a26:	d802      	bhi.n	8009a2e <_ftoa+0x176>
 8009a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a2a:	2b09      	cmp	r3, #9
 8009a2c:	d8ed      	bhi.n	8009a0a <_ftoa+0x152>
  }

  int whole = (int)value;
 8009a2e:	ed97 7b00 	vldr	d7, [r7]
 8009a32:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009a36:	ee17 3a90 	vmov	r3, s15
 8009a3a:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8009a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009a46:	ed97 6b00 	vldr	d6, [r7]
 8009a4a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009a4e:	4a66      	ldr	r2, [pc, #408]	; (8009be8 <_ftoa+0x330>)
 8009a50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	4413      	add	r3, r2
 8009a56:	ed93 7b00 	vldr	d7, [r3]
 8009a5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a5e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8009a62:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8009a66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8009a6a:	ee17 3a90 	vmov	r3, s15
 8009a6e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8009a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a72:	ee07 3a90 	vmov	s15, r3
 8009a76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009a7a:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8009a7e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009a82:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8009a86:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8009a8a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009a8e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a96:	dd18      	ble.n	8009aca <_ftoa+0x212>
    ++frac;
 8009a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8009a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aa0:	ee07 3a90 	vmov	s15, r3
 8009aa4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8009aa8:	4a4f      	ldr	r2, [pc, #316]	; (8009be8 <_ftoa+0x330>)
 8009aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aac:	00db      	lsls	r3, r3, #3
 8009aae:	4413      	add	r3, r2
 8009ab0:	ed93 7b00 	vldr	d7, [r3]
 8009ab4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009abc:	db19      	blt.n	8009af2 <_ftoa+0x23a>
      frac = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8009ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8009ac8:	e013      	b.n	8009af2 <_ftoa+0x23a>
    }
  }
  else if (diff < 0.5) {
 8009aca:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8009ace:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009ad2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ada:	d40a      	bmi.n	8009af2 <_ftoa+0x23a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8009adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d004      	beq.n	8009aec <_ftoa+0x234>
 8009ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <_ftoa+0x23a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8009aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aee:	3301      	adds	r3, #1
 8009af0:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8009af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d12e      	bne.n	8009b56 <_ftoa+0x29e>
    diff = value - (double)whole;
 8009af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009afa:	ee07 3a90 	vmov	s15, r3
 8009afe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009b02:	ed97 6b00 	vldr	d6, [r7]
 8009b06:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009b0a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8009b0e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8009b12:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009b16:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1e:	bf4c      	ite	mi
 8009b20:	2301      	movmi	r3, #1
 8009b22:	2300      	movpl	r3, #0
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	f083 0301 	eor.w	r3, r3, #1
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d108      	bne.n	8009b42 <_ftoa+0x28a>
 8009b30:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8009b34:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009b38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b40:	dd73      	ble.n	8009c2a <_ftoa+0x372>
 8009b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b44:	f003 0301 	and.w	r3, r3, #1
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 8091 	beq.w	8009c70 <_ftoa+0x3b8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8009b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b50:	3301      	adds	r3, #1
 8009b52:	657b      	str	r3, [r7, #84]	; 0x54
 8009b54:	e08c      	b.n	8009c70 <_ftoa+0x3b8>
    }
  }
  else {
    unsigned int count = prec;
 8009b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b58:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8009b5a:	e020      	b.n	8009b9e <_ftoa+0x2e6>
      --count;
 8009b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8009b62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b64:	4b21      	ldr	r3, [pc, #132]	; (8009bec <_ftoa+0x334>)
 8009b66:	fba3 2301 	umull	r2, r3, r3, r1
 8009b6a:	08da      	lsrs	r2, r3, #3
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	1aca      	subs	r2, r1, r3
 8009b76:	b2d2      	uxtb	r2, r2
 8009b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b7a:	1c59      	adds	r1, r3, #1
 8009b7c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8009b7e:	3230      	adds	r2, #48	; 0x30
 8009b80:	b2d2      	uxtb	r2, r2
 8009b82:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009b86:	440b      	add	r3, r1
 8009b88:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8009b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b8e:	4a17      	ldr	r2, [pc, #92]	; (8009bec <_ftoa+0x334>)
 8009b90:	fba2 2303 	umull	r2, r3, r2, r3
 8009b94:	08db      	lsrs	r3, r3, #3
 8009b96:	653b      	str	r3, [r7, #80]	; 0x50
 8009b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <_ftoa+0x2ee>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8009b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ba0:	2b1f      	cmp	r3, #31
 8009ba2:	d9db      	bls.n	8009b5c <_ftoa+0x2a4>
 8009ba4:	e02d      	b.n	8009c02 <_ftoa+0x34a>
        break;
 8009ba6:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8009ba8:	e02b      	b.n	8009c02 <_ftoa+0x34a>
 8009baa:	bf00      	nop
 8009bac:	f3af 8000 	nop.w
 8009bb0:	ffffffff 	.word	0xffffffff
 8009bb4:	ffefffff 	.word	0xffefffff
 8009bb8:	ffffffff 	.word	0xffffffff
 8009bbc:	7fefffff 	.word	0x7fefffff
 8009bc0:	00000000 	.word	0x00000000
 8009bc4:	41cdcd65 	.word	0x41cdcd65
 8009bc8:	00000000 	.word	0x00000000
 8009bcc:	c1cdcd65 	.word	0xc1cdcd65
	...
 8009bd8:	08012a9c 	.word	0x08012a9c
 8009bdc:	08012aa0 	.word	0x08012aa0
 8009be0:	08012aa8 	.word	0x08012aa8
 8009be4:	08012ab0 	.word	0x08012ab0
 8009be8:	08012ac0 	.word	0x08012ac0
 8009bec:	cccccccd 	.word	0xcccccccd
      buf[len++] = '0';
 8009bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009bf6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009bfa:	4413      	add	r3, r2
 8009bfc:	2230      	movs	r2, #48	; 0x30
 8009bfe:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8009c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c04:	2b1f      	cmp	r3, #31
 8009c06:	d804      	bhi.n	8009c12 <_ftoa+0x35a>
 8009c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c0a:	1e5a      	subs	r2, r3, #1
 8009c0c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1ee      	bne.n	8009bf0 <_ftoa+0x338>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8009c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c14:	2b1f      	cmp	r3, #31
 8009c16:	d82b      	bhi.n	8009c70 <_ftoa+0x3b8>
      // add decimal
      buf[len++] = '.';
 8009c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009c1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009c22:	4413      	add	r3, r2
 8009c24:	222e      	movs	r2, #46	; 0x2e
 8009c26:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8009c2a:	e021      	b.n	8009c70 <_ftoa+0x3b8>
    buf[len++] = (char)(48 + (whole % 10));
 8009c2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c2e:	4b49      	ldr	r3, [pc, #292]	; (8009d54 <_ftoa+0x49c>)
 8009c30:	fb83 1302 	smull	r1, r3, r3, r2
 8009c34:	1099      	asrs	r1, r3, #2
 8009c36:	17d3      	asrs	r3, r2, #31
 8009c38:	1ac9      	subs	r1, r1, r3
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	440b      	add	r3, r1
 8009c40:	005b      	lsls	r3, r3, #1
 8009c42:	1ad1      	subs	r1, r2, r3
 8009c44:	b2ca      	uxtb	r2, r1
 8009c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c48:	1c59      	adds	r1, r3, #1
 8009c4a:	65f9      	str	r1, [r7, #92]	; 0x5c
 8009c4c:	3230      	adds	r2, #48	; 0x30
 8009c4e:	b2d2      	uxtb	r2, r2
 8009c50:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009c54:	440b      	add	r3, r1
 8009c56:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8009c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c5c:	4a3d      	ldr	r2, [pc, #244]	; (8009d54 <_ftoa+0x49c>)
 8009c5e:	fb82 1203 	smull	r1, r2, r2, r3
 8009c62:	1092      	asrs	r2, r2, #2
 8009c64:	17db      	asrs	r3, r3, #31
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	657b      	str	r3, [r7, #84]	; 0x54
 8009c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d003      	beq.n	8009c78 <_ftoa+0x3c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8009c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c72:	2b1f      	cmp	r3, #31
 8009c74:	d9da      	bls.n	8009c2c <_ftoa+0x374>
 8009c76:	e000      	b.n	8009c7a <_ftoa+0x3c2>
      break;
 8009c78:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8009c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c7c:	f003 0302 	and.w	r3, r3, #2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d124      	bne.n	8009cce <_ftoa+0x416>
 8009c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d01f      	beq.n	8009cce <_ftoa+0x416>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8009c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d015      	beq.n	8009cc0 <_ftoa+0x408>
 8009c94:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d104      	bne.n	8009ca6 <_ftoa+0x3ee>
 8009c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c9e:	f003 030c 	and.w	r3, r3, #12
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00c      	beq.n	8009cc0 <_ftoa+0x408>
      width--;
 8009ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8009cac:	e008      	b.n	8009cc0 <_ftoa+0x408>
      buf[len++] = '0';
 8009cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cb0:	1c5a      	adds	r2, r3, #1
 8009cb2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009cb4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009cb8:	4413      	add	r3, r2
 8009cba:	2230      	movs	r2, #48	; 0x30
 8009cbc:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8009cc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d202      	bcs.n	8009cce <_ftoa+0x416>
 8009cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cca:	2b1f      	cmp	r3, #31
 8009ccc:	d9ef      	bls.n	8009cae <_ftoa+0x3f6>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8009cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cd0:	2b1f      	cmp	r3, #31
 8009cd2:	d82a      	bhi.n	8009d2a <_ftoa+0x472>
    if (negative) {
 8009cd4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d009      	beq.n	8009cf0 <_ftoa+0x438>
      buf[len++] = '-';
 8009cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009ce2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009ce6:	4413      	add	r3, r2
 8009ce8:	222d      	movs	r2, #45	; 0x2d
 8009cea:	f803 2c48 	strb.w	r2, [r3, #-72]
 8009cee:	e01c      	b.n	8009d2a <_ftoa+0x472>
    }
    else if (flags & FLAGS_PLUS) {
 8009cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d009      	beq.n	8009d0e <_ftoa+0x456>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8009cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009d00:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009d04:	4413      	add	r3, r2
 8009d06:	222b      	movs	r2, #43	; 0x2b
 8009d08:	f803 2c48 	strb.w	r2, [r3, #-72]
 8009d0c:	e00d      	b.n	8009d2a <_ftoa+0x472>
    }
    else if (flags & FLAGS_SPACE) {
 8009d0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d10:	f003 0308 	and.w	r3, r3, #8
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d008      	beq.n	8009d2a <_ftoa+0x472>
      buf[len++] = ' ';
 8009d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009d1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009d22:	4413      	add	r3, r2
 8009d24:	2220      	movs	r2, #32
 8009d26:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8009d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d2c:	9303      	str	r3, [sp, #12]
 8009d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d30:	9302      	str	r3, [sp, #8]
 8009d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	f107 0318 	add.w	r3, r7, #24
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	6939      	ldr	r1, [r7, #16]
 8009d42:	6978      	ldr	r0, [r7, #20]
 8009d44:	f7ff fbb6 	bl	80094b4 <_out_rev>
 8009d48:	4603      	mov	r3, r0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3764      	adds	r7, #100	; 0x64
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd90      	pop	{r4, r7, pc}
 8009d52:	bf00      	nop
 8009d54:	66666667 	.word	0x66666667

08009d58 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8009d58:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009d5c:	b09a      	sub	sp, #104	; 0x68
 8009d5e:	af06      	add	r7, sp, #24
 8009d60:	6178      	str	r0, [r7, #20]
 8009d62:	6139      	str	r1, [r7, #16]
 8009d64:	60fa      	str	r2, [r7, #12]
 8009d66:	60bb      	str	r3, [r7, #8]
 8009d68:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8009d6c:	ed97 6b00 	vldr	d6, [r7]
 8009d70:	ed97 7b00 	vldr	d7, [r7]
 8009d74:	eeb4 6b47 	vcmp.f64	d6, d7
 8009d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d7c:	d111      	bne.n	8009da2 <_etoa+0x4a>
 8009d7e:	ed97 7b00 	vldr	d7, [r7]
 8009d82:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 800a098 <_etoa+0x340>
 8009d86:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d8e:	dc08      	bgt.n	8009da2 <_etoa+0x4a>
 8009d90:	ed97 7b00 	vldr	d7, [r7]
 8009d94:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 800a0a0 <_etoa+0x348>
 8009d98:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da0:	d50f      	bpl.n	8009dc2 <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8009da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009da4:	9302      	str	r3, [sp, #8]
 8009da6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	ed97 0b00 	vldr	d0, [r7]
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	6939      	ldr	r1, [r7, #16]
 8009db8:	6978      	ldr	r0, [r7, #20]
 8009dba:	f7ff fd7d 	bl	80098b8 <_ftoa>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	e1cd      	b.n	800a15e <_etoa+0x406>
  }

  // determine the sign
  const bool negative = value < 0;
 8009dc2:	ed97 7b00 	vldr	d7, [r7]
 8009dc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dce:	bf4c      	ite	mi
 8009dd0:	2301      	movmi	r3, #1
 8009dd2:	2300      	movpl	r3, #0
 8009dd4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 8009dd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d005      	beq.n	8009dec <_etoa+0x94>
    value = -value;
 8009de0:	ed97 7b00 	vldr	d7, [r7]
 8009de4:	eeb1 7b47 	vneg.f64	d7, d7
 8009de8:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8009dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8009df6:	2306      	movs	r3, #6
 8009df8:	663b      	str	r3, [r7, #96]	; 0x60
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8009dfa:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009dfe:	e9c7 3406 	strd	r3, r4, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8009e02:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	f04f 0400 	mov.w	r4, #0
 8009e0e:	0d13      	lsrs	r3, r2, #20
 8009e10:	2400      	movs	r4, #0
 8009e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8009e1c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009e20:	f04f 31ff 	mov.w	r1, #4294967295
 8009e24:	4ab0      	ldr	r2, [pc, #704]	; (800a0e8 <_etoa+0x390>)
 8009e26:	ea03 0b01 	and.w	fp, r3, r1
 8009e2a:	ea04 0c02 	and.w	ip, r4, r2
 8009e2e:	f04f 0100 	mov.w	r1, #0
 8009e32:	4aae      	ldr	r2, [pc, #696]	; (800a0ec <_etoa+0x394>)
 8009e34:	ea4b 0301 	orr.w	r3, fp, r1
 8009e38:	ea4c 0402 	orr.w	r4, ip, r2
 8009e3c:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8009e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e42:	ee07 3a90 	vmov	s15, r3
 8009e46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009e4a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800a0a8 <_etoa+0x350>
 8009e4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e52:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800a0b0 <_etoa+0x358>
 8009e56:	ee37 6b06 	vadd.f64	d6, d7, d6
 8009e5a:	ed97 7b06 	vldr	d7, [r7, #24]
 8009e5e:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 8009e62:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009e66:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800a0b8 <_etoa+0x360>
 8009e6a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009e6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009e72:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009e76:	ee17 3a90 	vmov	r3, s15
 8009e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8009e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009e86:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 800a0c0 <_etoa+0x368>
 8009e8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e8e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009e92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009e96:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009e9a:	ee17 3a90 	vmov	r3, s15
 8009e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8009ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ea2:	ee07 3a90 	vmov	s15, r3
 8009ea6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009eaa:	ed9f 6b87 	vldr	d6, [pc, #540]	; 800a0c8 <_etoa+0x370>
 8009eae:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb4:	ee07 3a90 	vmov	s15, r3
 8009eb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ebc:	ed9f 5b84 	vldr	d5, [pc, #528]	; 800a0d0 <_etoa+0x378>
 8009ec0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009ec4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009ec8:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 8009ecc:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8009ed0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8009ed4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ed8:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8009edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ede:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8009ee8:	f04f 0300 	mov.w	r3, #0
 8009eec:	f04f 0400 	mov.w	r4, #0
 8009ef0:	050c      	lsls	r4, r1, #20
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8009ef8:	ed97 6b06 	vldr	d6, [r7, #24]
 8009efc:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8009f00:	ee37 4b07 	vadd.f64	d4, d7, d7
 8009f04:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009f08:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8009f0c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009f10:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8009f14:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 8009f18:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8009f1c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009f20:	ee37 3b03 	vadd.f64	d3, d7, d3
 8009f24:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8009f28:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8009f2c:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 8009f30:	ee37 3b03 	vadd.f64	d3, d7, d3
 8009f34:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8009f38:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8009f3c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8009f40:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8009f44:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8009f48:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009f4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009f50:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 8009f54:	ed97 7b06 	vldr	d7, [r7, #24]
 8009f58:	ed97 6b00 	vldr	d6, [r7]
 8009f5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f64:	d50a      	bpl.n	8009f7c <_etoa+0x224>
    expval--;
 8009f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 8009f6c:	ed97 6b06 	vldr	d6, [r7, #24]
 8009f70:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8009f74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009f78:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8009f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7e:	2b63      	cmp	r3, #99	; 0x63
 8009f80:	dc05      	bgt.n	8009f8e <_etoa+0x236>
 8009f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f84:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8009f88:	db01      	blt.n	8009f8e <_etoa+0x236>
 8009f8a:	2304      	movs	r3, #4
 8009f8c:	e000      	b.n	8009f90 <_etoa+0x238>
 8009f8e:	2305      	movs	r3, #5
 8009f90:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8009f92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d031      	beq.n	800a000 <_etoa+0x2a8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8009f9c:	ed97 7b00 	vldr	d7, [r7]
 8009fa0:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800a0d8 <_etoa+0x380>
 8009fa4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fac:	db1d      	blt.n	8009fea <_etoa+0x292>
 8009fae:	ed97 7b00 	vldr	d7, [r7]
 8009fb2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800a0e0 <_etoa+0x388>
 8009fb6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fbe:	d514      	bpl.n	8009fea <_etoa+0x292>
      if ((int)prec > expval) {
 8009fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	da05      	bge.n	8009fd4 <_etoa+0x27c>
        prec = (unsigned)((int)prec - expval - 1);
 8009fc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8009fd2:	e001      	b.n	8009fd8 <_etoa+0x280>
      }
      else {
        prec = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	663b      	str	r3, [r7, #96]	; 0x60
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8009fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009fde:	66bb      	str	r3, [r7, #104]	; 0x68
      // no characters in exponent
      minwidth = 0U;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fe8:	e00a      	b.n	800a000 <_etoa+0x2a8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8009fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d007      	beq.n	800a000 <_etoa+0x2a8>
 8009ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <_etoa+0x2a8>
        --prec;
 8009ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	663b      	str	r3, [r7, #96]	; 0x60
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800a000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a002:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 800a004:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a008:	429a      	cmp	r2, r3
 800a00a:	d904      	bls.n	800a016 <_etoa+0x2be>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800a00c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	647b      	str	r3, [r7, #68]	; 0x44
 800a014:	e001      	b.n	800a01a <_etoa+0x2c2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800a016:	2300      	movs	r3, #0
 800a018:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800a01a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a01c:	f003 0302 	and.w	r3, r3, #2
 800a020:	2b00      	cmp	r3, #0
 800a022:	d004      	beq.n	800a02e <_etoa+0x2d6>
 800a024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <_etoa+0x2d6>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800a02a:	2300      	movs	r3, #0
 800a02c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 800a02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a030:	2b00      	cmp	r3, #0
 800a032:	d007      	beq.n	800a044 <_etoa+0x2ec>
    value /= conv.F;
 800a034:	ed97 6b06 	vldr	d6, [r7, #24]
 800a038:	ed97 5b00 	vldr	d5, [r7]
 800a03c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a040:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800a048:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d004      	beq.n	800a05a <_etoa+0x302>
 800a050:	ed97 7b00 	vldr	d7, [r7]
 800a054:	eeb1 7b47 	vneg.f64	d7, d7
 800a058:	e001      	b.n	800a05e <_etoa+0x306>
 800a05a:	ed97 7b00 	vldr	d7, [r7]
 800a05e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a064:	9302      	str	r3, [sp, #8]
 800a066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	eeb0 0b47 	vmov.f64	d0, d7
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	6939      	ldr	r1, [r7, #16]
 800a078:	6978      	ldr	r0, [r7, #20]
 800a07a:	f7ff fc1d 	bl	80098b8 <_ftoa>
 800a07e:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 800a080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a082:	2b00      	cmp	r3, #0
 800a084:	d06a      	beq.n	800a15c <_etoa+0x404>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800a086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d02f      	beq.n	800a0f0 <_etoa+0x398>
 800a090:	2045      	movs	r0, #69	; 0x45
 800a092:	e02e      	b.n	800a0f2 <_etoa+0x39a>
 800a094:	f3af 8000 	nop.w
 800a098:	ffffffff 	.word	0xffffffff
 800a09c:	7fefffff 	.word	0x7fefffff
 800a0a0:	ffffffff 	.word	0xffffffff
 800a0a4:	ffefffff 	.word	0xffefffff
 800a0a8:	509f79fb 	.word	0x509f79fb
 800a0ac:	3fd34413 	.word	0x3fd34413
 800a0b0:	8b60c8b3 	.word	0x8b60c8b3
 800a0b4:	3fc68a28 	.word	0x3fc68a28
 800a0b8:	636f4361 	.word	0x636f4361
 800a0bc:	3fd287a7 	.word	0x3fd287a7
 800a0c0:	0979a371 	.word	0x0979a371
 800a0c4:	400a934f 	.word	0x400a934f
 800a0c8:	bbb55516 	.word	0xbbb55516
 800a0cc:	40026bb1 	.word	0x40026bb1
 800a0d0:	fefa39ef 	.word	0xfefa39ef
 800a0d4:	3fe62e42 	.word	0x3fe62e42
 800a0d8:	eb1c432d 	.word	0xeb1c432d
 800a0dc:	3f1a36e2 	.word	0x3f1a36e2
 800a0e0:	00000000 	.word	0x00000000
 800a0e4:	412e8480 	.word	0x412e8480
 800a0e8:	000fffff 	.word	0x000fffff
 800a0ec:	3ff00000 	.word	0x3ff00000
 800a0f0:	2065      	movs	r0, #101	; 0x65
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	1c53      	adds	r3, r2, #1
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	697c      	ldr	r4, [r7, #20]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	6939      	ldr	r1, [r7, #16]
 800a0fe:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800a100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a102:	2b00      	cmp	r3, #0
 800a104:	bfb8      	it	lt
 800a106:	425b      	neglt	r3, r3
 800a108:	4618      	mov	r0, r3
 800a10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a10c:	0fdb      	lsrs	r3, r3, #31
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a112:	3a01      	subs	r2, #1
 800a114:	2105      	movs	r1, #5
 800a116:	9105      	str	r1, [sp, #20]
 800a118:	9204      	str	r2, [sp, #16]
 800a11a:	2200      	movs	r2, #0
 800a11c:	9203      	str	r2, [sp, #12]
 800a11e:	220a      	movs	r2, #10
 800a120:	9202      	str	r2, [sp, #8]
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	9000      	str	r0, [sp, #0]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	6939      	ldr	r1, [r7, #16]
 800a12c:	6978      	ldr	r0, [r7, #20]
 800a12e:	f7ff faed 	bl	800970c <_ntoa_long>
 800a132:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800a134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00e      	beq.n	800a15c <_etoa+0x404>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800a13e:	e007      	b.n	800a150 <_etoa+0x3f8>
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	1c53      	adds	r3, r2, #1
 800a144:	60fb      	str	r3, [r7, #12]
 800a146:	697c      	ldr	r4, [r7, #20]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	6939      	ldr	r1, [r7, #16]
 800a14c:	2020      	movs	r0, #32
 800a14e:	47a0      	blx	r4
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a158:	429a      	cmp	r2, r3
 800a15a:	d8f1      	bhi.n	800a140 <_etoa+0x3e8>
    }
  }
  return idx;
 800a15c:	68fb      	ldr	r3, [r7, #12]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3750      	adds	r7, #80	; 0x50
 800a162:	46bd      	mov	sp, r7
 800a164:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a168 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800a168:	b5b0      	push	{r4, r5, r7, lr}
 800a16a:	b0a0      	sub	sp, #128	; 0x80
 800a16c:	af0a      	add	r7, sp, #40	; 0x28
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
 800a174:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f040 848e 	bne.w	800aa9e <_vsnprintf+0x936>
    // use null output function
    out = _out_null;
 800a182:	4ba0      	ldr	r3, [pc, #640]	; (800a404 <_vsnprintf+0x29c>)
 800a184:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800a186:	f000 bc8a 	b.w	800aa9e <_vsnprintf+0x936>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2b25      	cmp	r3, #37	; 0x25
 800a190:	d00d      	beq.n	800a1ae <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	7818      	ldrb	r0, [r3, #0]
 800a196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a198:	1c53      	adds	r3, r2, #1
 800a19a:	647b      	str	r3, [r7, #68]	; 0x44
 800a19c:	68fc      	ldr	r4, [r7, #12]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68b9      	ldr	r1, [r7, #8]
 800a1a2:	47a0      	blx	r4
      format++;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	603b      	str	r3, [r7, #0]
      continue;
 800a1aa:	f000 bc78 	b.w	800aa9e <_vsnprintf+0x936>
    }
    else {
      // yes, evaluate it
      format++;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	3b20      	subs	r3, #32
 800a1be:	2b10      	cmp	r3, #16
 800a1c0:	d856      	bhi.n	800a270 <_vsnprintf+0x108>
 800a1c2:	a201      	add	r2, pc, #4	; (adr r2, 800a1c8 <_vsnprintf+0x60>)
 800a1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c8:	0800a249 	.word	0x0800a249
 800a1cc:	0800a271 	.word	0x0800a271
 800a1d0:	0800a271 	.word	0x0800a271
 800a1d4:	0800a25d 	.word	0x0800a25d
 800a1d8:	0800a271 	.word	0x0800a271
 800a1dc:	0800a271 	.word	0x0800a271
 800a1e0:	0800a271 	.word	0x0800a271
 800a1e4:	0800a271 	.word	0x0800a271
 800a1e8:	0800a271 	.word	0x0800a271
 800a1ec:	0800a271 	.word	0x0800a271
 800a1f0:	0800a271 	.word	0x0800a271
 800a1f4:	0800a235 	.word	0x0800a235
 800a1f8:	0800a271 	.word	0x0800a271
 800a1fc:	0800a221 	.word	0x0800a221
 800a200:	0800a271 	.word	0x0800a271
 800a204:	0800a271 	.word	0x0800a271
 800a208:	0800a20d 	.word	0x0800a20d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800a20c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a20e:	f043 0301 	orr.w	r3, r3, #1
 800a212:	657b      	str	r3, [r7, #84]	; 0x54
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	3301      	adds	r3, #1
 800a218:	603b      	str	r3, [r7, #0]
 800a21a:	2301      	movs	r3, #1
 800a21c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a21e:	e02a      	b.n	800a276 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800a220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a222:	f043 0302 	orr.w	r3, r3, #2
 800a226:	657b      	str	r3, [r7, #84]	; 0x54
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	3301      	adds	r3, #1
 800a22c:	603b      	str	r3, [r7, #0]
 800a22e:	2301      	movs	r3, #1
 800a230:	64bb      	str	r3, [r7, #72]	; 0x48
 800a232:	e020      	b.n	800a276 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800a234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a236:	f043 0304 	orr.w	r3, r3, #4
 800a23a:	657b      	str	r3, [r7, #84]	; 0x54
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	3301      	adds	r3, #1
 800a240:	603b      	str	r3, [r7, #0]
 800a242:	2301      	movs	r3, #1
 800a244:	64bb      	str	r3, [r7, #72]	; 0x48
 800a246:	e016      	b.n	800a276 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800a248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a24a:	f043 0308 	orr.w	r3, r3, #8
 800a24e:	657b      	str	r3, [r7, #84]	; 0x54
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	3301      	adds	r3, #1
 800a254:	603b      	str	r3, [r7, #0]
 800a256:	2301      	movs	r3, #1
 800a258:	64bb      	str	r3, [r7, #72]	; 0x48
 800a25a:	e00c      	b.n	800a276 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800a25c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a25e:	f043 0310 	orr.w	r3, r3, #16
 800a262:	657b      	str	r3, [r7, #84]	; 0x54
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	3301      	adds	r3, #1
 800a268:	603b      	str	r3, [r7, #0]
 800a26a:	2301      	movs	r3, #1
 800a26c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a26e:	e002      	b.n	800a276 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800a270:	2300      	movs	r3, #0
 800a272:	64bb      	str	r3, [r7, #72]	; 0x48
 800a274:	bf00      	nop
      }
    } while (n);
 800a276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d19d      	bne.n	800a1b8 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	4618      	mov	r0, r3
 800a286:	f7ff f8da 	bl	800943e <_is_digit>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d005      	beq.n	800a29c <_vsnprintf+0x134>
      width = _atoi(&format);
 800a290:	463b      	mov	r3, r7
 800a292:	4618      	mov	r0, r3
 800a294:	f7ff f8ea 	bl	800946c <_atoi>
 800a298:	6538      	str	r0, [r7, #80]	; 0x50
 800a29a:	e018      	b.n	800a2ce <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2a2:	d114      	bne.n	800a2ce <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800a2a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2a6:	1d1a      	adds	r2, r3, #4
 800a2a8:	66ba      	str	r2, [r7, #104]	; 0x68
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	da07      	bge.n	800a2c4 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800a2b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2b6:	f043 0302 	orr.w	r3, r3, #2
 800a2ba:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	425b      	negs	r3, r3
 800a2c0:	653b      	str	r3, [r7, #80]	; 0x50
 800a2c2:	e001      	b.n	800a2c8 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	2b2e      	cmp	r3, #46	; 0x2e
 800a2d8:	d124      	bne.n	800a324 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800a2da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a2e0:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff f8a6 	bl	800943e <_is_digit>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d005      	beq.n	800a304 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800a2f8:	463b      	mov	r3, r7
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7ff f8b6 	bl	800946c <_atoi>
 800a300:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a302:	e00f      	b.n	800a324 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	2b2a      	cmp	r3, #42	; 0x2a
 800a30a:	d10b      	bne.n	800a324 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800a30c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a30e:	1d1a      	adds	r2, r3, #4
 800a310:	66ba      	str	r2, [r7, #104]	; 0x68
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a31c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	3301      	adds	r3, #1
 800a322:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	3b68      	subs	r3, #104	; 0x68
 800a32a:	2b12      	cmp	r3, #18
 800a32c:	d866      	bhi.n	800a3fc <_vsnprintf+0x294>
 800a32e:	a201      	add	r2, pc, #4	; (adr r2, 800a334 <_vsnprintf+0x1cc>)
 800a330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a334:	0800a3a7 	.word	0x0800a3a7
 800a338:	0800a3fd 	.word	0x0800a3fd
 800a33c:	0800a3dd 	.word	0x0800a3dd
 800a340:	0800a3fd 	.word	0x0800a3fd
 800a344:	0800a381 	.word	0x0800a381
 800a348:	0800a3fd 	.word	0x0800a3fd
 800a34c:	0800a3fd 	.word	0x0800a3fd
 800a350:	0800a3fd 	.word	0x0800a3fd
 800a354:	0800a3fd 	.word	0x0800a3fd
 800a358:	0800a3fd 	.word	0x0800a3fd
 800a35c:	0800a3fd 	.word	0x0800a3fd
 800a360:	0800a3fd 	.word	0x0800a3fd
 800a364:	0800a3cd 	.word	0x0800a3cd
 800a368:	0800a3fd 	.word	0x0800a3fd
 800a36c:	0800a3fd 	.word	0x0800a3fd
 800a370:	0800a3fd 	.word	0x0800a3fd
 800a374:	0800a3fd 	.word	0x0800a3fd
 800a378:	0800a3fd 	.word	0x0800a3fd
 800a37c:	0800a3ed 	.word	0x0800a3ed
      case 'l' :
        flags |= FLAGS_LONG;
 800a380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a386:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	3301      	adds	r3, #1
 800a38c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	2b6c      	cmp	r3, #108	; 0x6c
 800a394:	d134      	bne.n	800a400 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800a396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a398:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a39c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	603b      	str	r3, [r7, #0]
        }
        break;
 800a3a4:	e02c      	b.n	800a400 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800a3a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ac:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b68      	cmp	r3, #104	; 0x68
 800a3ba:	d125      	bne.n	800a408 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800a3bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3c2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	603b      	str	r3, [r7, #0]
        }
        break;
 800a3ca:	e01d      	b.n	800a408 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800a3cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3d2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	603b      	str	r3, [r7, #0]
        break;
 800a3da:	e016      	b.n	800a40a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800a3dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3e2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	603b      	str	r3, [r7, #0]
        break;
 800a3ea:	e00e      	b.n	800a40a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800a3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3f2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	603b      	str	r3, [r7, #0]
        break;
 800a3fa:	e006      	b.n	800a40a <_vsnprintf+0x2a2>
      default :
        break;
 800a3fc:	bf00      	nop
 800a3fe:	e004      	b.n	800a40a <_vsnprintf+0x2a2>
        break;
 800a400:	bf00      	nop
 800a402:	e002      	b.n	800a40a <_vsnprintf+0x2a2>
 800a404:	080093e9 	.word	0x080093e9
        break;
 800a408:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	3b25      	subs	r3, #37	; 0x25
 800a410:	2b53      	cmp	r3, #83	; 0x53
 800a412:	f200 8337 	bhi.w	800aa84 <_vsnprintf+0x91c>
 800a416:	a201      	add	r2, pc, #4	; (adr r2, 800a41c <_vsnprintf+0x2b4>)
 800a418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41c:	0800aa6d 	.word	0x0800aa6d
 800a420:	0800aa85 	.word	0x0800aa85
 800a424:	0800aa85 	.word	0x0800aa85
 800a428:	0800aa85 	.word	0x0800aa85
 800a42c:	0800aa85 	.word	0x0800aa85
 800a430:	0800aa85 	.word	0x0800aa85
 800a434:	0800aa85 	.word	0x0800aa85
 800a438:	0800aa85 	.word	0x0800aa85
 800a43c:	0800aa85 	.word	0x0800aa85
 800a440:	0800aa85 	.word	0x0800aa85
 800a444:	0800aa85 	.word	0x0800aa85
 800a448:	0800aa85 	.word	0x0800aa85
 800a44c:	0800aa85 	.word	0x0800aa85
 800a450:	0800aa85 	.word	0x0800aa85
 800a454:	0800aa85 	.word	0x0800aa85
 800a458:	0800aa85 	.word	0x0800aa85
 800a45c:	0800aa85 	.word	0x0800aa85
 800a460:	0800aa85 	.word	0x0800aa85
 800a464:	0800aa85 	.word	0x0800aa85
 800a468:	0800aa85 	.word	0x0800aa85
 800a46c:	0800aa85 	.word	0x0800aa85
 800a470:	0800aa85 	.word	0x0800aa85
 800a474:	0800aa85 	.word	0x0800aa85
 800a478:	0800aa85 	.word	0x0800aa85
 800a47c:	0800aa85 	.word	0x0800aa85
 800a480:	0800aa85 	.word	0x0800aa85
 800a484:	0800aa85 	.word	0x0800aa85
 800a488:	0800aa85 	.word	0x0800aa85
 800a48c:	0800aa85 	.word	0x0800aa85
 800a490:	0800aa85 	.word	0x0800aa85
 800a494:	0800aa85 	.word	0x0800aa85
 800a498:	0800aa85 	.word	0x0800aa85
 800a49c:	0800a841 	.word	0x0800a841
 800a4a0:	0800a7f9 	.word	0x0800a7f9
 800a4a4:	0800a841 	.word	0x0800a841
 800a4a8:	0800aa85 	.word	0x0800aa85
 800a4ac:	0800aa85 	.word	0x0800aa85
 800a4b0:	0800aa85 	.word	0x0800aa85
 800a4b4:	0800aa85 	.word	0x0800aa85
 800a4b8:	0800aa85 	.word	0x0800aa85
 800a4bc:	0800aa85 	.word	0x0800aa85
 800a4c0:	0800aa85 	.word	0x0800aa85
 800a4c4:	0800aa85 	.word	0x0800aa85
 800a4c8:	0800aa85 	.word	0x0800aa85
 800a4cc:	0800aa85 	.word	0x0800aa85
 800a4d0:	0800aa85 	.word	0x0800aa85
 800a4d4:	0800aa85 	.word	0x0800aa85
 800a4d8:	0800aa85 	.word	0x0800aa85
 800a4dc:	0800aa85 	.word	0x0800aa85
 800a4e0:	0800aa85 	.word	0x0800aa85
 800a4e4:	0800aa85 	.word	0x0800aa85
 800a4e8:	0800a56d 	.word	0x0800a56d
 800a4ec:	0800aa85 	.word	0x0800aa85
 800a4f0:	0800aa85 	.word	0x0800aa85
 800a4f4:	0800aa85 	.word	0x0800aa85
 800a4f8:	0800aa85 	.word	0x0800aa85
 800a4fc:	0800aa85 	.word	0x0800aa85
 800a500:	0800aa85 	.word	0x0800aa85
 800a504:	0800aa85 	.word	0x0800aa85
 800a508:	0800aa85 	.word	0x0800aa85
 800a50c:	0800aa85 	.word	0x0800aa85
 800a510:	0800a56d 	.word	0x0800a56d
 800a514:	0800a8a9 	.word	0x0800a8a9
 800a518:	0800a56d 	.word	0x0800a56d
 800a51c:	0800a841 	.word	0x0800a841
 800a520:	0800a7f9 	.word	0x0800a7f9
 800a524:	0800a841 	.word	0x0800a841
 800a528:	0800aa85 	.word	0x0800aa85
 800a52c:	0800a56d 	.word	0x0800a56d
 800a530:	0800aa85 	.word	0x0800aa85
 800a534:	0800aa85 	.word	0x0800aa85
 800a538:	0800aa85 	.word	0x0800aa85
 800a53c:	0800aa85 	.word	0x0800aa85
 800a540:	0800aa85 	.word	0x0800aa85
 800a544:	0800a56d 	.word	0x0800a56d
 800a548:	0800a9e1 	.word	0x0800a9e1
 800a54c:	0800aa85 	.word	0x0800aa85
 800a550:	0800aa85 	.word	0x0800aa85
 800a554:	0800a91d 	.word	0x0800a91d
 800a558:	0800aa85 	.word	0x0800aa85
 800a55c:	0800a56d 	.word	0x0800a56d
 800a560:	0800aa85 	.word	0x0800aa85
 800a564:	0800aa85 	.word	0x0800aa85
 800a568:	0800a56d 	.word	0x0800a56d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	2b78      	cmp	r3, #120	; 0x78
 800a572:	d003      	beq.n	800a57c <_vsnprintf+0x414>
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b58      	cmp	r3, #88	; 0x58
 800a57a:	d102      	bne.n	800a582 <_vsnprintf+0x41a>
          base = 16U;
 800a57c:	2310      	movs	r3, #16
 800a57e:	643b      	str	r3, [r7, #64]	; 0x40
 800a580:	e013      	b.n	800a5aa <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b6f      	cmp	r3, #111	; 0x6f
 800a588:	d102      	bne.n	800a590 <_vsnprintf+0x428>
          base =  8U;
 800a58a:	2308      	movs	r3, #8
 800a58c:	643b      	str	r3, [r7, #64]	; 0x40
 800a58e:	e00c      	b.n	800a5aa <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	2b62      	cmp	r3, #98	; 0x62
 800a596:	d102      	bne.n	800a59e <_vsnprintf+0x436>
          base =  2U;
 800a598:	2302      	movs	r3, #2
 800a59a:	643b      	str	r3, [r7, #64]	; 0x40
 800a59c:	e005      	b.n	800a5aa <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800a59e:	230a      	movs	r3, #10
 800a5a0:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800a5a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5a4:	f023 0310 	bic.w	r3, r3, #16
 800a5a8:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	2b58      	cmp	r3, #88	; 0x58
 800a5b0:	d103      	bne.n	800a5ba <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800a5b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5b4:	f043 0320 	orr.w	r3, r3, #32
 800a5b8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	2b69      	cmp	r3, #105	; 0x69
 800a5c0:	d007      	beq.n	800a5d2 <_vsnprintf+0x46a>
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	2b64      	cmp	r3, #100	; 0x64
 800a5c8:	d003      	beq.n	800a5d2 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800a5ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5cc:	f023 030c 	bic.w	r3, r3, #12
 800a5d0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800a5d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d003      	beq.n	800a5e4 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800a5dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5de:	f023 0301 	bic.w	r3, r3, #1
 800a5e2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	2b69      	cmp	r3, #105	; 0x69
 800a5ea:	d004      	beq.n	800a5f6 <_vsnprintf+0x48e>
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b64      	cmp	r3, #100	; 0x64
 800a5f2:	f040 808d 	bne.w	800a710 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800a5f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d02e      	beq.n	800a65e <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800a600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a602:	3307      	adds	r3, #7
 800a604:	f023 0307 	bic.w	r3, r3, #7
 800a608:	f103 0208 	add.w	r2, r3, #8
 800a60c:	66ba      	str	r2, [r7, #104]	; 0x68
 800a60e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a612:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800a616:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f174 0200 	sbcs.w	r2, r4, #0
 800a620:	da02      	bge.n	800a628 <_vsnprintf+0x4c0>
 800a622:	425b      	negs	r3, r3
 800a624:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800a628:	4619      	mov	r1, r3
 800a62a:	4622      	mov	r2, r4
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	0fdb      	lsrs	r3, r3, #31
 800a630:	b2d8      	uxtb	r0, r3
 800a632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a634:	f04f 0400 	mov.w	r4, #0
 800a638:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800a63a:	9508      	str	r5, [sp, #32]
 800a63c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800a63e:	9507      	str	r5, [sp, #28]
 800a640:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800a642:	9506      	str	r5, [sp, #24]
 800a644:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a648:	9002      	str	r0, [sp, #8]
 800a64a:	e9cd 1200 	strd	r1, r2, [sp]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a652:	68b9      	ldr	r1, [r7, #8]
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f7ff f8c0 	bl	80097da <_ntoa_long_long>
 800a65a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800a65c:	e0c8      	b.n	800a7f0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800a65e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a664:	2b00      	cmp	r3, #0
 800a666:	d01e      	beq.n	800a6a6 <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 800a668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a66a:	1d1a      	adds	r2, r3, #4
 800a66c:	66ba      	str	r2, [r7, #104]	; 0x68
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	2b00      	cmp	r3, #0
 800a676:	bfb8      	it	lt
 800a678:	425b      	neglt	r3, r3
 800a67a:	4619      	mov	r1, r3
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	0fdb      	lsrs	r3, r3, #31
 800a680:	b2db      	uxtb	r3, r3
 800a682:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a684:	9205      	str	r2, [sp, #20]
 800a686:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a688:	9204      	str	r2, [sp, #16]
 800a68a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a68c:	9203      	str	r2, [sp, #12]
 800a68e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a690:	9202      	str	r2, [sp, #8]
 800a692:	9301      	str	r3, [sp, #4]
 800a694:	9100      	str	r1, [sp, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a69a:	68b9      	ldr	r1, [r7, #8]
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7ff f835 	bl	800970c <_ntoa_long>
 800a6a2:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800a6a4:	e0a4      	b.n	800a7f0 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800a6a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d005      	beq.n	800a6bc <_vsnprintf+0x554>
 800a6b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6b2:	1d1a      	adds	r2, r3, #4
 800a6b4:	66ba      	str	r2, [r7, #104]	; 0x68
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	e00e      	b.n	800a6da <_vsnprintf+0x572>
 800a6bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d005      	beq.n	800a6d2 <_vsnprintf+0x56a>
 800a6c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6c8:	1d1a      	adds	r2, r3, #4
 800a6ca:	66ba      	str	r2, [r7, #104]	; 0x68
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	b21b      	sxth	r3, r3
 800a6d0:	e003      	b.n	800a6da <_vsnprintf+0x572>
 800a6d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6d4:	1d1a      	adds	r2, r3, #4
 800a6d6:	66ba      	str	r2, [r7, #104]	; 0x68
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800a6dc:	6a3b      	ldr	r3, [r7, #32]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	bfb8      	it	lt
 800a6e2:	425b      	neglt	r3, r3
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	0fdb      	lsrs	r3, r3, #31
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6ee:	9205      	str	r2, [sp, #20]
 800a6f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6f2:	9204      	str	r2, [sp, #16]
 800a6f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6f6:	9203      	str	r2, [sp, #12]
 800a6f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6fa:	9202      	str	r2, [sp, #8]
 800a6fc:	9301      	str	r3, [sp, #4]
 800a6fe:	9100      	str	r1, [sp, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a704:	68b9      	ldr	r1, [r7, #8]
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f7ff f800 	bl	800970c <_ntoa_long>
 800a70c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800a70e:	e06f      	b.n	800a7f0 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800a710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a716:	2b00      	cmp	r3, #0
 800a718:	d020      	beq.n	800a75c <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800a71a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a71c:	3307      	adds	r3, #7
 800a71e:	f023 0307 	bic.w	r3, r3, #7
 800a722:	f103 0208 	add.w	r2, r3, #8
 800a726:	66ba      	str	r2, [r7, #104]	; 0x68
 800a728:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a72c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a72e:	4611      	mov	r1, r2
 800a730:	f04f 0200 	mov.w	r2, #0
 800a734:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a736:	9008      	str	r0, [sp, #32]
 800a738:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a73a:	9007      	str	r0, [sp, #28]
 800a73c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a73e:	9006      	str	r0, [sp, #24]
 800a740:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a744:	2200      	movs	r2, #0
 800a746:	9202      	str	r2, [sp, #8]
 800a748:	e9cd 3400 	strd	r3, r4, [sp]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a750:	68b9      	ldr	r1, [r7, #8]
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7ff f841 	bl	80097da <_ntoa_long_long>
 800a758:	6478      	str	r0, [r7, #68]	; 0x44
 800a75a:	e049      	b.n	800a7f0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800a75c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a75e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a762:	2b00      	cmp	r3, #0
 800a764:	d016      	beq.n	800a794 <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800a766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a768:	1d1a      	adds	r2, r3, #4
 800a76a:	66ba      	str	r2, [r7, #104]	; 0x68
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a770:	9205      	str	r2, [sp, #20]
 800a772:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a774:	9204      	str	r2, [sp, #16]
 800a776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a778:	9203      	str	r2, [sp, #12]
 800a77a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a77c:	9202      	str	r2, [sp, #8]
 800a77e:	2200      	movs	r2, #0
 800a780:	9201      	str	r2, [sp, #4]
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a788:	68b9      	ldr	r1, [r7, #8]
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f7fe ffbe 	bl	800970c <_ntoa_long>
 800a790:	6478      	str	r0, [r7, #68]	; 0x44
 800a792:	e02d      	b.n	800a7f0 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800a794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d005      	beq.n	800a7aa <_vsnprintf+0x642>
 800a79e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7a0:	1d1a      	adds	r2, r3, #4
 800a7a2:	66ba      	str	r2, [r7, #104]	; 0x68
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	e00e      	b.n	800a7c8 <_vsnprintf+0x660>
 800a7aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d005      	beq.n	800a7c0 <_vsnprintf+0x658>
 800a7b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7b6:	1d1a      	adds	r2, r3, #4
 800a7b8:	66ba      	str	r2, [r7, #104]	; 0x68
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	e003      	b.n	800a7c8 <_vsnprintf+0x660>
 800a7c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7c2:	1d1a      	adds	r2, r3, #4
 800a7c4:	66ba      	str	r2, [r7, #104]	; 0x68
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800a7ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7cc:	9305      	str	r3, [sp, #20]
 800a7ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7d0:	9304      	str	r3, [sp, #16]
 800a7d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7d4:	9303      	str	r3, [sp, #12]
 800a7d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7d8:	9302      	str	r3, [sp, #8]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f7fe ff8f 	bl	800970c <_ntoa_long>
 800a7ee:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	603b      	str	r3, [r7, #0]
        break;
 800a7f6:	e152      	b.n	800aa9e <_vsnprintf+0x936>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b46      	cmp	r3, #70	; 0x46
 800a7fe:	d103      	bne.n	800a808 <_vsnprintf+0x6a0>
 800a800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a802:	f043 0320 	orr.w	r3, r3, #32
 800a806:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800a808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a80a:	3307      	adds	r3, #7
 800a80c:	f023 0307 	bic.w	r3, r3, #7
 800a810:	f103 0208 	add.w	r2, r3, #8
 800a814:	66ba      	str	r2, [r7, #104]	; 0x68
 800a816:	ed93 7b00 	vldr	d7, [r3]
 800a81a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a81c:	9302      	str	r3, [sp, #8]
 800a81e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a820:	9301      	str	r3, [sp, #4]
 800a822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	eeb0 0b47 	vmov.f64	d0, d7
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a82e:	68b9      	ldr	r1, [r7, #8]
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7ff f841 	bl	80098b8 <_ftoa>
 800a836:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	3301      	adds	r3, #1
 800a83c:	603b      	str	r3, [r7, #0]
        break;
 800a83e:	e12e      	b.n	800aa9e <_vsnprintf+0x936>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	2b67      	cmp	r3, #103	; 0x67
 800a846:	d003      	beq.n	800a850 <_vsnprintf+0x6e8>
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b47      	cmp	r3, #71	; 0x47
 800a84e:	d103      	bne.n	800a858 <_vsnprintf+0x6f0>
 800a850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a852:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a856:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	2b45      	cmp	r3, #69	; 0x45
 800a85e:	d003      	beq.n	800a868 <_vsnprintf+0x700>
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	2b47      	cmp	r3, #71	; 0x47
 800a866:	d103      	bne.n	800a870 <_vsnprintf+0x708>
 800a868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a86a:	f043 0320 	orr.w	r3, r3, #32
 800a86e:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800a870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a872:	3307      	adds	r3, #7
 800a874:	f023 0307 	bic.w	r3, r3, #7
 800a878:	f103 0208 	add.w	r2, r3, #8
 800a87c:	66ba      	str	r2, [r7, #104]	; 0x68
 800a87e:	ed93 7b00 	vldr	d7, [r3]
 800a882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a884:	9302      	str	r3, [sp, #8]
 800a886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a888:	9301      	str	r3, [sp, #4]
 800a88a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	eeb0 0b47 	vmov.f64	d0, d7
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a896:	68b9      	ldr	r1, [r7, #8]
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f7ff fa5d 	bl	8009d58 <_etoa>
 800a89e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	603b      	str	r3, [r7, #0]
        break;
 800a8a6:	e0fa      	b.n	800aa9e <_vsnprintf+0x936>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800a8ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8ae:	f003 0302 	and.w	r3, r3, #2
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10e      	bne.n	800a8d4 <_vsnprintf+0x76c>
          while (l++ < width) {
 800a8b6:	e007      	b.n	800a8c8 <_vsnprintf+0x760>
            out(' ', buffer, idx++, maxlen);
 800a8b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8ba:	1c53      	adds	r3, r2, #1
 800a8bc:	647b      	str	r3, [r7, #68]	; 0x44
 800a8be:	68fc      	ldr	r4, [r7, #12]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	68b9      	ldr	r1, [r7, #8]
 800a8c4:	2020      	movs	r0, #32
 800a8c6:	47a0      	blx	r4
          while (l++ < width) {
 800a8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ca:	1c5a      	adds	r2, r3, #1
 800a8cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a8ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d8f1      	bhi.n	800a8b8 <_vsnprintf+0x750>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800a8d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8d6:	1d1a      	adds	r2, r3, #4
 800a8d8:	66ba      	str	r2, [r7, #104]	; 0x68
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	b2d8      	uxtb	r0, r3
 800a8de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8e0:	1c53      	adds	r3, r2, #1
 800a8e2:	647b      	str	r3, [r7, #68]	; 0x44
 800a8e4:	68fc      	ldr	r4, [r7, #12]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68b9      	ldr	r1, [r7, #8]
 800a8ea:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800a8ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8ee:	f003 0302 	and.w	r3, r3, #2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00e      	beq.n	800a914 <_vsnprintf+0x7ac>
          while (l++ < width) {
 800a8f6:	e007      	b.n	800a908 <_vsnprintf+0x7a0>
            out(' ', buffer, idx++, maxlen);
 800a8f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8fa:	1c53      	adds	r3, r2, #1
 800a8fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a8fe:	68fc      	ldr	r4, [r7, #12]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	68b9      	ldr	r1, [r7, #8]
 800a904:	2020      	movs	r0, #32
 800a906:	47a0      	blx	r4
          while (l++ < width) {
 800a908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a90a:	1c5a      	adds	r2, r3, #1
 800a90c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a90e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a910:	429a      	cmp	r2, r3
 800a912:	d8f1      	bhi.n	800a8f8 <_vsnprintf+0x790>
          }
        }
        format++;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	3301      	adds	r3, #1
 800a918:	603b      	str	r3, [r7, #0]
        break;
 800a91a:	e0c0      	b.n	800aa9e <_vsnprintf+0x936>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800a91c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a91e:	1d1a      	adds	r2, r3, #4
 800a920:	66ba      	str	r2, [r7, #104]	; 0x68
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800a926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <_vsnprintf+0x7c8>
 800a92c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a92e:	e001      	b.n	800a934 <_vsnprintf+0x7cc>
 800a930:	f04f 33ff 	mov.w	r3, #4294967295
 800a934:	4619      	mov	r1, r3
 800a936:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a938:	f7fe fd64 	bl	8009404 <_strnlen_s>
 800a93c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800a93e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a944:	2b00      	cmp	r3, #0
 800a946:	d005      	beq.n	800a954 <_vsnprintf+0x7ec>
          l = (l < precision ? l : precision);
 800a948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a94c:	4293      	cmp	r3, r2
 800a94e:	bf28      	it	cs
 800a950:	4613      	movcs	r3, r2
 800a952:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800a954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a956:	f003 0302 	and.w	r3, r3, #2
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d11a      	bne.n	800a994 <_vsnprintf+0x82c>
          while (l++ < width) {
 800a95e:	e007      	b.n	800a970 <_vsnprintf+0x808>
            out(' ', buffer, idx++, maxlen);
 800a960:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a962:	1c53      	adds	r3, r2, #1
 800a964:	647b      	str	r3, [r7, #68]	; 0x44
 800a966:	68fc      	ldr	r4, [r7, #12]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68b9      	ldr	r1, [r7, #8]
 800a96c:	2020      	movs	r0, #32
 800a96e:	47a0      	blx	r4
          while (l++ < width) {
 800a970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a972:	1c5a      	adds	r2, r3, #1
 800a974:	637a      	str	r2, [r7, #52]	; 0x34
 800a976:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a978:	429a      	cmp	r2, r3
 800a97a:	d8f1      	bhi.n	800a960 <_vsnprintf+0x7f8>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800a97c:	e00a      	b.n	800a994 <_vsnprintf+0x82c>
          out(*(p++), buffer, idx++, maxlen);
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	1c5a      	adds	r2, r3, #1
 800a982:	63ba      	str	r2, [r7, #56]	; 0x38
 800a984:	7818      	ldrb	r0, [r3, #0]
 800a986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a988:	1c53      	adds	r3, r2, #1
 800a98a:	647b      	str	r3, [r7, #68]	; 0x44
 800a98c:	68fc      	ldr	r4, [r7, #12]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68b9      	ldr	r1, [r7, #8]
 800a992:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800a994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d009      	beq.n	800a9b0 <_vsnprintf+0x848>
 800a99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a99e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d0eb      	beq.n	800a97e <_vsnprintf+0x816>
 800a9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9a8:	1e5a      	subs	r2, r3, #1
 800a9aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1e6      	bne.n	800a97e <_vsnprintf+0x816>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800a9b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9b2:	f003 0302 	and.w	r3, r3, #2
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00e      	beq.n	800a9d8 <_vsnprintf+0x870>
          while (l++ < width) {
 800a9ba:	e007      	b.n	800a9cc <_vsnprintf+0x864>
            out(' ', buffer, idx++, maxlen);
 800a9bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9be:	1c53      	adds	r3, r2, #1
 800a9c0:	647b      	str	r3, [r7, #68]	; 0x44
 800a9c2:	68fc      	ldr	r4, [r7, #12]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68b9      	ldr	r1, [r7, #8]
 800a9c8:	2020      	movs	r0, #32
 800a9ca:	47a0      	blx	r4
          while (l++ < width) {
 800a9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	637a      	str	r2, [r7, #52]	; 0x34
 800a9d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d8f1      	bhi.n	800a9bc <_vsnprintf+0x854>
          }
        }
        format++;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	603b      	str	r3, [r7, #0]
        break;
 800a9de:	e05e      	b.n	800aa9e <_vsnprintf+0x936>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800a9e0:	2308      	movs	r3, #8
 800a9e2:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800a9e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9e6:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800a9ea:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800a9f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d01d      	beq.n	800aa36 <_vsnprintf+0x8ce>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800a9fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9fc:	1d1a      	adds	r2, r3, #4
 800a9fe:	66ba      	str	r2, [r7, #104]	; 0x68
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f04f 0400 	mov.w	r4, #0
 800aa06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa08:	9208      	str	r2, [sp, #32]
 800aa0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa0c:	9207      	str	r2, [sp, #28]
 800aa0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa10:	9206      	str	r2, [sp, #24]
 800aa12:	f04f 0110 	mov.w	r1, #16
 800aa16:	f04f 0200 	mov.w	r2, #0
 800aa1a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	9202      	str	r2, [sp, #8]
 800aa22:	e9cd 3400 	strd	r3, r4, [sp]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa2a:	68b9      	ldr	r1, [r7, #8]
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f7fe fed4 	bl	80097da <_ntoa_long_long>
 800aa32:	6478      	str	r0, [r7, #68]	; 0x44
 800aa34:	e016      	b.n	800aa64 <_vsnprintf+0x8fc>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800aa36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa38:	1d1a      	adds	r2, r3, #4
 800aa3a:	66ba      	str	r2, [r7, #104]	; 0x68
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa42:	9305      	str	r3, [sp, #20]
 800aa44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa46:	9304      	str	r3, [sp, #16]
 800aa48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa4a:	9303      	str	r3, [sp, #12]
 800aa4c:	2310      	movs	r3, #16
 800aa4e:	9302      	str	r3, [sp, #8]
 800aa50:	2300      	movs	r3, #0
 800aa52:	9301      	str	r3, [sp, #4]
 800aa54:	9200      	str	r2, [sp, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa5a:	68b9      	ldr	r1, [r7, #8]
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f7fe fe55 	bl	800970c <_ntoa_long>
 800aa62:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	3301      	adds	r3, #1
 800aa68:	603b      	str	r3, [r7, #0]
        break;
 800aa6a:	e018      	b.n	800aa9e <_vsnprintf+0x936>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800aa6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa6e:	1c53      	adds	r3, r2, #1
 800aa70:	647b      	str	r3, [r7, #68]	; 0x44
 800aa72:	68fc      	ldr	r4, [r7, #12]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	2025      	movs	r0, #37	; 0x25
 800aa7a:	47a0      	blx	r4
        format++;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	603b      	str	r3, [r7, #0]
        break;
 800aa82:	e00c      	b.n	800aa9e <_vsnprintf+0x936>

      default :
        out(*format, buffer, idx++, maxlen);
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	7818      	ldrb	r0, [r3, #0]
 800aa88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa8a:	1c53      	adds	r3, r2, #1
 800aa8c:	647b      	str	r3, [r7, #68]	; 0x44
 800aa8e:	68fc      	ldr	r4, [r7, #12]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68b9      	ldr	r1, [r7, #8]
 800aa94:	47a0      	blx	r4
        format++;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	603b      	str	r3, [r7, #0]
        break;
 800aa9c:	bf00      	nop
  while (*format)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f47f ab71 	bne.w	800a18a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800aaa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d302      	bcc.n	800aab6 <_vsnprintf+0x94e>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	1e5a      	subs	r2, r3, #1
 800aab4:	e000      	b.n	800aab8 <_vsnprintf+0x950>
 800aab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aab8:	68fc      	ldr	r4, [r7, #12]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68b9      	ldr	r1, [r7, #8]
 800aabe:	2000      	movs	r0, #0
 800aac0:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800aac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3758      	adds	r7, #88	; 0x58
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bdb0      	pop	{r4, r5, r7, pc}

0800aacc <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 800aacc:	b40c      	push	{r2, r3}
 800aace:	b580      	push	{r7, lr}
 800aad0:	b086      	sub	sp, #24
 800aad2:	af02      	add	r7, sp, #8
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 800aad8:	f107 031c 	add.w	r3, r7, #28
 800aadc:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	6879      	ldr	r1, [r7, #4]
 800aae8:	4805      	ldr	r0, [pc, #20]	; (800ab00 <snprintf_+0x34>)
 800aaea:	f7ff fb3d 	bl	800a168 <_vsnprintf>
 800aaee:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aafc:	b002      	add	sp, #8
 800aafe:	4770      	bx	lr
 800ab00:	080093bb 	.word	0x080093bb

0800ab04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800ab0a:	4b11      	ldr	r3, [pc, #68]	; (800ab50 <HAL_MspInit+0x4c>)
 800ab0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0e:	4a10      	ldr	r2, [pc, #64]	; (800ab50 <HAL_MspInit+0x4c>)
 800ab10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab14:	6413      	str	r3, [r2, #64]	; 0x40
 800ab16:	4b0e      	ldr	r3, [pc, #56]	; (800ab50 <HAL_MspInit+0x4c>)
 800ab18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab1e:	607b      	str	r3, [r7, #4]
 800ab20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ab22:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <HAL_MspInit+0x4c>)
 800ab24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab26:	4a0a      	ldr	r2, [pc, #40]	; (800ab50 <HAL_MspInit+0x4c>)
 800ab28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab2c:	6453      	str	r3, [r2, #68]	; 0x44
 800ab2e:	4b08      	ldr	r3, [pc, #32]	; (800ab50 <HAL_MspInit+0x4c>)
 800ab30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab36:	603b      	str	r3, [r7, #0]
 800ab38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	210f      	movs	r1, #15
 800ab3e:	f06f 0001 	mvn.w	r0, #1
 800ab42:	f000 fbce 	bl	800b2e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ab46:	bf00      	nop
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	40023800 	.word	0x40023800

0800ab54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b08c      	sub	sp, #48	; 0x30
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab5c:	f107 031c 	add.w	r3, r7, #28
 800ab60:	2200      	movs	r2, #0
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	605a      	str	r2, [r3, #4]
 800ab66:	609a      	str	r2, [r3, #8]
 800ab68:	60da      	str	r2, [r3, #12]
 800ab6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a4d      	ldr	r2, [pc, #308]	; (800aca8 <HAL_I2C_MspInit+0x154>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d166      	bne.n	800ac44 <HAL_I2C_MspInit+0xf0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab76:	4b4d      	ldr	r3, [pc, #308]	; (800acac <HAL_I2C_MspInit+0x158>)
 800ab78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7a:	4a4c      	ldr	r2, [pc, #304]	; (800acac <HAL_I2C_MspInit+0x158>)
 800ab7c:	f043 0302 	orr.w	r3, r3, #2
 800ab80:	6313      	str	r3, [r2, #48]	; 0x30
 800ab82:	4b4a      	ldr	r3, [pc, #296]	; (800acac <HAL_I2C_MspInit+0x158>)
 800ab84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	61bb      	str	r3, [r7, #24]
 800ab8c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ab8e:	23c0      	movs	r3, #192	; 0xc0
 800ab90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ab92:	2312      	movs	r3, #18
 800ab94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ab96:	2301      	movs	r3, #1
 800ab98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ab9e:	2304      	movs	r3, #4
 800aba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aba2:	f107 031c 	add.w	r3, r7, #28
 800aba6:	4619      	mov	r1, r3
 800aba8:	4841      	ldr	r0, [pc, #260]	; (800acb0 <HAL_I2C_MspInit+0x15c>)
 800abaa:	f000 ff69 	bl	800ba80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800abae:	4b3f      	ldr	r3, [pc, #252]	; (800acac <HAL_I2C_MspInit+0x158>)
 800abb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb2:	4a3e      	ldr	r2, [pc, #248]	; (800acac <HAL_I2C_MspInit+0x158>)
 800abb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800abb8:	6413      	str	r3, [r2, #64]	; 0x40
 800abba:	4b3c      	ldr	r3, [pc, #240]	; (800acac <HAL_I2C_MspInit+0x158>)
 800abbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abc2:	617b      	str	r3, [r7, #20]
 800abc4:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800abc6:	4b3b      	ldr	r3, [pc, #236]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800abc8:	4a3b      	ldr	r2, [pc, #236]	; (800acb8 <HAL_I2C_MspInit+0x164>)
 800abca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800abcc:	4b39      	ldr	r3, [pc, #228]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800abce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800abd2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800abd4:	4b37      	ldr	r3, [pc, #220]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800abd6:	2240      	movs	r2, #64	; 0x40
 800abd8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800abda:	4b36      	ldr	r3, [pc, #216]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800abdc:	2200      	movs	r2, #0
 800abde:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800abe0:	4b34      	ldr	r3, [pc, #208]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800abe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800abe6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800abe8:	4b32      	ldr	r3, [pc, #200]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800abea:	2200      	movs	r2, #0
 800abec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800abee:	4b31      	ldr	r3, [pc, #196]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800abf4:	4b2f      	ldr	r3, [pc, #188]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800abfa:	4b2e      	ldr	r3, [pc, #184]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ac00:	4b2c      	ldr	r3, [pc, #176]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800ac06:	482b      	ldr	r0, [pc, #172]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800ac08:	f000 fba2 	bl	800b350 <HAL_DMA_Init>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <HAL_I2C_MspInit+0xc2>
    {
      Error_Handler();
 800ac12:	f7fe fbcb 	bl	80093ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a26      	ldr	r2, [pc, #152]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800ac1a:	639a      	str	r2, [r3, #56]	; 0x38
 800ac1c:	4a25      	ldr	r2, [pc, #148]	; (800acb4 <HAL_I2C_MspInit+0x160>)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800ac22:	2200      	movs	r2, #0
 800ac24:	2105      	movs	r1, #5
 800ac26:	201f      	movs	r0, #31
 800ac28:	f000 fb5b 	bl	800b2e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800ac2c:	201f      	movs	r0, #31
 800ac2e:	f000 fb74 	bl	800b31a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800ac32:	2200      	movs	r2, #0
 800ac34:	2105      	movs	r1, #5
 800ac36:	2020      	movs	r0, #32
 800ac38:	f000 fb53 	bl	800b2e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800ac3c:	2020      	movs	r0, #32
 800ac3e:	f000 fb6c 	bl	800b31a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800ac42:	e02d      	b.n	800aca0 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C2)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a1c      	ldr	r2, [pc, #112]	; (800acbc <HAL_I2C_MspInit+0x168>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d128      	bne.n	800aca0 <HAL_I2C_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac4e:	4b17      	ldr	r3, [pc, #92]	; (800acac <HAL_I2C_MspInit+0x158>)
 800ac50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac52:	4a16      	ldr	r2, [pc, #88]	; (800acac <HAL_I2C_MspInit+0x158>)
 800ac54:	f043 0302 	orr.w	r3, r3, #2
 800ac58:	6313      	str	r3, [r2, #48]	; 0x30
 800ac5a:	4b14      	ldr	r3, [pc, #80]	; (800acac <HAL_I2C_MspInit+0x158>)
 800ac5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5e:	f003 0302 	and.w	r3, r3, #2
 800ac62:	613b      	str	r3, [r7, #16]
 800ac64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ac66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ac6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ac6c:	2312      	movs	r3, #18
 800ac6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ac70:	2301      	movs	r3, #1
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac74:	2303      	movs	r3, #3
 800ac76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800ac78:	2304      	movs	r3, #4
 800ac7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac7c:	f107 031c 	add.w	r3, r7, #28
 800ac80:	4619      	mov	r1, r3
 800ac82:	480b      	ldr	r0, [pc, #44]	; (800acb0 <HAL_I2C_MspInit+0x15c>)
 800ac84:	f000 fefc 	bl	800ba80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800ac88:	4b08      	ldr	r3, [pc, #32]	; (800acac <HAL_I2C_MspInit+0x158>)
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8c:	4a07      	ldr	r2, [pc, #28]	; (800acac <HAL_I2C_MspInit+0x158>)
 800ac8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ac92:	6413      	str	r3, [r2, #64]	; 0x40
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <HAL_I2C_MspInit+0x158>)
 800ac96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac9c:	60fb      	str	r3, [r7, #12]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
}
 800aca0:	bf00      	nop
 800aca2:	3730      	adds	r7, #48	; 0x30
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	40005400 	.word	0x40005400
 800acac:	40023800 	.word	0x40023800
 800acb0:	40020400 	.word	0x40020400
 800acb4:	20008210 	.word	0x20008210
 800acb8:	400260a0 	.word	0x400260a0
 800acbc:	40005800 	.word	0x40005800

0800acc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08a      	sub	sp, #40	; 0x28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acc8:	f107 0314 	add.w	r3, r7, #20
 800accc:	2200      	movs	r2, #0
 800acce:	601a      	str	r2, [r3, #0]
 800acd0:	605a      	str	r2, [r3, #4]
 800acd2:	609a      	str	r2, [r3, #8]
 800acd4:	60da      	str	r2, [r3, #12]
 800acd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a45      	ldr	r2, [pc, #276]	; (800adf4 <HAL_SPI_MspInit+0x134>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	f040 8084 	bne.w	800adec <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ace4:	4b44      	ldr	r3, [pc, #272]	; (800adf8 <HAL_SPI_MspInit+0x138>)
 800ace6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ace8:	4a43      	ldr	r2, [pc, #268]	; (800adf8 <HAL_SPI_MspInit+0x138>)
 800acea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800acee:	6453      	str	r3, [r2, #68]	; 0x44
 800acf0:	4b41      	ldr	r3, [pc, #260]	; (800adf8 <HAL_SPI_MspInit+0x138>)
 800acf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acf8:	613b      	str	r3, [r7, #16]
 800acfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acfc:	4b3e      	ldr	r3, [pc, #248]	; (800adf8 <HAL_SPI_MspInit+0x138>)
 800acfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad00:	4a3d      	ldr	r2, [pc, #244]	; (800adf8 <HAL_SPI_MspInit+0x138>)
 800ad02:	f043 0301 	orr.w	r3, r3, #1
 800ad06:	6313      	str	r3, [r2, #48]	; 0x30
 800ad08:	4b3b      	ldr	r3, [pc, #236]	; (800adf8 <HAL_SPI_MspInit+0x138>)
 800ad0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0c:	f003 0301 	and.w	r3, r3, #1
 800ad10:	60fb      	str	r3, [r7, #12]
 800ad12:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800ad14:	23e0      	movs	r3, #224	; 0xe0
 800ad16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad18:	2302      	movs	r3, #2
 800ad1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad20:	2303      	movs	r3, #3
 800ad22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ad24:	2305      	movs	r3, #5
 800ad26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad28:	f107 0314 	add.w	r3, r7, #20
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4833      	ldr	r0, [pc, #204]	; (800adfc <HAL_SPI_MspInit+0x13c>)
 800ad30:	f000 fea6 	bl	800ba80 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800ad34:	4b32      	ldr	r3, [pc, #200]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad36:	4a33      	ldr	r2, [pc, #204]	; (800ae04 <HAL_SPI_MspInit+0x144>)
 800ad38:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800ad3a:	4b31      	ldr	r3, [pc, #196]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad3c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800ad40:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ad42:	4b2f      	ldr	r3, [pc, #188]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad48:	4b2d      	ldr	r3, [pc, #180]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ad4e:	4b2c      	ldr	r3, [pc, #176]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad54:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad56:	4b2a      	ldr	r3, [pc, #168]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad5c:	4b28      	ldr	r3, [pc, #160]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800ad62:	4b27      	ldr	r3, [pc, #156]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ad68:	4b25      	ldr	r3, [pc, #148]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ad6e:	4b24      	ldr	r3, [pc, #144]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800ad74:	4822      	ldr	r0, [pc, #136]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad76:	f000 faeb 	bl	800b350 <HAL_DMA_Init>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 800ad80:	f7fe fb14 	bl	80093ac <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a1e      	ldr	r2, [pc, #120]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad88:	659a      	str	r2, [r3, #88]	; 0x58
 800ad8a:	4a1d      	ldr	r2, [pc, #116]	; (800ae00 <HAL_SPI_MspInit+0x140>)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800ad90:	4b1d      	ldr	r3, [pc, #116]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800ad92:	4a1e      	ldr	r2, [pc, #120]	; (800ae0c <HAL_SPI_MspInit+0x14c>)
 800ad94:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800ad96:	4b1c      	ldr	r3, [pc, #112]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800ad98:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800ad9c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad9e:	4b1a      	ldr	r3, [pc, #104]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800ada0:	2240      	movs	r2, #64	; 0x40
 800ada2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ada4:	4b18      	ldr	r3, [pc, #96]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800adaa:	4b17      	ldr	r3, [pc, #92]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800adac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800adb0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800adb2:	4b15      	ldr	r3, [pc, #84]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800adb4:	2200      	movs	r2, #0
 800adb6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800adb8:	4b13      	ldr	r3, [pc, #76]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800adba:	2200      	movs	r2, #0
 800adbc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800adbe:	4b12      	ldr	r3, [pc, #72]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800adc4:	4b10      	ldr	r3, [pc, #64]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800adca:	4b0f      	ldr	r3, [pc, #60]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800adcc:	2200      	movs	r2, #0
 800adce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800add0:	480d      	ldr	r0, [pc, #52]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800add2:	f000 fabd 	bl	800b350 <HAL_DMA_Init>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d001      	beq.n	800ade0 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 800addc:	f7fe fae6 	bl	80093ac <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a09      	ldr	r2, [pc, #36]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800ade4:	655a      	str	r2, [r3, #84]	; 0x54
 800ade6:	4a08      	ldr	r2, [pc, #32]	; (800ae08 <HAL_SPI_MspInit+0x148>)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800adec:	bf00      	nop
 800adee:	3728      	adds	r7, #40	; 0x28
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	40013000 	.word	0x40013000
 800adf8:	40023800 	.word	0x40023800
 800adfc:	40020000 	.word	0x40020000
 800ae00:	2002378c 	.word	0x2002378c
 800ae04:	40026410 	.word	0x40026410
 800ae08:	200277ec 	.word	0x200277ec
 800ae0c:	40026458 	.word	0x40026458

0800ae10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b08a      	sub	sp, #40	; 0x28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae18:	f107 0314 	add.w	r3, r7, #20
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	605a      	str	r2, [r3, #4]
 800ae22:	609a      	str	r2, [r3, #8]
 800ae24:	60da      	str	r2, [r3, #12]
 800ae26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a32      	ldr	r2, [pc, #200]	; (800aef8 <HAL_UART_MspInit+0xe8>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d15d      	bne.n	800aeee <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800ae32:	4b32      	ldr	r3, [pc, #200]	; (800aefc <HAL_UART_MspInit+0xec>)
 800ae34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae36:	4a31      	ldr	r2, [pc, #196]	; (800aefc <HAL_UART_MspInit+0xec>)
 800ae38:	f043 0320 	orr.w	r3, r3, #32
 800ae3c:	6453      	str	r3, [r2, #68]	; 0x44
 800ae3e:	4b2f      	ldr	r3, [pc, #188]	; (800aefc <HAL_UART_MspInit+0xec>)
 800ae40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae42:	f003 0320 	and.w	r3, r3, #32
 800ae46:	613b      	str	r3, [r7, #16]
 800ae48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae4a:	4b2c      	ldr	r3, [pc, #176]	; (800aefc <HAL_UART_MspInit+0xec>)
 800ae4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4e:	4a2b      	ldr	r2, [pc, #172]	; (800aefc <HAL_UART_MspInit+0xec>)
 800ae50:	f043 0304 	orr.w	r3, r3, #4
 800ae54:	6313      	str	r3, [r2, #48]	; 0x30
 800ae56:	4b29      	ldr	r3, [pc, #164]	; (800aefc <HAL_UART_MspInit+0xec>)
 800ae58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5a:	f003 0304 	and.w	r3, r3, #4
 800ae5e:	60fb      	str	r3, [r7, #12]
 800ae60:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ae62:	23c0      	movs	r3, #192	; 0xc0
 800ae64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae66:	2302      	movs	r3, #2
 800ae68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ae72:	2308      	movs	r3, #8
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae76:	f107 0314 	add.w	r3, r7, #20
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	4820      	ldr	r0, [pc, #128]	; (800af00 <HAL_UART_MspInit+0xf0>)
 800ae7e:	f000 fdff 	bl	800ba80 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800ae82:	4b20      	ldr	r3, [pc, #128]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800ae84:	4a20      	ldr	r2, [pc, #128]	; (800af08 <HAL_UART_MspInit+0xf8>)
 800ae86:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800ae88:	4b1e      	ldr	r3, [pc, #120]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800ae8a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800ae8e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae90:	4b1c      	ldr	r3, [pc, #112]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800ae92:	2240      	movs	r2, #64	; 0x40
 800ae94:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae96:	4b1b      	ldr	r3, [pc, #108]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ae9c:	4b19      	ldr	r3, [pc, #100]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800ae9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aea2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aea4:	4b17      	ldr	r3, [pc, #92]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aeaa:	4b16      	ldr	r3, [pc, #88]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800aeb0:	4b14      	ldr	r3, [pc, #80]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800aeb6:	4b13      	ldr	r3, [pc, #76]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aebc:	4b11      	ldr	r3, [pc, #68]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800aebe:	2200      	movs	r2, #0
 800aec0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800aec2:	4810      	ldr	r0, [pc, #64]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800aec4:	f000 fa44 	bl	800b350 <HAL_DMA_Init>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800aece:	f7fe fa6d 	bl	80093ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a0b      	ldr	r2, [pc, #44]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800aed6:	669a      	str	r2, [r3, #104]	; 0x68
 800aed8:	4a0a      	ldr	r2, [pc, #40]	; (800af04 <HAL_UART_MspInit+0xf4>)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 3, 0);
 800aede:	2200      	movs	r2, #0
 800aee0:	2103      	movs	r1, #3
 800aee2:	2047      	movs	r0, #71	; 0x47
 800aee4:	f000 f9fd 	bl	800b2e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800aee8:	2047      	movs	r0, #71	; 0x47
 800aeea:	f000 fa16 	bl	800b31a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800aeee:	bf00      	nop
 800aef0:	3728      	adds	r7, #40	; 0x28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	40011400 	.word	0x40011400
 800aefc:	40023800 	.word	0x40023800
 800af00:	40020800 	.word	0x40020800
 800af04:	200133f0 	.word	0x200133f0
 800af08:	400264a0 	.word	0x400264a0

0800af0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800af0c:	b480      	push	{r7}
 800af0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800af10:	bf00      	nop
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr

0800af1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800af1a:	b480      	push	{r7}
 800af1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800af1e:	e7fe      	b.n	800af1e <HardFault_Handler+0x4>

0800af20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af20:	b480      	push	{r7}
 800af22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800af24:	e7fe      	b.n	800af24 <MemManage_Handler+0x4>

0800af26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800af26:	b480      	push	{r7}
 800af28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800af2a:	e7fe      	b.n	800af2a <BusFault_Handler+0x4>

0800af2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800af2c:	b480      	push	{r7}
 800af2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800af30:	e7fe      	b.n	800af30 <UsageFault_Handler+0x4>

0800af32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800af32:	b480      	push	{r7}
 800af34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800af36:	bf00      	nop
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800af44:	f000 f8d2 	bl	800b0ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800af48:	f006 fec0 	bl	8011ccc <xTaskGetSchedulerState>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d001      	beq.n	800af56 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800af52:	f007 fa91 	bl	8012478 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800af56:	bf00      	nop
 800af58:	bd80      	pop	{r7, pc}

0800af5a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800af5e:	2008      	movs	r0, #8
 800af60:	f000 ff84 	bl	800be6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800af64:	bf00      	nop
 800af66:	bd80      	pop	{r7, pc}

0800af68 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800af6c:	4802      	ldr	r0, [pc, #8]	; (800af78 <DMA1_Stream6_IRQHandler+0x10>)
 800af6e:	f000 fb1f 	bl	800b5b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800af72:	bf00      	nop
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20008210 	.word	0x20008210

0800af7c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800af80:	4802      	ldr	r0, [pc, #8]	; (800af8c <I2C1_EV_IRQHandler+0x10>)
 800af82:	f001 f935 	bl	800c1f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800af86:	bf00      	nop
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	20008270 	.word	0x20008270

0800af90 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800af94:	4802      	ldr	r0, [pc, #8]	; (800afa0 <I2C1_ER_IRQHandler+0x10>)
 800af96:	f001 f945 	bl	800c224 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800af9a:	bf00      	nop
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	20008270 	.word	0x20008270

0800afa4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800afa8:	4802      	ldr	r0, [pc, #8]	; (800afb4 <DMA2_Stream0_IRQHandler+0x10>)
 800afaa:	f000 fb01 	bl	800b5b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800afae:	bf00      	nop
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	2002378c 	.word	0x2002378c

0800afb8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800afbc:	4802      	ldr	r0, [pc, #8]	; (800afc8 <DMA2_Stream3_IRQHandler+0x10>)
 800afbe:	f000 faf7 	bl	800b5b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800afc2:	bf00      	nop
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	200277ec 	.word	0x200277ec

0800afcc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800afd0:	4802      	ldr	r0, [pc, #8]	; (800afdc <DMA2_Stream6_IRQHandler+0x10>)
 800afd2:	f000 faed 	bl	800b5b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800afd6:	bf00      	nop
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	200133f0 	.word	0x200133f0

0800afe0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800afe4:	4802      	ldr	r0, [pc, #8]	; (800aff0 <USART6_IRQHandler+0x10>)
 800afe6:	f004 fb71 	bl	800f6cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800afea:	bf00      	nop
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	200236a0 	.word	0x200236a0

0800aff4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800aff4:	b480      	push	{r7}
 800aff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aff8:	4b07      	ldr	r3, [pc, #28]	; (800b018 <SystemInit+0x24>)
 800affa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800affe:	4a06      	ldr	r2, [pc, #24]	; (800b018 <SystemInit+0x24>)
 800b000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | 0x8000; /* Vector Table Relocation in Internal FLASH */
 800b008:	4b03      	ldr	r3, [pc, #12]	; (800b018 <SystemInit+0x24>)
 800b00a:	4a04      	ldr	r2, [pc, #16]	; (800b01c <SystemInit+0x28>)
 800b00c:	609a      	str	r2, [r3, #8]
#endif
}
 800b00e:	bf00      	nop
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	e000ed00 	.word	0xe000ed00
 800b01c:	08008000 	.word	0x08008000

0800b020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b020:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b058 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b024:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b026:	e003      	b.n	800b030 <LoopCopyDataInit>

0800b028 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b028:	4b0c      	ldr	r3, [pc, #48]	; (800b05c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b02a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b02c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b02e:	3104      	adds	r1, #4

0800b030 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b030:	480b      	ldr	r0, [pc, #44]	; (800b060 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b032:	4b0c      	ldr	r3, [pc, #48]	; (800b064 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b034:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b036:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b038:	d3f6      	bcc.n	800b028 <CopyDataInit>
  ldr  r2, =_sbss
 800b03a:	4a0b      	ldr	r2, [pc, #44]	; (800b068 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b03c:	e002      	b.n	800b044 <LoopFillZerobss>

0800b03e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b03e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b040:	f842 3b04 	str.w	r3, [r2], #4

0800b044 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b044:	4b09      	ldr	r3, [pc, #36]	; (800b06c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b046:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b048:	d3f9      	bcc.n	800b03e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b04a:	f7ff ffd3 	bl	800aff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b04e:	f007 fc85 	bl	801295c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b052:	f7fd fd1f 	bl	8008a94 <main>
  bx  lr    
 800b056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b058:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800b05c:	08012b40 	.word	0x08012b40
  ldr  r0, =_sdata
 800b060:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b064:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 800b068:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 800b06c:	20027858 	.word	0x20027858

0800b070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b070:	e7fe      	b.n	800b070 <ADC_IRQHandler>

0800b072 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b076:	2003      	movs	r0, #3
 800b078:	f000 f928 	bl	800b2cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b07c:	200f      	movs	r0, #15
 800b07e:	f000 f805 	bl	800b08c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800b082:	f7ff fd3f 	bl	800ab04 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b094:	4b12      	ldr	r3, [pc, #72]	; (800b0e0 <HAL_InitTick+0x54>)
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	4b12      	ldr	r3, [pc, #72]	; (800b0e4 <HAL_InitTick+0x58>)
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	4619      	mov	r1, r3
 800b09e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b0a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 f943 	bl	800b336 <HAL_SYSTICK_Config>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d001      	beq.n	800b0ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e00e      	b.n	800b0d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b0f      	cmp	r3, #15
 800b0be:	d80a      	bhi.n	800b0d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c8:	f000 f90b 	bl	800b2e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b0cc:	4a06      	ldr	r2, [pc, #24]	; (800b0e8 <HAL_InitTick+0x5c>)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e000      	b.n	800b0d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	20000010 	.word	0x20000010
 800b0e4:	20000018 	.word	0x20000018
 800b0e8:	20000014 	.word	0x20000014

0800b0ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b0f0:	4b06      	ldr	r3, [pc, #24]	; (800b10c <HAL_IncTick+0x20>)
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	4b06      	ldr	r3, [pc, #24]	; (800b110 <HAL_IncTick+0x24>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	4a04      	ldr	r2, [pc, #16]	; (800b110 <HAL_IncTick+0x24>)
 800b0fe:	6013      	str	r3, [r2, #0]
}
 800b100:	bf00      	nop
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	20000018 	.word	0x20000018
 800b110:	20027854 	.word	0x20027854

0800b114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b114:	b480      	push	{r7}
 800b116:	af00      	add	r7, sp, #0
  return uwTick;
 800b118:	4b03      	ldr	r3, [pc, #12]	; (800b128 <HAL_GetTick+0x14>)
 800b11a:	681b      	ldr	r3, [r3, #0]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	20027854 	.word	0x20027854

0800b12c <__NVIC_SetPriorityGrouping>:
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f003 0307 	and.w	r3, r3, #7
 800b13a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b13c:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <__NVIC_SetPriorityGrouping+0x40>)
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b148:	4013      	ands	r3, r2
 800b14a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b154:	4b06      	ldr	r3, [pc, #24]	; (800b170 <__NVIC_SetPriorityGrouping+0x44>)
 800b156:	4313      	orrs	r3, r2
 800b158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b15a:	4a04      	ldr	r2, [pc, #16]	; (800b16c <__NVIC_SetPriorityGrouping+0x40>)
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	60d3      	str	r3, [r2, #12]
}
 800b160:	bf00      	nop
 800b162:	3714      	adds	r7, #20
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	e000ed00 	.word	0xe000ed00
 800b170:	05fa0000 	.word	0x05fa0000

0800b174 <__NVIC_GetPriorityGrouping>:
{
 800b174:	b480      	push	{r7}
 800b176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b178:	4b04      	ldr	r3, [pc, #16]	; (800b18c <__NVIC_GetPriorityGrouping+0x18>)
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	0a1b      	lsrs	r3, r3, #8
 800b17e:	f003 0307 	and.w	r3, r3, #7
}
 800b182:	4618      	mov	r0, r3
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	e000ed00 	.word	0xe000ed00

0800b190 <__NVIC_EnableIRQ>:
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	4603      	mov	r3, r0
 800b198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b19a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	db0b      	blt.n	800b1ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b1a2:	79fb      	ldrb	r3, [r7, #7]
 800b1a4:	f003 021f 	and.w	r2, r3, #31
 800b1a8:	4907      	ldr	r1, [pc, #28]	; (800b1c8 <__NVIC_EnableIRQ+0x38>)
 800b1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1ae:	095b      	lsrs	r3, r3, #5
 800b1b0:	2001      	movs	r0, #1
 800b1b2:	fa00 f202 	lsl.w	r2, r0, r2
 800b1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b1ba:	bf00      	nop
 800b1bc:	370c      	adds	r7, #12
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	e000e100 	.word	0xe000e100

0800b1cc <__NVIC_SetPriority>:
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	6039      	str	r1, [r7, #0]
 800b1d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b1d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	db0a      	blt.n	800b1f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	490c      	ldr	r1, [pc, #48]	; (800b218 <__NVIC_SetPriority+0x4c>)
 800b1e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1ea:	0112      	lsls	r2, r2, #4
 800b1ec:	b2d2      	uxtb	r2, r2
 800b1ee:	440b      	add	r3, r1
 800b1f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b1f4:	e00a      	b.n	800b20c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	4908      	ldr	r1, [pc, #32]	; (800b21c <__NVIC_SetPriority+0x50>)
 800b1fc:	79fb      	ldrb	r3, [r7, #7]
 800b1fe:	f003 030f 	and.w	r3, r3, #15
 800b202:	3b04      	subs	r3, #4
 800b204:	0112      	lsls	r2, r2, #4
 800b206:	b2d2      	uxtb	r2, r2
 800b208:	440b      	add	r3, r1
 800b20a:	761a      	strb	r2, [r3, #24]
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr
 800b218:	e000e100 	.word	0xe000e100
 800b21c:	e000ed00 	.word	0xe000ed00

0800b220 <NVIC_EncodePriority>:
{
 800b220:	b480      	push	{r7}
 800b222:	b089      	sub	sp, #36	; 0x24
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f003 0307 	and.w	r3, r3, #7
 800b232:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	f1c3 0307 	rsb	r3, r3, #7
 800b23a:	2b04      	cmp	r3, #4
 800b23c:	bf28      	it	cs
 800b23e:	2304      	movcs	r3, #4
 800b240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	3304      	adds	r3, #4
 800b246:	2b06      	cmp	r3, #6
 800b248:	d902      	bls.n	800b250 <NVIC_EncodePriority+0x30>
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	3b03      	subs	r3, #3
 800b24e:	e000      	b.n	800b252 <NVIC_EncodePriority+0x32>
 800b250:	2300      	movs	r3, #0
 800b252:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b254:	f04f 32ff 	mov.w	r2, #4294967295
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	fa02 f303 	lsl.w	r3, r2, r3
 800b25e:	43da      	mvns	r2, r3
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	401a      	ands	r2, r3
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b268:	f04f 31ff 	mov.w	r1, #4294967295
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	fa01 f303 	lsl.w	r3, r1, r3
 800b272:	43d9      	mvns	r1, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b278:	4313      	orrs	r3, r2
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3724      	adds	r7, #36	; 0x24
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
	...

0800b288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3b01      	subs	r3, #1
 800b294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b298:	d301      	bcc.n	800b29e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b29a:	2301      	movs	r3, #1
 800b29c:	e00f      	b.n	800b2be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b29e:	4a0a      	ldr	r2, [pc, #40]	; (800b2c8 <SysTick_Config+0x40>)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b2a6:	210f      	movs	r1, #15
 800b2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ac:	f7ff ff8e 	bl	800b1cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b2b0:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <SysTick_Config+0x40>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b2b6:	4b04      	ldr	r3, [pc, #16]	; (800b2c8 <SysTick_Config+0x40>)
 800b2b8:	2207      	movs	r2, #7
 800b2ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	e000e010 	.word	0xe000e010

0800b2cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7ff ff29 	bl	800b12c <__NVIC_SetPriorityGrouping>
}
 800b2da:	bf00      	nop
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b086      	sub	sp, #24
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	60b9      	str	r1, [r7, #8]
 800b2ec:	607a      	str	r2, [r7, #4]
 800b2ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b2f4:	f7ff ff3e 	bl	800b174 <__NVIC_GetPriorityGrouping>
 800b2f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	6978      	ldr	r0, [r7, #20]
 800b300:	f7ff ff8e 	bl	800b220 <NVIC_EncodePriority>
 800b304:	4602      	mov	r2, r0
 800b306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b30a:	4611      	mov	r1, r2
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff ff5d 	bl	800b1cc <__NVIC_SetPriority>
}
 800b312:	bf00      	nop
 800b314:	3718      	adds	r7, #24
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b082      	sub	sp, #8
 800b31e:	af00      	add	r7, sp, #0
 800b320:	4603      	mov	r3, r0
 800b322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7ff ff31 	bl	800b190 <__NVIC_EnableIRQ>
}
 800b32e:	bf00      	nop
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b082      	sub	sp, #8
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7ff ffa2 	bl	800b288 <SysTick_Config>
 800b344:	4603      	mov	r3, r0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
	...

0800b350 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b358:	2300      	movs	r3, #0
 800b35a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b35c:	f7ff feda 	bl	800b114 <HAL_GetTick>
 800b360:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e099      	b.n	800b4a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2202      	movs	r2, #2
 800b378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f022 0201 	bic.w	r2, r2, #1
 800b38a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b38c:	e00f      	b.n	800b3ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b38e:	f7ff fec1 	bl	800b114 <HAL_GetTick>
 800b392:	4602      	mov	r2, r0
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	2b05      	cmp	r3, #5
 800b39a:	d908      	bls.n	800b3ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2220      	movs	r2, #32
 800b3a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2203      	movs	r2, #3
 800b3a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	e078      	b.n	800b4a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 0301 	and.w	r3, r3, #1
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1e8      	bne.n	800b38e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b3c4:	697a      	ldr	r2, [r7, #20]
 800b3c6:	4b38      	ldr	r3, [pc, #224]	; (800b4a8 <HAL_DMA_Init+0x158>)
 800b3c8:	4013      	ands	r3, r2
 800b3ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685a      	ldr	r2, [r3, #4]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b3da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b3e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b3f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a1b      	ldr	r3, [r3, #32]
 800b3f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b404:	2b04      	cmp	r3, #4
 800b406:	d107      	bne.n	800b418 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b410:	4313      	orrs	r3, r2
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	4313      	orrs	r3, r2
 800b416:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	f023 0307 	bic.w	r3, r3, #7
 800b42e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b434:	697a      	ldr	r2, [r7, #20]
 800b436:	4313      	orrs	r3, r2
 800b438:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43e:	2b04      	cmp	r3, #4
 800b440:	d117      	bne.n	800b472 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	4313      	orrs	r3, r2
 800b44a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00e      	beq.n	800b472 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 fa99 	bl	800b98c <DMA_CheckFifoParam>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d008      	beq.n	800b472 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2240      	movs	r2, #64	; 0x40
 800b464:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b46e:	2301      	movs	r3, #1
 800b470:	e016      	b.n	800b4a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fa50 	bl	800b920 <DMA_CalcBaseAndBitshift>
 800b480:	4603      	mov	r3, r0
 800b482:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b488:	223f      	movs	r2, #63	; 0x3f
 800b48a:	409a      	lsls	r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	e010803f 	.word	0xe010803f

0800b4ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d101      	bne.n	800b4d2 <HAL_DMA_Start_IT+0x26>
 800b4ce:	2302      	movs	r3, #2
 800b4d0:	e048      	b.n	800b564 <HAL_DMA_Start_IT+0xb8>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d137      	bne.n	800b556 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2202      	movs	r2, #2
 800b4ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	68b9      	ldr	r1, [r7, #8]
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f000 f9e2 	bl	800b8c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b504:	223f      	movs	r2, #63	; 0x3f
 800b506:	409a      	lsls	r2, r3
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f042 0216 	orr.w	r2, r2, #22
 800b51a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	695a      	ldr	r2, [r3, #20]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b52a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b530:	2b00      	cmp	r3, #0
 800b532:	d007      	beq.n	800b544 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f042 0208 	orr.w	r2, r2, #8
 800b542:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f042 0201 	orr.w	r2, r2, #1
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	e005      	b.n	800b562 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b55e:	2302      	movs	r3, #2
 800b560:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b562:	7dfb      	ldrb	r3, [r7, #23]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d004      	beq.n	800b58a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2280      	movs	r2, #128	; 0x80
 800b584:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e00c      	b.n	800b5a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2205      	movs	r2, #5
 800b58e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f022 0201 	bic.w	r2, r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800b5bc:	4b92      	ldr	r3, [pc, #584]	; (800b808 <HAL_DMA_IRQHandler+0x258>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a92      	ldr	r2, [pc, #584]	; (800b80c <HAL_DMA_IRQHandler+0x25c>)
 800b5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c6:	0a9b      	lsrs	r3, r3, #10
 800b5c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5da:	2208      	movs	r2, #8
 800b5dc:	409a      	lsls	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d01a      	beq.n	800b61c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f003 0304 	and.w	r3, r3, #4
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d013      	beq.n	800b61c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f022 0204 	bic.w	r2, r2, #4
 800b602:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b608:	2208      	movs	r2, #8
 800b60a:	409a      	lsls	r2, r3
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b614:	f043 0201 	orr.w	r2, r3, #1
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b620:	2201      	movs	r2, #1
 800b622:	409a      	lsls	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4013      	ands	r3, r2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d012      	beq.n	800b652 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	695b      	ldr	r3, [r3, #20]
 800b632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00b      	beq.n	800b652 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b63e:	2201      	movs	r2, #1
 800b640:	409a      	lsls	r2, r3
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b64a:	f043 0202 	orr.w	r2, r3, #2
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b656:	2204      	movs	r2, #4
 800b658:	409a      	lsls	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	4013      	ands	r3, r2
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d012      	beq.n	800b688 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f003 0302 	and.w	r3, r3, #2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00b      	beq.n	800b688 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b674:	2204      	movs	r2, #4
 800b676:	409a      	lsls	r2, r3
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b680:	f043 0204 	orr.w	r2, r3, #4
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b68c:	2210      	movs	r2, #16
 800b68e:	409a      	lsls	r2, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4013      	ands	r3, r2
 800b694:	2b00      	cmp	r3, #0
 800b696:	d043      	beq.n	800b720 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f003 0308 	and.w	r3, r3, #8
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d03c      	beq.n	800b720 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6aa:	2210      	movs	r2, #16
 800b6ac:	409a      	lsls	r2, r3
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d018      	beq.n	800b6f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d108      	bne.n	800b6e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d024      	beq.n	800b720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	4798      	blx	r3
 800b6de:	e01f      	b.n	800b720 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d01b      	beq.n	800b720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	4798      	blx	r3
 800b6f0:	e016      	b.n	800b720 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d107      	bne.n	800b710 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f022 0208 	bic.w	r2, r2, #8
 800b70e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b714:	2b00      	cmp	r3, #0
 800b716:	d003      	beq.n	800b720 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b724:	2220      	movs	r2, #32
 800b726:	409a      	lsls	r2, r3
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	4013      	ands	r3, r2
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 808e 	beq.w	800b84e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 0310 	and.w	r3, r3, #16
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 8086 	beq.w	800b84e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b746:	2220      	movs	r2, #32
 800b748:	409a      	lsls	r2, r3
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b05      	cmp	r3, #5
 800b758:	d136      	bne.n	800b7c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f022 0216 	bic.w	r2, r2, #22
 800b768:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	695a      	ldr	r2, [r3, #20]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b778:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d103      	bne.n	800b78a <HAL_DMA_IRQHandler+0x1da>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b786:	2b00      	cmp	r3, #0
 800b788:	d007      	beq.n	800b79a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f022 0208 	bic.w	r2, r2, #8
 800b798:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b79e:	223f      	movs	r2, #63	; 0x3f
 800b7a0:	409a      	lsls	r2, r3
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d07d      	beq.n	800b8ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	4798      	blx	r3
        }
        return;
 800b7c6:	e078      	b.n	800b8ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d01c      	beq.n	800b810 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d108      	bne.n	800b7f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d030      	beq.n	800b84e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	4798      	blx	r3
 800b7f4:	e02b      	b.n	800b84e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d027      	beq.n	800b84e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	4798      	blx	r3
 800b806:	e022      	b.n	800b84e <HAL_DMA_IRQHandler+0x29e>
 800b808:	20000010 	.word	0x20000010
 800b80c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10f      	bne.n	800b83e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f022 0210 	bic.w	r2, r2, #16
 800b82c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2201      	movs	r2, #1
 800b83a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b842:	2b00      	cmp	r3, #0
 800b844:	d003      	beq.n	800b84e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b852:	2b00      	cmp	r3, #0
 800b854:	d032      	beq.n	800b8bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b85a:	f003 0301 	and.w	r3, r3, #1
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d022      	beq.n	800b8a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2205      	movs	r2, #5
 800b866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f022 0201 	bic.w	r2, r2, #1
 800b878:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	3301      	adds	r3, #1
 800b87e:	60bb      	str	r3, [r7, #8]
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	429a      	cmp	r2, r3
 800b884:	d307      	bcc.n	800b896 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 0301 	and.w	r3, r3, #1
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1f2      	bne.n	800b87a <HAL_DMA_IRQHandler+0x2ca>
 800b894:	e000      	b.n	800b898 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b896:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d005      	beq.n	800b8bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	4798      	blx	r3
 800b8b8:	e000      	b.n	800b8bc <HAL_DMA_IRQHandler+0x30c>
        return;
 800b8ba:	bf00      	nop
    }
  }
}
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop

0800b8c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
 800b8d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b8e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	683a      	ldr	r2, [r7, #0]
 800b8e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	2b40      	cmp	r3, #64	; 0x40
 800b8f0:	d108      	bne.n	800b904 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b902:	e007      	b.n	800b914 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	60da      	str	r2, [r3, #12]
}
 800b914:	bf00      	nop
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	3b10      	subs	r3, #16
 800b930:	4a13      	ldr	r2, [pc, #76]	; (800b980 <DMA_CalcBaseAndBitshift+0x60>)
 800b932:	fba2 2303 	umull	r2, r3, r2, r3
 800b936:	091b      	lsrs	r3, r3, #4
 800b938:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b93a:	4a12      	ldr	r2, [pc, #72]	; (800b984 <DMA_CalcBaseAndBitshift+0x64>)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	4413      	add	r3, r2
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b03      	cmp	r3, #3
 800b94c:	d908      	bls.n	800b960 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	461a      	mov	r2, r3
 800b954:	4b0c      	ldr	r3, [pc, #48]	; (800b988 <DMA_CalcBaseAndBitshift+0x68>)
 800b956:	4013      	ands	r3, r2
 800b958:	1d1a      	adds	r2, r3, #4
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	659a      	str	r2, [r3, #88]	; 0x58
 800b95e:	e006      	b.n	800b96e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	461a      	mov	r2, r3
 800b966:	4b08      	ldr	r3, [pc, #32]	; (800b988 <DMA_CalcBaseAndBitshift+0x68>)
 800b968:	4013      	ands	r3, r2
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b972:	4618      	mov	r0, r3
 800b974:	3714      	adds	r7, #20
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	aaaaaaab 	.word	0xaaaaaaab
 800b984:	08012b28 	.word	0x08012b28
 800b988:	fffffc00 	.word	0xfffffc00

0800b98c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d11f      	bne.n	800b9e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d855      	bhi.n	800ba58 <DMA_CheckFifoParam+0xcc>
 800b9ac:	a201      	add	r2, pc, #4	; (adr r2, 800b9b4 <DMA_CheckFifoParam+0x28>)
 800b9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b2:	bf00      	nop
 800b9b4:	0800b9c5 	.word	0x0800b9c5
 800b9b8:	0800b9d7 	.word	0x0800b9d7
 800b9bc:	0800b9c5 	.word	0x0800b9c5
 800b9c0:	0800ba59 	.word	0x0800ba59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d045      	beq.n	800ba5c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b9d4:	e042      	b.n	800ba5c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b9de:	d13f      	bne.n	800ba60 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b9e4:	e03c      	b.n	800ba60 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	699b      	ldr	r3, [r3, #24]
 800b9ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9ee:	d121      	bne.n	800ba34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d836      	bhi.n	800ba64 <DMA_CheckFifoParam+0xd8>
 800b9f6:	a201      	add	r2, pc, #4	; (adr r2, 800b9fc <DMA_CheckFifoParam+0x70>)
 800b9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fc:	0800ba0d 	.word	0x0800ba0d
 800ba00:	0800ba13 	.word	0x0800ba13
 800ba04:	0800ba0d 	.word	0x0800ba0d
 800ba08:	0800ba25 	.word	0x0800ba25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba10:	e02f      	b.n	800ba72 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d024      	beq.n	800ba68 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba22:	e021      	b.n	800ba68 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ba2c:	d11e      	bne.n	800ba6c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ba32:	e01b      	b.n	800ba6c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d902      	bls.n	800ba40 <DMA_CheckFifoParam+0xb4>
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	d003      	beq.n	800ba46 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ba3e:	e018      	b.n	800ba72 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	73fb      	strb	r3, [r7, #15]
      break;
 800ba44:	e015      	b.n	800ba72 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00e      	beq.n	800ba70 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	73fb      	strb	r3, [r7, #15]
      break;
 800ba56:	e00b      	b.n	800ba70 <DMA_CheckFifoParam+0xe4>
      break;
 800ba58:	bf00      	nop
 800ba5a:	e00a      	b.n	800ba72 <DMA_CheckFifoParam+0xe6>
      break;
 800ba5c:	bf00      	nop
 800ba5e:	e008      	b.n	800ba72 <DMA_CheckFifoParam+0xe6>
      break;
 800ba60:	bf00      	nop
 800ba62:	e006      	b.n	800ba72 <DMA_CheckFifoParam+0xe6>
      break;
 800ba64:	bf00      	nop
 800ba66:	e004      	b.n	800ba72 <DMA_CheckFifoParam+0xe6>
      break;
 800ba68:	bf00      	nop
 800ba6a:	e002      	b.n	800ba72 <DMA_CheckFifoParam+0xe6>
      break;   
 800ba6c:	bf00      	nop
 800ba6e:	e000      	b.n	800ba72 <DMA_CheckFifoParam+0xe6>
      break;
 800ba70:	bf00      	nop
    }
  } 
  
  return status; 
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3714      	adds	r7, #20
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b089      	sub	sp, #36	; 0x24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800ba92:	2300      	movs	r3, #0
 800ba94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800ba96:	2300      	movs	r3, #0
 800ba98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	61fb      	str	r3, [r7, #28]
 800ba9e:	e175      	b.n	800bd8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800baa0:	2201      	movs	r2, #1
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	fa02 f303 	lsl.w	r3, r2, r3
 800baa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	4013      	ands	r3, r2
 800bab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	429a      	cmp	r2, r3
 800baba:	f040 8164 	bne.w	800bd86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d00b      	beq.n	800bade <HAL_GPIO_Init+0x5e>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	2b02      	cmp	r3, #2
 800bacc:	d007      	beq.n	800bade <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bad2:	2b11      	cmp	r3, #17
 800bad4:	d003      	beq.n	800bade <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	2b12      	cmp	r3, #18
 800badc:	d130      	bne.n	800bb40 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	005b      	lsls	r3, r3, #1
 800bae8:	2203      	movs	r2, #3
 800baea:	fa02 f303 	lsl.w	r3, r2, r3
 800baee:	43db      	mvns	r3, r3
 800baf0:	69ba      	ldr	r2, [r7, #24]
 800baf2:	4013      	ands	r3, r2
 800baf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	68da      	ldr	r2, [r3, #12]
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	005b      	lsls	r3, r3, #1
 800bafe:	fa02 f303 	lsl.w	r3, r2, r3
 800bb02:	69ba      	ldr	r2, [r7, #24]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	69ba      	ldr	r2, [r7, #24]
 800bb0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bb14:	2201      	movs	r2, #1
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	fa02 f303 	lsl.w	r3, r2, r3
 800bb1c:	43db      	mvns	r3, r3
 800bb1e:	69ba      	ldr	r2, [r7, #24]
 800bb20:	4013      	ands	r3, r2
 800bb22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	091b      	lsrs	r3, r3, #4
 800bb2a:	f003 0201 	and.w	r2, r3, #1
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	fa02 f303 	lsl.w	r3, r2, r3
 800bb34:	69ba      	ldr	r2, [r7, #24]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	69ba      	ldr	r2, [r7, #24]
 800bb3e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	005b      	lsls	r3, r3, #1
 800bb4a:	2203      	movs	r2, #3
 800bb4c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb50:	43db      	mvns	r3, r3
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	4013      	ands	r3, r2
 800bb56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	689a      	ldr	r2, [r3, #8]
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	fa02 f303 	lsl.w	r3, r2, r3
 800bb64:	69ba      	ldr	r2, [r7, #24]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	69ba      	ldr	r2, [r7, #24]
 800bb6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d003      	beq.n	800bb80 <HAL_GPIO_Init+0x100>
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	2b12      	cmp	r3, #18
 800bb7e:	d123      	bne.n	800bbc8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	08da      	lsrs	r2, r3, #3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	3208      	adds	r2, #8
 800bb88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	f003 0307 	and.w	r3, r3, #7
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	220f      	movs	r2, #15
 800bb98:	fa02 f303 	lsl.w	r3, r2, r3
 800bb9c:	43db      	mvns	r3, r3
 800bb9e:	69ba      	ldr	r2, [r7, #24]
 800bba0:	4013      	ands	r3, r2
 800bba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	691a      	ldr	r2, [r3, #16]
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	f003 0307 	and.w	r3, r3, #7
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb4:	69ba      	ldr	r2, [r7, #24]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	08da      	lsrs	r2, r3, #3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	3208      	adds	r2, #8
 800bbc2:	69b9      	ldr	r1, [r7, #24]
 800bbc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	005b      	lsls	r3, r3, #1
 800bbd2:	2203      	movs	r2, #3
 800bbd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd8:	43db      	mvns	r3, r3
 800bbda:	69ba      	ldr	r2, [r7, #24]
 800bbdc:	4013      	ands	r3, r2
 800bbde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	f003 0203 	and.w	r2, r3, #3
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	005b      	lsls	r3, r3, #1
 800bbec:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf0:	69ba      	ldr	r2, [r7, #24]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	69ba      	ldr	r2, [r7, #24]
 800bbfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f000 80be 	beq.w	800bd86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bc0a:	4b65      	ldr	r3, [pc, #404]	; (800bda0 <HAL_GPIO_Init+0x320>)
 800bc0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc0e:	4a64      	ldr	r2, [pc, #400]	; (800bda0 <HAL_GPIO_Init+0x320>)
 800bc10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc14:	6453      	str	r3, [r2, #68]	; 0x44
 800bc16:	4b62      	ldr	r3, [pc, #392]	; (800bda0 <HAL_GPIO_Init+0x320>)
 800bc18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc1e:	60fb      	str	r3, [r7, #12]
 800bc20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800bc22:	4a60      	ldr	r2, [pc, #384]	; (800bda4 <HAL_GPIO_Init+0x324>)
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	089b      	lsrs	r3, r3, #2
 800bc28:	3302      	adds	r3, #2
 800bc2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	f003 0303 	and.w	r3, r3, #3
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	220f      	movs	r2, #15
 800bc3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc3e:	43db      	mvns	r3, r3
 800bc40:	69ba      	ldr	r2, [r7, #24]
 800bc42:	4013      	ands	r3, r2
 800bc44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a57      	ldr	r2, [pc, #348]	; (800bda8 <HAL_GPIO_Init+0x328>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d037      	beq.n	800bcbe <HAL_GPIO_Init+0x23e>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a56      	ldr	r2, [pc, #344]	; (800bdac <HAL_GPIO_Init+0x32c>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d031      	beq.n	800bcba <HAL_GPIO_Init+0x23a>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a55      	ldr	r2, [pc, #340]	; (800bdb0 <HAL_GPIO_Init+0x330>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d02b      	beq.n	800bcb6 <HAL_GPIO_Init+0x236>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a54      	ldr	r2, [pc, #336]	; (800bdb4 <HAL_GPIO_Init+0x334>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d025      	beq.n	800bcb2 <HAL_GPIO_Init+0x232>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4a53      	ldr	r2, [pc, #332]	; (800bdb8 <HAL_GPIO_Init+0x338>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d01f      	beq.n	800bcae <HAL_GPIO_Init+0x22e>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4a52      	ldr	r2, [pc, #328]	; (800bdbc <HAL_GPIO_Init+0x33c>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d019      	beq.n	800bcaa <HAL_GPIO_Init+0x22a>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4a51      	ldr	r2, [pc, #324]	; (800bdc0 <HAL_GPIO_Init+0x340>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d013      	beq.n	800bca6 <HAL_GPIO_Init+0x226>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4a50      	ldr	r2, [pc, #320]	; (800bdc4 <HAL_GPIO_Init+0x344>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d00d      	beq.n	800bca2 <HAL_GPIO_Init+0x222>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	4a4f      	ldr	r2, [pc, #316]	; (800bdc8 <HAL_GPIO_Init+0x348>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d007      	beq.n	800bc9e <HAL_GPIO_Init+0x21e>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a4e      	ldr	r2, [pc, #312]	; (800bdcc <HAL_GPIO_Init+0x34c>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d101      	bne.n	800bc9a <HAL_GPIO_Init+0x21a>
 800bc96:	2309      	movs	r3, #9
 800bc98:	e012      	b.n	800bcc0 <HAL_GPIO_Init+0x240>
 800bc9a:	230a      	movs	r3, #10
 800bc9c:	e010      	b.n	800bcc0 <HAL_GPIO_Init+0x240>
 800bc9e:	2308      	movs	r3, #8
 800bca0:	e00e      	b.n	800bcc0 <HAL_GPIO_Init+0x240>
 800bca2:	2307      	movs	r3, #7
 800bca4:	e00c      	b.n	800bcc0 <HAL_GPIO_Init+0x240>
 800bca6:	2306      	movs	r3, #6
 800bca8:	e00a      	b.n	800bcc0 <HAL_GPIO_Init+0x240>
 800bcaa:	2305      	movs	r3, #5
 800bcac:	e008      	b.n	800bcc0 <HAL_GPIO_Init+0x240>
 800bcae:	2304      	movs	r3, #4
 800bcb0:	e006      	b.n	800bcc0 <HAL_GPIO_Init+0x240>
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	e004      	b.n	800bcc0 <HAL_GPIO_Init+0x240>
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	e002      	b.n	800bcc0 <HAL_GPIO_Init+0x240>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e000      	b.n	800bcc0 <HAL_GPIO_Init+0x240>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	69fa      	ldr	r2, [r7, #28]
 800bcc2:	f002 0203 	and.w	r2, r2, #3
 800bcc6:	0092      	lsls	r2, r2, #2
 800bcc8:	4093      	lsls	r3, r2
 800bcca:	69ba      	ldr	r2, [r7, #24]
 800bccc:	4313      	orrs	r3, r2
 800bcce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800bcd0:	4934      	ldr	r1, [pc, #208]	; (800bda4 <HAL_GPIO_Init+0x324>)
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	089b      	lsrs	r3, r3, #2
 800bcd6:	3302      	adds	r3, #2
 800bcd8:	69ba      	ldr	r2, [r7, #24]
 800bcda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bcde:	4b3c      	ldr	r3, [pc, #240]	; (800bdd0 <HAL_GPIO_Init+0x350>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	43db      	mvns	r3, r3
 800bce8:	69ba      	ldr	r2, [r7, #24]
 800bcea:	4013      	ands	r3, r2
 800bcec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d003      	beq.n	800bd02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800bcfa:	69ba      	ldr	r2, [r7, #24]
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bd02:	4a33      	ldr	r2, [pc, #204]	; (800bdd0 <HAL_GPIO_Init+0x350>)
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bd08:	4b31      	ldr	r3, [pc, #196]	; (800bdd0 <HAL_GPIO_Init+0x350>)
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	43db      	mvns	r3, r3
 800bd12:	69ba      	ldr	r2, [r7, #24]
 800bd14:	4013      	ands	r3, r2
 800bd16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d003      	beq.n	800bd2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800bd24:	69ba      	ldr	r2, [r7, #24]
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bd2c:	4a28      	ldr	r2, [pc, #160]	; (800bdd0 <HAL_GPIO_Init+0x350>)
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bd32:	4b27      	ldr	r3, [pc, #156]	; (800bdd0 <HAL_GPIO_Init+0x350>)
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	43db      	mvns	r3, r3
 800bd3c:	69ba      	ldr	r2, [r7, #24]
 800bd3e:	4013      	ands	r3, r2
 800bd40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d003      	beq.n	800bd56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bd56:	4a1e      	ldr	r2, [pc, #120]	; (800bdd0 <HAL_GPIO_Init+0x350>)
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bd5c:	4b1c      	ldr	r3, [pc, #112]	; (800bdd0 <HAL_GPIO_Init+0x350>)
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	43db      	mvns	r3, r3
 800bd66:	69ba      	ldr	r2, [r7, #24]
 800bd68:	4013      	ands	r3, r2
 800bd6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d003      	beq.n	800bd80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800bd78:	69ba      	ldr	r2, [r7, #24]
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bd80:	4a13      	ldr	r2, [pc, #76]	; (800bdd0 <HAL_GPIO_Init+0x350>)
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	61fb      	str	r3, [r7, #28]
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	2b0f      	cmp	r3, #15
 800bd90:	f67f ae86 	bls.w	800baa0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800bd94:	bf00      	nop
 800bd96:	3724      	adds	r7, #36	; 0x24
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	40023800 	.word	0x40023800
 800bda4:	40013800 	.word	0x40013800
 800bda8:	40020000 	.word	0x40020000
 800bdac:	40020400 	.word	0x40020400
 800bdb0:	40020800 	.word	0x40020800
 800bdb4:	40020c00 	.word	0x40020c00
 800bdb8:	40021000 	.word	0x40021000
 800bdbc:	40021400 	.word	0x40021400
 800bdc0:	40021800 	.word	0x40021800
 800bdc4:	40021c00 	.word	0x40021c00
 800bdc8:	40022000 	.word	0x40022000
 800bdcc:	40022400 	.word	0x40022400
 800bdd0:	40013c00 	.word	0x40013c00

0800bdd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	460b      	mov	r3, r1
 800bdde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	691a      	ldr	r2, [r3, #16]
 800bde4:	887b      	ldrh	r3, [r7, #2]
 800bde6:	4013      	ands	r3, r2
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bdec:	2301      	movs	r3, #1
 800bdee:	73fb      	strb	r3, [r7, #15]
 800bdf0:	e001      	b.n	800bdf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bdf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3714      	adds	r7, #20
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	460b      	mov	r3, r1
 800be0e:	807b      	strh	r3, [r7, #2]
 800be10:	4613      	mov	r3, r2
 800be12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800be14:	787b      	ldrb	r3, [r7, #1]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d003      	beq.n	800be22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800be1a:	887a      	ldrh	r2, [r7, #2]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800be20:	e003      	b.n	800be2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800be22:	887b      	ldrh	r3, [r7, #2]
 800be24:	041a      	lsls	r2, r3, #16
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	619a      	str	r2, [r3, #24]
}
 800be2a:	bf00      	nop
 800be2c:	370c      	adds	r7, #12
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800be36:	b480      	push	{r7}
 800be38:	b083      	sub	sp, #12
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	460b      	mov	r3, r1
 800be40:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	695a      	ldr	r2, [r3, #20]
 800be46:	887b      	ldrh	r3, [r7, #2]
 800be48:	4013      	ands	r3, r2
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d004      	beq.n	800be58 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800be4e:	887b      	ldrh	r3, [r7, #2]
 800be50:	041a      	lsls	r2, r3, #16
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800be56:	e002      	b.n	800be5e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800be58:	887a      	ldrh	r2, [r7, #2]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	619a      	str	r2, [r3, #24]
}
 800be5e:	bf00      	nop
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
	...

0800be6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	4603      	mov	r3, r0
 800be74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800be76:	4b08      	ldr	r3, [pc, #32]	; (800be98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800be78:	695a      	ldr	r2, [r3, #20]
 800be7a:	88fb      	ldrh	r3, [r7, #6]
 800be7c:	4013      	ands	r3, r2
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d006      	beq.n	800be90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800be82:	4a05      	ldr	r2, [pc, #20]	; (800be98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800be84:	88fb      	ldrh	r3, [r7, #6]
 800be86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800be88:	88fb      	ldrh	r3, [r7, #6]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fd f96c 	bl	8009168 <HAL_GPIO_EXTI_Callback>
  }
}
 800be90:	bf00      	nop
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	40013c00 	.word	0x40013c00

0800be9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d101      	bne.n	800beae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	e07f      	b.n	800bfae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d106      	bne.n	800bec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f7fe fe46 	bl	800ab54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2224      	movs	r2, #36	; 0x24
 800becc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f022 0201 	bic.w	r2, r2, #1
 800bede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800beec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	689a      	ldr	r2, [r3, #8]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800befc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d107      	bne.n	800bf16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	689a      	ldr	r2, [r3, #8]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf12:	609a      	str	r2, [r3, #8]
 800bf14:	e006      	b.n	800bf24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	689a      	ldr	r2, [r3, #8]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bf22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d104      	bne.n	800bf36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	6859      	ldr	r1, [r3, #4]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	4b1d      	ldr	r3, [pc, #116]	; (800bfb8 <HAL_I2C_Init+0x11c>)
 800bf42:	430b      	orrs	r3, r1
 800bf44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68da      	ldr	r2, [r3, #12]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bf54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	691a      	ldr	r2, [r3, #16]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	ea42 0103 	orr.w	r1, r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	699b      	ldr	r3, [r3, #24]
 800bf66:	021a      	lsls	r2, r3, #8
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	430a      	orrs	r2, r1
 800bf6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	69d9      	ldr	r1, [r3, #28]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6a1a      	ldr	r2, [r3, #32]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f042 0201 	orr.w	r2, r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2220      	movs	r2, #32
 800bf9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	02008000 	.word	0x02008000

0800bfbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b088      	sub	sp, #32
 800bfc0:	af02      	add	r7, sp, #8
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	4608      	mov	r0, r1
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	461a      	mov	r2, r3
 800bfca:	4603      	mov	r3, r0
 800bfcc:	817b      	strh	r3, [r7, #10]
 800bfce:	460b      	mov	r3, r1
 800bfd0:	813b      	strh	r3, [r7, #8]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b20      	cmp	r3, #32
 800bfe0:	f040 80fd 	bne.w	800c1de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d002      	beq.n	800bff0 <HAL_I2C_Mem_Read+0x34>
 800bfea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d105      	bne.n	800bffc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bff6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	e0f1      	b.n	800c1e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c002:	2b01      	cmp	r3, #1
 800c004:	d101      	bne.n	800c00a <HAL_I2C_Mem_Read+0x4e>
 800c006:	2302      	movs	r3, #2
 800c008:	e0ea      	b.n	800c1e0 <HAL_I2C_Mem_Read+0x224>
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2201      	movs	r2, #1
 800c00e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c012:	f7ff f87f 	bl	800b114 <HAL_GetTick>
 800c016:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	2319      	movs	r3, #25
 800c01e:	2201      	movs	r2, #1
 800c020:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f000 fde7 	bl	800cbf8 <I2C_WaitOnFlagUntilTimeout>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d001      	beq.n	800c034 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e0d5      	b.n	800c1e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2222      	movs	r2, #34	; 0x22
 800c038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2240      	movs	r2, #64	; 0x40
 800c040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6a3a      	ldr	r2, [r7, #32]
 800c04e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c054:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c05c:	88f8      	ldrh	r0, [r7, #6]
 800c05e:	893a      	ldrh	r2, [r7, #8]
 800c060:	8979      	ldrh	r1, [r7, #10]
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	9301      	str	r3, [sp, #4]
 800c066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	4603      	mov	r3, r0
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f000 fa7d 	bl	800c56c <I2C_RequestMemoryRead>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2200      	movs	r2, #0
 800c07c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	e0ad      	b.n	800c1e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c088:	b29b      	uxth	r3, r3
 800c08a:	2bff      	cmp	r3, #255	; 0xff
 800c08c:	d90e      	bls.n	800c0ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	22ff      	movs	r2, #255	; 0xff
 800c092:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c098:	b2da      	uxtb	r2, r3
 800c09a:	8979      	ldrh	r1, [r7, #10]
 800c09c:	4b52      	ldr	r3, [pc, #328]	; (800c1e8 <HAL_I2C_Mem_Read+0x22c>)
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f000 fec9 	bl	800ce3c <I2C_TransferConfig>
 800c0aa:	e00f      	b.n	800c0cc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0ba:	b2da      	uxtb	r2, r3
 800c0bc:	8979      	ldrh	r1, [r7, #10]
 800c0be:	4b4a      	ldr	r3, [pc, #296]	; (800c1e8 <HAL_I2C_Mem_Read+0x22c>)
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f000 feb8 	bl	800ce3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	2104      	movs	r1, #4
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f000 fd8e 	bl	800cbf8 <I2C_WaitOnFlagUntilTimeout>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d001      	beq.n	800c0e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e07c      	b.n	800c1e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f0:	b2d2      	uxtb	r2, r2
 800c0f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f8:	1c5a      	adds	r2, r3, #1
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c102:	3b01      	subs	r3, #1
 800c104:	b29a      	uxth	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c10e:	b29b      	uxth	r3, r3
 800c110:	3b01      	subs	r3, #1
 800c112:	b29a      	uxth	r2, r3
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d034      	beq.n	800c18c <HAL_I2C_Mem_Read+0x1d0>
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c126:	2b00      	cmp	r3, #0
 800c128:	d130      	bne.n	800c18c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c130:	2200      	movs	r2, #0
 800c132:	2180      	movs	r1, #128	; 0x80
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f000 fd5f 	bl	800cbf8 <I2C_WaitOnFlagUntilTimeout>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d001      	beq.n	800c144 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	e04d      	b.n	800c1e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c148:	b29b      	uxth	r3, r3
 800c14a:	2bff      	cmp	r3, #255	; 0xff
 800c14c:	d90e      	bls.n	800c16c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	22ff      	movs	r2, #255	; 0xff
 800c152:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	8979      	ldrh	r1, [r7, #10]
 800c15c:	2300      	movs	r3, #0
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f000 fe69 	bl	800ce3c <I2C_TransferConfig>
 800c16a:	e00f      	b.n	800c18c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c170:	b29a      	uxth	r2, r3
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c17a:	b2da      	uxtb	r2, r3
 800c17c:	8979      	ldrh	r1, [r7, #10]
 800c17e:	2300      	movs	r3, #0
 800c180:	9300      	str	r3, [sp, #0]
 800c182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f000 fe58 	bl	800ce3c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c190:	b29b      	uxth	r3, r3
 800c192:	2b00      	cmp	r3, #0
 800c194:	d19a      	bne.n	800c0cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c196:	697a      	ldr	r2, [r7, #20]
 800c198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f000 fdac 	bl	800ccf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d001      	beq.n	800c1aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e01a      	b.n	800c1e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2220      	movs	r2, #32
 800c1b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	6859      	ldr	r1, [r3, #4]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	4b0b      	ldr	r3, [pc, #44]	; (800c1ec <HAL_I2C_Mem_Read+0x230>)
 800c1be:	400b      	ands	r3, r1
 800c1c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2220      	movs	r2, #32
 800c1c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	e000      	b.n	800c1e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c1de:	2302      	movs	r3, #2
  }
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	80002400 	.word	0x80002400
 800c1ec:	fe00e800 	.word	0xfe00e800

0800c1f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	699b      	ldr	r3, [r3, #24]
 800c1fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d005      	beq.n	800c21c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	68f9      	ldr	r1, [r7, #12]
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	4798      	blx	r3
  }
}
 800c21c:	bf00      	nop
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b086      	sub	sp, #24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	699b      	ldr	r3, [r3, #24]
 800c232:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	0a1b      	lsrs	r3, r3, #8
 800c240:	f003 0301 	and.w	r3, r3, #1
 800c244:	2b00      	cmp	r3, #0
 800c246:	d010      	beq.n	800c26a <HAL_I2C_ER_IRQHandler+0x46>
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	09db      	lsrs	r3, r3, #7
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00a      	beq.n	800c26a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c258:	f043 0201 	orr.w	r2, r3, #1
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c268:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	0a9b      	lsrs	r3, r3, #10
 800c26e:	f003 0301 	and.w	r3, r3, #1
 800c272:	2b00      	cmp	r3, #0
 800c274:	d010      	beq.n	800c298 <HAL_I2C_ER_IRQHandler+0x74>
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	09db      	lsrs	r3, r3, #7
 800c27a:	f003 0301 	and.w	r3, r3, #1
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00a      	beq.n	800c298 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c286:	f043 0208 	orr.w	r2, r3, #8
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c296:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	0a5b      	lsrs	r3, r3, #9
 800c29c:	f003 0301 	and.w	r3, r3, #1
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d010      	beq.n	800c2c6 <HAL_I2C_ER_IRQHandler+0xa2>
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	09db      	lsrs	r3, r3, #7
 800c2a8:	f003 0301 	and.w	r3, r3, #1
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00a      	beq.n	800c2c6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2b4:	f043 0202 	orr.w	r2, r3, #2
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2c4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f003 030b 	and.w	r3, r3, #11
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d003      	beq.n	800c2de <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800c2d6:	68f9      	ldr	r1, [r7, #12]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fb85 	bl	800c9e8 <I2C_ITError>
  }
}
 800c2de:	bf00      	nop
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2e6:	b480      	push	{r7}
 800c2e8:	b083      	sub	sp, #12
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c2ee:	bf00      	nop
 800c2f0:	370c      	adds	r7, #12
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr

0800c2fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2fa:	b480      	push	{r7}
 800c2fc:	b083      	sub	sp, #12
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c302:	bf00      	nop
 800c304:	370c      	adds	r7, #12
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c30e:	b480      	push	{r7}
 800c310:	b083      	sub	sp, #12
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	460b      	mov	r3, r1
 800c318:	70fb      	strb	r3, [r7, #3]
 800c31a:	4613      	mov	r3, r2
 800c31c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c31e:	bf00      	nop
 800c320:	370c      	adds	r7, #12
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr

0800c32a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c32a:	b480      	push	{r7}
 800c32c:	b083      	sub	sp, #12
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c332:	bf00      	nop
 800c334:	370c      	adds	r7, #12
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr

0800c33e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c33e:	b480      	push	{r7}
 800c340:	b083      	sub	sp, #12
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c346:	bf00      	nop
 800c348:	370c      	adds	r7, #12
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c35a:	bf00      	nop
 800c35c:	370c      	adds	r7, #12
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr

0800c366 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b086      	sub	sp, #24
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	60b9      	str	r1, [r7, #8]
 800c370:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c376:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c382:	2b01      	cmp	r3, #1
 800c384:	d101      	bne.n	800c38a <I2C_Slave_ISR_IT+0x24>
 800c386:	2302      	movs	r3, #2
 800c388:	e0ec      	b.n	800c564 <I2C_Slave_ISR_IT+0x1fe>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2201      	movs	r2, #1
 800c38e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	095b      	lsrs	r3, r3, #5
 800c396:	f003 0301 	and.w	r3, r3, #1
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d009      	beq.n	800c3b2 <I2C_Slave_ISR_IT+0x4c>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	095b      	lsrs	r3, r3, #5
 800c3a2:	f003 0301 	and.w	r3, r3, #1
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d003      	beq.n	800c3b2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c3aa:	6939      	ldr	r1, [r7, #16]
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f000 f9f1 	bl	800c794 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	091b      	lsrs	r3, r3, #4
 800c3b6:	f003 0301 	and.w	r3, r3, #1
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d04d      	beq.n	800c45a <I2C_Slave_ISR_IT+0xf4>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	091b      	lsrs	r3, r3, #4
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d047      	beq.n	800c45a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d128      	bne.n	800c426 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	2b28      	cmp	r3, #40	; 0x28
 800c3de:	d108      	bne.n	800c3f2 <I2C_Slave_ISR_IT+0x8c>
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3e6:	d104      	bne.n	800c3f2 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c3e8:	6939      	ldr	r1, [r7, #16]
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f000 faa8 	bl	800c940 <I2C_ITListenCplt>
 800c3f0:	e032      	b.n	800c458 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	2b29      	cmp	r3, #41	; 0x29
 800c3fc:	d10e      	bne.n	800c41c <I2C_Slave_ISR_IT+0xb6>
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c404:	d00a      	beq.n	800c41c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2210      	movs	r2, #16
 800c40c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f000 fbaa 	bl	800cb68 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	f000 f97f 	bl	800c718 <I2C_ITSlaveSeqCplt>
 800c41a:	e01d      	b.n	800c458 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2210      	movs	r2, #16
 800c422:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c424:	e096      	b.n	800c554 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2210      	movs	r2, #16
 800c42c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c432:	f043 0204 	orr.w	r2, r3, #4
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d004      	beq.n	800c44a <I2C_Slave_ISR_IT+0xe4>
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c446:	f040 8085 	bne.w	800c554 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c44e:	4619      	mov	r1, r3
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f000 fac9 	bl	800c9e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c456:	e07d      	b.n	800c554 <I2C_Slave_ISR_IT+0x1ee>
 800c458:	e07c      	b.n	800c554 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	089b      	lsrs	r3, r3, #2
 800c45e:	f003 0301 	and.w	r3, r3, #1
 800c462:	2b00      	cmp	r3, #0
 800c464:	d030      	beq.n	800c4c8 <I2C_Slave_ISR_IT+0x162>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	089b      	lsrs	r3, r3, #2
 800c46a:	f003 0301 	and.w	r3, r3, #1
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d02a      	beq.n	800c4c8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c476:	b29b      	uxth	r3, r3
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d018      	beq.n	800c4ae <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c486:	b2d2      	uxtb	r2, r2
 800c488:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48e:	1c5a      	adds	r2, r3, #1
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c498:	3b01      	subs	r3, #1
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	b29a      	uxth	r2, r3
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d14f      	bne.n	800c558 <I2C_Slave_ISR_IT+0x1f2>
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c4be:	d04b      	beq.n	800c558 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f000 f929 	bl	800c718 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c4c6:	e047      	b.n	800c558 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	08db      	lsrs	r3, r3, #3
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00a      	beq.n	800c4ea <I2C_Slave_ISR_IT+0x184>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	08db      	lsrs	r3, r3, #3
 800c4d8:	f003 0301 	and.w	r3, r3, #1
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d004      	beq.n	800c4ea <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c4e0:	6939      	ldr	r1, [r7, #16]
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	f000 f896 	bl	800c614 <I2C_ITAddrCplt>
 800c4e8:	e037      	b.n	800c55a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	085b      	lsrs	r3, r3, #1
 800c4ee:	f003 0301 	and.w	r3, r3, #1
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d031      	beq.n	800c55a <I2C_Slave_ISR_IT+0x1f4>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	085b      	lsrs	r3, r3, #1
 800c4fa:	f003 0301 	and.w	r3, r3, #1
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d02b      	beq.n	800c55a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c506:	b29b      	uxth	r3, r3
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d018      	beq.n	800c53e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c510:	781a      	ldrb	r2, [r3, #0]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51c:	1c5a      	adds	r2, r3, #1
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c526:	b29b      	uxth	r3, r3
 800c528:	3b01      	subs	r3, #1
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c534:	3b01      	subs	r3, #1
 800c536:	b29a      	uxth	r2, r3
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	851a      	strh	r2, [r3, #40]	; 0x28
 800c53c:	e00d      	b.n	800c55a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c544:	d002      	beq.n	800c54c <I2C_Slave_ISR_IT+0x1e6>
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d106      	bne.n	800c55a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f000 f8e3 	bl	800c718 <I2C_ITSlaveSeqCplt>
 800c552:	e002      	b.n	800c55a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800c554:	bf00      	nop
 800c556:	e000      	b.n	800c55a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800c558:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3718      	adds	r7, #24
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af02      	add	r7, sp, #8
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	4608      	mov	r0, r1
 800c576:	4611      	mov	r1, r2
 800c578:	461a      	mov	r2, r3
 800c57a:	4603      	mov	r3, r0
 800c57c:	817b      	strh	r3, [r7, #10]
 800c57e:	460b      	mov	r3, r1
 800c580:	813b      	strh	r3, [r7, #8]
 800c582:	4613      	mov	r3, r2
 800c584:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c586:	88fb      	ldrh	r3, [r7, #6]
 800c588:	b2da      	uxtb	r2, r3
 800c58a:	8979      	ldrh	r1, [r7, #10]
 800c58c:	4b20      	ldr	r3, [pc, #128]	; (800c610 <I2C_RequestMemoryRead+0xa4>)
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	2300      	movs	r3, #0
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f000 fc52 	bl	800ce3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c598:	69fa      	ldr	r2, [r7, #28]
 800c59a:	69b9      	ldr	r1, [r7, #24]
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f000 fb6b 	bl	800cc78 <I2C_WaitOnTXISFlagUntilTimeout>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e02c      	b.n	800c606 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c5ac:	88fb      	ldrh	r3, [r7, #6]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d105      	bne.n	800c5be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c5b2:	893b      	ldrh	r3, [r7, #8]
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	629a      	str	r2, [r3, #40]	; 0x28
 800c5bc:	e015      	b.n	800c5ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c5be:	893b      	ldrh	r3, [r7, #8]
 800c5c0:	0a1b      	lsrs	r3, r3, #8
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	b2da      	uxtb	r2, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5cc:	69fa      	ldr	r2, [r7, #28]
 800c5ce:	69b9      	ldr	r1, [r7, #24]
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f000 fb51 	bl	800cc78 <I2C_WaitOnTXISFlagUntilTimeout>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d001      	beq.n	800c5e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e012      	b.n	800c606 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c5e0:	893b      	ldrh	r3, [r7, #8]
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	2140      	movs	r1, #64	; 0x40
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f000 faff 	bl	800cbf8 <I2C_WaitOnFlagUntilTimeout>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d001      	beq.n	800c604 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c600:	2301      	movs	r3, #1
 800c602:	e000      	b.n	800c606 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	80002000 	.word	0x80002000

0800c614 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c624:	b2db      	uxtb	r3, r3
 800c626:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c62a:	2b28      	cmp	r3, #40	; 0x28
 800c62c:	d168      	bne.n	800c700 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	0c1b      	lsrs	r3, r3, #16
 800c636:	b2db      	uxtb	r3, r3
 800c638:	f003 0301 	and.w	r3, r3, #1
 800c63c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	0c1b      	lsrs	r3, r3, #16
 800c646:	b29b      	uxth	r3, r3
 800c648:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c64c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	b29b      	uxth	r3, r3
 800c656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c65a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	b29b      	uxth	r3, r3
 800c664:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c668:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	2b02      	cmp	r3, #2
 800c670:	d137      	bne.n	800c6e2 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800c672:	897b      	ldrh	r3, [r7, #10]
 800c674:	09db      	lsrs	r3, r3, #7
 800c676:	b29a      	uxth	r2, r3
 800c678:	89bb      	ldrh	r3, [r7, #12]
 800c67a:	4053      	eors	r3, r2
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	f003 0306 	and.w	r3, r3, #6
 800c682:	2b00      	cmp	r3, #0
 800c684:	d11c      	bne.n	800c6c0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c686:	897b      	ldrh	r3, [r7, #10]
 800c688:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c68e:	1c5a      	adds	r2, r3, #1
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d139      	bne.n	800c710 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2208      	movs	r2, #8
 800c6a8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6b2:	89ba      	ldrh	r2, [r7, #12]
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7ff fe28 	bl	800c30e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c6be:	e027      	b.n	800c710 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800c6c0:	893b      	ldrh	r3, [r7, #8]
 800c6c2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6c4:	2104      	movs	r1, #4
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 fbe6 	bl	800ce98 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6d4:	89ba      	ldrh	r2, [r7, #12]
 800c6d6:	7bfb      	ldrb	r3, [r7, #15]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7ff fe17 	bl	800c30e <HAL_I2C_AddrCallback>
}
 800c6e0:	e016      	b.n	800c710 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6e2:	2104      	movs	r1, #4
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fbd7 	bl	800ce98 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6f2:	89ba      	ldrh	r2, [r7, #12]
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f7ff fe08 	bl	800c30e <HAL_I2C_AddrCallback>
}
 800c6fe:	e007      	b.n	800c710 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2208      	movs	r2, #8
 800c706:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c710:	bf00      	nop
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	2b29      	cmp	r3, #41	; 0x29
 800c732:	d112      	bne.n	800c75a <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2228      	movs	r2, #40	; 0x28
 800c738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2221      	movs	r2, #33	; 0x21
 800c740:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c742:	2101      	movs	r1, #1
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 fba7 	bl	800ce98 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f7ff fdc7 	bl	800c2e6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c758:	e017      	b.n	800c78a <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c760:	b2db      	uxtb	r3, r3
 800c762:	2b2a      	cmp	r3, #42	; 0x2a
 800c764:	d111      	bne.n	800c78a <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2228      	movs	r2, #40	; 0x28
 800c76a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2222      	movs	r2, #34	; 0x22
 800c772:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c774:	2102      	movs	r1, #2
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fb8e 	bl	800ce98 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7ff fdb8 	bl	800c2fa <HAL_I2C_SlaveRxCpltCallback>
}
 800c78a:	bf00      	nop
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
	...

0800c794 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2220      	movs	r2, #32
 800c7b0:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800c7b2:	2107      	movs	r1, #7
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 fb6f 	bl	800ce98 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	685a      	ldr	r2, [r3, #4]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c7c8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	6859      	ldr	r1, [r3, #4]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	4b58      	ldr	r3, [pc, #352]	; (800c938 <I2C_ITSlaveCplt+0x1a4>)
 800c7d6:	400b      	ands	r3, r1
 800c7d8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 f9c4 	bl	800cb68 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	0b9b      	lsrs	r3, r3, #14
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00b      	beq.n	800c804 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d018      	beq.n	800c826 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c802:	e010      	b.n	800c826 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	0bdb      	lsrs	r3, r3, #15
 800c808:	f003 0301 	and.w	r3, r3, #1
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00a      	beq.n	800c826 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c814:	2b00      	cmp	r3, #0
 800c816:	d006      	beq.n	800c826 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	b29a      	uxth	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	089b      	lsrs	r3, r3, #2
 800c82a:	f003 0301 	and.w	r3, r3, #1
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d020      	beq.n	800c874 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f023 0304 	bic.w	r3, r3, #4
 800c838:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c844:	b2d2      	uxtb	r2, r2
 800c846:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84c:	1c5a      	adds	r2, r3, #1
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00c      	beq.n	800c874 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c85e:	3b01      	subs	r3, #1
 800c860:	b29a      	uxth	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	3b01      	subs	r3, #1
 800c86e:	b29a      	uxth	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c878:	b29b      	uxth	r3, r3
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d005      	beq.n	800c88a <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c882:	f043 0204 	orr.w	r2, r3, #4
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d010      	beq.n	800c8c8 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 f89b 	bl	800c9e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b28      	cmp	r3, #40	; 0x28
 800c8bc:	d138      	bne.n	800c930 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c8be:	68f9      	ldr	r1, [r7, #12]
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 f83d 	bl	800c940 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c8c6:	e033      	b.n	800c930 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c8d0:	d011      	beq.n	800c8f6 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7ff ff20 	bl	800c718 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a18      	ldr	r2, [pc, #96]	; (800c93c <I2C_ITSlaveCplt+0x1a8>)
 800c8dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2220      	movs	r2, #32
 800c8e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7ff fd1b 	bl	800c32a <HAL_I2C_ListenCpltCallback>
}
 800c8f4:	e01c      	b.n	800c930 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	2b22      	cmp	r3, #34	; 0x22
 800c900:	d10b      	bne.n	800c91a <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2220      	movs	r2, #32
 800c906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f7ff fcf1 	bl	800c2fa <HAL_I2C_SlaveRxCpltCallback>
}
 800c918:	e00a      	b.n	800c930 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2220      	movs	r2, #32
 800c91e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7ff fcdb 	bl	800c2e6 <HAL_I2C_SlaveTxCpltCallback>
}
 800c930:	bf00      	nop
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	fe00e800 	.word	0xfe00e800
 800c93c:	ffff0000 	.word	0xffff0000

0800c940 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4a25      	ldr	r2, [pc, #148]	; (800c9e4 <I2C_ITListenCplt+0xa4>)
 800c94e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2220      	movs	r2, #32
 800c95a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	089b      	lsrs	r3, r3, #2
 800c970:	f003 0301 	and.w	r3, r3, #1
 800c974:	2b00      	cmp	r3, #0
 800c976:	d022      	beq.n	800c9be <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c982:	b2d2      	uxtb	r2, r2
 800c984:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c98a:	1c5a      	adds	r2, r3, #1
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c994:	2b00      	cmp	r3, #0
 800c996:	d012      	beq.n	800c9be <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c99c:	3b01      	subs	r3, #1
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9b6:	f043 0204 	orr.w	r2, r3, #4
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c9be:	2107      	movs	r1, #7
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fa69 	bl	800ce98 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2210      	movs	r2, #16
 800c9cc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7ff fca7 	bl	800c32a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c9dc:	bf00      	nop
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	ffff0000 	.word	0xffff0000

0800c9e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9f8:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a55      	ldr	r2, [pc, #340]	; (800cb5c <I2C_ITError+0x174>)
 800ca06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	431a      	orrs	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ca1a:	7bfb      	ldrb	r3, [r7, #15]
 800ca1c:	2b28      	cmp	r3, #40	; 0x28
 800ca1e:	d005      	beq.n	800ca2c <I2C_ITError+0x44>
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
 800ca22:	2b29      	cmp	r3, #41	; 0x29
 800ca24:	d002      	beq.n	800ca2c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ca26:	7bfb      	ldrb	r3, [r7, #15]
 800ca28:	2b2a      	cmp	r3, #42	; 0x2a
 800ca2a:	d10e      	bne.n	800ca4a <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ca2c:	2103      	movs	r1, #3
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 fa32 	bl	800ce98 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2228      	movs	r2, #40	; 0x28
 800ca38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a46      	ldr	r2, [pc, #280]	; (800cb60 <I2C_ITError+0x178>)
 800ca46:	635a      	str	r2, [r3, #52]	; 0x34
 800ca48:	e013      	b.n	800ca72 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ca4a:	2107      	movs	r1, #7
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 fa23 	bl	800ce98 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b60      	cmp	r3, #96	; 0x60
 800ca5c:	d003      	beq.n	800ca66 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2220      	movs	r2, #32
 800ca62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca80:	d123      	bne.n	800caca <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ca90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d05c      	beq.n	800cb54 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9e:	4a31      	ldr	r2, [pc, #196]	; (800cb64 <I2C_ITError+0x17c>)
 800caa0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caae:	4618      	mov	r0, r3
 800cab0:	f7fe fd5c 	bl	800b56c <HAL_DMA_Abort_IT>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d04c      	beq.n	800cb54 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cabe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cac4:	4610      	mov	r0, r2
 800cac6:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cac8:	e044      	b.n	800cb54 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cad8:	d123      	bne.n	800cb22 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cae8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d030      	beq.n	800cb54 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf6:	4a1b      	ldr	r2, [pc, #108]	; (800cb64 <I2C_ITError+0x17c>)
 800caf8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fe fd30 	bl	800b56c <HAL_DMA_Abort_IT>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d020      	beq.n	800cb54 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cb1c:	4610      	mov	r0, r2
 800cb1e:	4798      	blx	r3
}
 800cb20:	e018      	b.n	800cb54 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	2b60      	cmp	r3, #96	; 0x60
 800cb2c:	d10b      	bne.n	800cb46 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2220      	movs	r2, #32
 800cb32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7ff fc07 	bl	800c352 <HAL_I2C_AbortCpltCallback>
}
 800cb44:	e006      	b.n	800cb54 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7ff fbf5 	bl	800c33e <HAL_I2C_ErrorCallback>
}
 800cb54:	bf00      	nop
 800cb56:	3710      	adds	r7, #16
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	ffff0000 	.word	0xffff0000
 800cb60:	0800c367 	.word	0x0800c367
 800cb64:	0800cbb1 	.word	0x0800cbb1

0800cb68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	699b      	ldr	r3, [r3, #24]
 800cb76:	f003 0302 	and.w	r3, r3, #2
 800cb7a:	2b02      	cmp	r3, #2
 800cb7c:	d103      	bne.n	800cb86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2200      	movs	r2, #0
 800cb84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	f003 0301 	and.w	r3, r3, #1
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d007      	beq.n	800cba4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	699a      	ldr	r2, [r3, #24]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f042 0201 	orr.w	r2, r2, #1
 800cba2:	619a      	str	r2, [r3, #24]
  }
}
 800cba4:	bf00      	nop
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbbc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbca:	2200      	movs	r2, #0
 800cbcc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	2b60      	cmp	r3, #96	; 0x60
 800cbd8:	d107      	bne.n	800cbea <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2220      	movs	r2, #32
 800cbde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f7ff fbb5 	bl	800c352 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cbe8:	e002      	b.n	800cbf0 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f7ff fba7 	bl	800c33e <HAL_I2C_ErrorCallback>
}
 800cbf0:	bf00      	nop
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	603b      	str	r3, [r7, #0]
 800cc04:	4613      	mov	r3, r2
 800cc06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cc08:	e022      	b.n	800cc50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc10:	d01e      	beq.n	800cc50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc12:	f7fe fa7f 	bl	800b114 <HAL_GetTick>
 800cc16:	4602      	mov	r2, r0
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	683a      	ldr	r2, [r7, #0]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d302      	bcc.n	800cc28 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d113      	bne.n	800cc50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc2c:	f043 0220 	orr.w	r2, r3, #32
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2220      	movs	r2, #32
 800cc38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e00f      	b.n	800cc70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	699a      	ldr	r2, [r3, #24]
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	4013      	ands	r3, r2
 800cc5a:	68ba      	ldr	r2, [r7, #8]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	bf0c      	ite	eq
 800cc60:	2301      	moveq	r3, #1
 800cc62:	2300      	movne	r3, #0
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	461a      	mov	r2, r3
 800cc68:	79fb      	ldrb	r3, [r7, #7]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d0cd      	beq.n	800cc0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cc6e:	2300      	movs	r3, #0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cc84:	e02c      	b.n	800cce0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	68b9      	ldr	r1, [r7, #8]
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f000 f870 	bl	800cd70 <I2C_IsAcknowledgeFailed>
 800cc90:	4603      	mov	r3, r0
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d001      	beq.n	800cc9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cc96:	2301      	movs	r3, #1
 800cc98:	e02a      	b.n	800ccf0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca0:	d01e      	beq.n	800cce0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cca2:	f7fe fa37 	bl	800b114 <HAL_GetTick>
 800cca6:	4602      	mov	r2, r0
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	1ad3      	subs	r3, r2, r3
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d302      	bcc.n	800ccb8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d113      	bne.n	800cce0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccbc:	f043 0220 	orr.w	r2, r3, #32
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2220      	movs	r2, #32
 800ccc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e007      	b.n	800ccf0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	699b      	ldr	r3, [r3, #24]
 800cce6:	f003 0302 	and.w	r3, r3, #2
 800ccea:	2b02      	cmp	r3, #2
 800ccec:	d1cb      	bne.n	800cc86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd04:	e028      	b.n	800cd58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	68b9      	ldr	r1, [r7, #8]
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f000 f830 	bl	800cd70 <I2C_IsAcknowledgeFailed>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d001      	beq.n	800cd1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cd16:	2301      	movs	r3, #1
 800cd18:	e026      	b.n	800cd68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd1a:	f7fe f9fb 	bl	800b114 <HAL_GetTick>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d302      	bcc.n	800cd30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d113      	bne.n	800cd58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd34:	f043 0220 	orr.w	r2, r3, #32
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2220      	movs	r2, #32
 800cd40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2200      	movs	r2, #0
 800cd48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800cd54:	2301      	movs	r3, #1
 800cd56:	e007      	b.n	800cd68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	f003 0320 	and.w	r3, r3, #32
 800cd62:	2b20      	cmp	r3, #32
 800cd64:	d1cf      	bne.n	800cd06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cd66:	2300      	movs	r3, #0
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	699b      	ldr	r3, [r3, #24]
 800cd82:	f003 0310 	and.w	r3, r3, #16
 800cd86:	2b10      	cmp	r3, #16
 800cd88:	d151      	bne.n	800ce2e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd8a:	e022      	b.n	800cdd2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd92:	d01e      	beq.n	800cdd2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd94:	f7fe f9be 	bl	800b114 <HAL_GetTick>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d302      	bcc.n	800cdaa <I2C_IsAcknowledgeFailed+0x3a>
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d113      	bne.n	800cdd2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdae:	f043 0220 	orr.w	r2, r3, #32
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2220      	movs	r2, #32
 800cdba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e02e      	b.n	800ce30 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	699b      	ldr	r3, [r3, #24]
 800cdd8:	f003 0320 	and.w	r3, r3, #32
 800cddc:	2b20      	cmp	r3, #32
 800cdde:	d1d5      	bne.n	800cd8c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2210      	movs	r2, #16
 800cde6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2220      	movs	r2, #32
 800cdee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f7ff feb9 	bl	800cb68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6859      	ldr	r1, [r3, #4]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	4b0d      	ldr	r3, [pc, #52]	; (800ce38 <I2C_IsAcknowledgeFailed+0xc8>)
 800ce02:	400b      	ands	r3, r1
 800ce04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce0a:	f043 0204 	orr.w	r2, r3, #4
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2220      	movs	r2, #32
 800ce16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	e000      	b.n	800ce30 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800ce2e:	2300      	movs	r3, #0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	fe00e800 	.word	0xfe00e800

0800ce3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b085      	sub	sp, #20
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	607b      	str	r3, [r7, #4]
 800ce46:	460b      	mov	r3, r1
 800ce48:	817b      	strh	r3, [r7, #10]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	685a      	ldr	r2, [r3, #4]
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	0d5b      	lsrs	r3, r3, #21
 800ce58:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ce5c:	4b0d      	ldr	r3, [pc, #52]	; (800ce94 <I2C_TransferConfig+0x58>)
 800ce5e:	430b      	orrs	r3, r1
 800ce60:	43db      	mvns	r3, r3
 800ce62:	ea02 0103 	and.w	r1, r2, r3
 800ce66:	897b      	ldrh	r3, [r7, #10]
 800ce68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ce6c:	7a7b      	ldrb	r3, [r7, #9]
 800ce6e:	041b      	lsls	r3, r3, #16
 800ce70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce74:	431a      	orrs	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	431a      	orrs	r2, r3
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	431a      	orrs	r2, r3
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	430a      	orrs	r2, r1
 800ce84:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ce86:	bf00      	nop
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	03ff63ff 	.word	0x03ff63ff

0800ce98 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	460b      	mov	r3, r1
 800cea2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800cea4:	2300      	movs	r3, #0
 800cea6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800cea8:	887b      	ldrh	r3, [r7, #2]
 800ceaa:	f003 0301 	and.w	r3, r3, #1
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00f      	beq.n	800ced2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800ceb8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cec6:	2b28      	cmp	r3, #40	; 0x28
 800cec8:	d003      	beq.n	800ced2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800ced0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ced2:	887b      	ldrh	r3, [r7, #2]
 800ced4:	f003 0302 	and.w	r3, r3, #2
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00f      	beq.n	800cefc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800cee2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cef0:	2b28      	cmp	r3, #40	; 0x28
 800cef2:	d003      	beq.n	800cefc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cefa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cefc:	887b      	ldrh	r3, [r7, #2]
 800cefe:	f003 0304 	and.w	r3, r3, #4
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d003      	beq.n	800cf0e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cf0c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800cf0e:	887b      	ldrh	r3, [r7, #2]
 800cf10:	f003 0311 	and.w	r3, r3, #17
 800cf14:	2b11      	cmp	r3, #17
 800cf16:	d103      	bne.n	800cf20 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800cf1e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800cf20:	887b      	ldrh	r3, [r7, #2]
 800cf22:	f003 0312 	and.w	r3, r3, #18
 800cf26:	2b12      	cmp	r3, #18
 800cf28:	d103      	bne.n	800cf32 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f043 0320 	orr.w	r3, r3, #32
 800cf30:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800cf32:	887b      	ldrh	r3, [r7, #2]
 800cf34:	f003 0312 	and.w	r3, r3, #18
 800cf38:	2b12      	cmp	r3, #18
 800cf3a:	d103      	bne.n	800cf44 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf42:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6819      	ldr	r1, [r3, #0]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	43da      	mvns	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	400a      	ands	r2, r1
 800cf54:	601a      	str	r2, [r3, #0]
}
 800cf56:	bf00      	nop
 800cf58:	3714      	adds	r7, #20
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr

0800cf62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cf62:	b480      	push	{r7}
 800cf64:	b083      	sub	sp, #12
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
 800cf6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	2b20      	cmp	r3, #32
 800cf76:	d138      	bne.n	800cfea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d101      	bne.n	800cf86 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cf82:	2302      	movs	r3, #2
 800cf84:	e032      	b.n	800cfec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2224      	movs	r2, #36	; 0x24
 800cf92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f022 0201 	bic.w	r2, r2, #1
 800cfa4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cfb4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	6819      	ldr	r1, [r3, #0]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	430a      	orrs	r2, r1
 800cfc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f042 0201 	orr.w	r2, r2, #1
 800cfd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2220      	movs	r2, #32
 800cfda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	e000      	b.n	800cfec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cfea:	2302      	movs	r3, #2
  }
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	2b20      	cmp	r3, #32
 800d00c:	d139      	bne.n	800d082 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d014:	2b01      	cmp	r3, #1
 800d016:	d101      	bne.n	800d01c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d018:	2302      	movs	r3, #2
 800d01a:	e033      	b.n	800d084 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2201      	movs	r2, #1
 800d020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2224      	movs	r2, #36	; 0x24
 800d028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f022 0201 	bic.w	r2, r2, #1
 800d03a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d04a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	021b      	lsls	r3, r3, #8
 800d050:	68fa      	ldr	r2, [r7, #12]
 800d052:	4313      	orrs	r3, r2
 800d054:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f042 0201 	orr.w	r2, r2, #1
 800d06c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2220      	movs	r2, #32
 800d072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	e000      	b.n	800d084 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d082:	2302      	movs	r3, #2
  }
}
 800d084:	4618      	mov	r0, r3
 800d086:	3714      	adds	r7, #20
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d09a:	4b23      	ldr	r3, [pc, #140]	; (800d128 <HAL_PWREx_EnableOverDrive+0x98>)
 800d09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d09e:	4a22      	ldr	r2, [pc, #136]	; (800d128 <HAL_PWREx_EnableOverDrive+0x98>)
 800d0a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0a4:	6413      	str	r3, [r2, #64]	; 0x40
 800d0a6:	4b20      	ldr	r3, [pc, #128]	; (800d128 <HAL_PWREx_EnableOverDrive+0x98>)
 800d0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0ae:	603b      	str	r3, [r7, #0]
 800d0b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d0b2:	4b1e      	ldr	r3, [pc, #120]	; (800d12c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a1d      	ldr	r2, [pc, #116]	; (800d12c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d0b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d0bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d0be:	f7fe f829 	bl	800b114 <HAL_GetTick>
 800d0c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d0c4:	e009      	b.n	800d0da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d0c6:	f7fe f825 	bl	800b114 <HAL_GetTick>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0d4:	d901      	bls.n	800d0da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d0d6:	2303      	movs	r3, #3
 800d0d8:	e022      	b.n	800d120 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d0da:	4b14      	ldr	r3, [pc, #80]	; (800d12c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0e6:	d1ee      	bne.n	800d0c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d0e8:	4b10      	ldr	r3, [pc, #64]	; (800d12c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a0f      	ldr	r2, [pc, #60]	; (800d12c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d0ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d0f4:	f7fe f80e 	bl	800b114 <HAL_GetTick>
 800d0f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d0fa:	e009      	b.n	800d110 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d0fc:	f7fe f80a 	bl	800b114 <HAL_GetTick>
 800d100:	4602      	mov	r2, r0
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d10a:	d901      	bls.n	800d110 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d10c:	2303      	movs	r3, #3
 800d10e:	e007      	b.n	800d120 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d110:	4b06      	ldr	r3, [pc, #24]	; (800d12c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d11c:	d1ee      	bne.n	800d0fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d11e:	2300      	movs	r3, #0
}
 800d120:	4618      	mov	r0, r3
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	40023800 	.word	0x40023800
 800d12c:	40007000 	.word	0x40007000

0800d130 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d138:	2300      	movs	r3, #0
 800d13a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d101      	bne.n	800d146 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	e29b      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f003 0301 	and.w	r3, r3, #1
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f000 8087 	beq.w	800d262 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d154:	4b96      	ldr	r3, [pc, #600]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	f003 030c 	and.w	r3, r3, #12
 800d15c:	2b04      	cmp	r3, #4
 800d15e:	d00c      	beq.n	800d17a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d160:	4b93      	ldr	r3, [pc, #588]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	f003 030c 	and.w	r3, r3, #12
 800d168:	2b08      	cmp	r3, #8
 800d16a:	d112      	bne.n	800d192 <HAL_RCC_OscConfig+0x62>
 800d16c:	4b90      	ldr	r3, [pc, #576]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d178:	d10b      	bne.n	800d192 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d17a:	4b8d      	ldr	r3, [pc, #564]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d182:	2b00      	cmp	r3, #0
 800d184:	d06c      	beq.n	800d260 <HAL_RCC_OscConfig+0x130>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d168      	bne.n	800d260 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d18e:	2301      	movs	r3, #1
 800d190:	e275      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d19a:	d106      	bne.n	800d1aa <HAL_RCC_OscConfig+0x7a>
 800d19c:	4b84      	ldr	r3, [pc, #528]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a83      	ldr	r2, [pc, #524]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d1a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1a6:	6013      	str	r3, [r2, #0]
 800d1a8:	e02e      	b.n	800d208 <HAL_RCC_OscConfig+0xd8>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10c      	bne.n	800d1cc <HAL_RCC_OscConfig+0x9c>
 800d1b2:	4b7f      	ldr	r3, [pc, #508]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a7e      	ldr	r2, [pc, #504]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d1b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1bc:	6013      	str	r3, [r2, #0]
 800d1be:	4b7c      	ldr	r3, [pc, #496]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a7b      	ldr	r2, [pc, #492]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d1c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1c8:	6013      	str	r3, [r2, #0]
 800d1ca:	e01d      	b.n	800d208 <HAL_RCC_OscConfig+0xd8>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d1d4:	d10c      	bne.n	800d1f0 <HAL_RCC_OscConfig+0xc0>
 800d1d6:	4b76      	ldr	r3, [pc, #472]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a75      	ldr	r2, [pc, #468]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d1dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d1e0:	6013      	str	r3, [r2, #0]
 800d1e2:	4b73      	ldr	r3, [pc, #460]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a72      	ldr	r2, [pc, #456]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d1e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1ec:	6013      	str	r3, [r2, #0]
 800d1ee:	e00b      	b.n	800d208 <HAL_RCC_OscConfig+0xd8>
 800d1f0:	4b6f      	ldr	r3, [pc, #444]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a6e      	ldr	r2, [pc, #440]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d1f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1fa:	6013      	str	r3, [r2, #0]
 800d1fc:	4b6c      	ldr	r3, [pc, #432]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a6b      	ldr	r2, [pc, #428]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d013      	beq.n	800d238 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d210:	f7fd ff80 	bl	800b114 <HAL_GetTick>
 800d214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d216:	e008      	b.n	800d22a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d218:	f7fd ff7c 	bl	800b114 <HAL_GetTick>
 800d21c:	4602      	mov	r2, r0
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	2b64      	cmp	r3, #100	; 0x64
 800d224:	d901      	bls.n	800d22a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d226:	2303      	movs	r3, #3
 800d228:	e229      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d22a:	4b61      	ldr	r3, [pc, #388]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d232:	2b00      	cmp	r3, #0
 800d234:	d0f0      	beq.n	800d218 <HAL_RCC_OscConfig+0xe8>
 800d236:	e014      	b.n	800d262 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d238:	f7fd ff6c 	bl	800b114 <HAL_GetTick>
 800d23c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d23e:	e008      	b.n	800d252 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d240:	f7fd ff68 	bl	800b114 <HAL_GetTick>
 800d244:	4602      	mov	r2, r0
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	1ad3      	subs	r3, r2, r3
 800d24a:	2b64      	cmp	r3, #100	; 0x64
 800d24c:	d901      	bls.n	800d252 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d24e:	2303      	movs	r3, #3
 800d250:	e215      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d252:	4b57      	ldr	r3, [pc, #348]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1f0      	bne.n	800d240 <HAL_RCC_OscConfig+0x110>
 800d25e:	e000      	b.n	800d262 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f003 0302 	and.w	r3, r3, #2
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d069      	beq.n	800d342 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d26e:	4b50      	ldr	r3, [pc, #320]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	f003 030c 	and.w	r3, r3, #12
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00b      	beq.n	800d292 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d27a:	4b4d      	ldr	r3, [pc, #308]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	f003 030c 	and.w	r3, r3, #12
 800d282:	2b08      	cmp	r3, #8
 800d284:	d11c      	bne.n	800d2c0 <HAL_RCC_OscConfig+0x190>
 800d286:	4b4a      	ldr	r3, [pc, #296]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d116      	bne.n	800d2c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d292:	4b47      	ldr	r3, [pc, #284]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d005      	beq.n	800d2aa <HAL_RCC_OscConfig+0x17a>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d001      	beq.n	800d2aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e1e9      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2aa:	4b41      	ldr	r3, [pc, #260]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	00db      	lsls	r3, r3, #3
 800d2b8:	493d      	ldr	r1, [pc, #244]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d2be:	e040      	b.n	800d342 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d023      	beq.n	800d310 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d2c8:	4b39      	ldr	r3, [pc, #228]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a38      	ldr	r2, [pc, #224]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d2ce:	f043 0301 	orr.w	r3, r3, #1
 800d2d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2d4:	f7fd ff1e 	bl	800b114 <HAL_GetTick>
 800d2d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d2da:	e008      	b.n	800d2ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d2dc:	f7fd ff1a 	bl	800b114 <HAL_GetTick>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	2b02      	cmp	r3, #2
 800d2e8:	d901      	bls.n	800d2ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d2ea:	2303      	movs	r3, #3
 800d2ec:	e1c7      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d2ee:	4b30      	ldr	r3, [pc, #192]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f003 0302 	and.w	r3, r3, #2
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d0f0      	beq.n	800d2dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2fa:	4b2d      	ldr	r3, [pc, #180]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	00db      	lsls	r3, r3, #3
 800d308:	4929      	ldr	r1, [pc, #164]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d30a:	4313      	orrs	r3, r2
 800d30c:	600b      	str	r3, [r1, #0]
 800d30e:	e018      	b.n	800d342 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d310:	4b27      	ldr	r3, [pc, #156]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a26      	ldr	r2, [pc, #152]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d316:	f023 0301 	bic.w	r3, r3, #1
 800d31a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d31c:	f7fd fefa 	bl	800b114 <HAL_GetTick>
 800d320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d322:	e008      	b.n	800d336 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d324:	f7fd fef6 	bl	800b114 <HAL_GetTick>
 800d328:	4602      	mov	r2, r0
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	2b02      	cmp	r3, #2
 800d330:	d901      	bls.n	800d336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d332:	2303      	movs	r3, #3
 800d334:	e1a3      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d336:	4b1e      	ldr	r3, [pc, #120]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f003 0302 	and.w	r3, r3, #2
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1f0      	bne.n	800d324 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f003 0308 	and.w	r3, r3, #8
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d038      	beq.n	800d3c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d019      	beq.n	800d38a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d356:	4b16      	ldr	r3, [pc, #88]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d35a:	4a15      	ldr	r2, [pc, #84]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d35c:	f043 0301 	orr.w	r3, r3, #1
 800d360:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d362:	f7fd fed7 	bl	800b114 <HAL_GetTick>
 800d366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d368:	e008      	b.n	800d37c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d36a:	f7fd fed3 	bl	800b114 <HAL_GetTick>
 800d36e:	4602      	mov	r2, r0
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	1ad3      	subs	r3, r2, r3
 800d374:	2b02      	cmp	r3, #2
 800d376:	d901      	bls.n	800d37c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d378:	2303      	movs	r3, #3
 800d37a:	e180      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d37c:	4b0c      	ldr	r3, [pc, #48]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d37e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d380:	f003 0302 	and.w	r3, r3, #2
 800d384:	2b00      	cmp	r3, #0
 800d386:	d0f0      	beq.n	800d36a <HAL_RCC_OscConfig+0x23a>
 800d388:	e01a      	b.n	800d3c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d38a:	4b09      	ldr	r3, [pc, #36]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d38c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d38e:	4a08      	ldr	r2, [pc, #32]	; (800d3b0 <HAL_RCC_OscConfig+0x280>)
 800d390:	f023 0301 	bic.w	r3, r3, #1
 800d394:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d396:	f7fd febd 	bl	800b114 <HAL_GetTick>
 800d39a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d39c:	e00a      	b.n	800d3b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d39e:	f7fd feb9 	bl	800b114 <HAL_GetTick>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d903      	bls.n	800d3b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e166      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
 800d3b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d3b4:	4b92      	ldr	r3, [pc, #584]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d3b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3b8:	f003 0302 	and.w	r3, r3, #2
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1ee      	bne.n	800d39e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f003 0304 	and.w	r3, r3, #4
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	f000 80a4 	beq.w	800d516 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d3ce:	4b8c      	ldr	r3, [pc, #560]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d10d      	bne.n	800d3f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d3da:	4b89      	ldr	r3, [pc, #548]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3de:	4a88      	ldr	r2, [pc, #544]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d3e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3e4:	6413      	str	r3, [r2, #64]	; 0x40
 800d3e6:	4b86      	ldr	r3, [pc, #536]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3ee:	60bb      	str	r3, [r7, #8]
 800d3f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d3f6:	4b83      	ldr	r3, [pc, #524]	; (800d604 <HAL_RCC_OscConfig+0x4d4>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d118      	bne.n	800d434 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d402:	4b80      	ldr	r3, [pc, #512]	; (800d604 <HAL_RCC_OscConfig+0x4d4>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a7f      	ldr	r2, [pc, #508]	; (800d604 <HAL_RCC_OscConfig+0x4d4>)
 800d408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d40c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d40e:	f7fd fe81 	bl	800b114 <HAL_GetTick>
 800d412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d414:	e008      	b.n	800d428 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d416:	f7fd fe7d 	bl	800b114 <HAL_GetTick>
 800d41a:	4602      	mov	r2, r0
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	2b64      	cmp	r3, #100	; 0x64
 800d422:	d901      	bls.n	800d428 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d424:	2303      	movs	r3, #3
 800d426:	e12a      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d428:	4b76      	ldr	r3, [pc, #472]	; (800d604 <HAL_RCC_OscConfig+0x4d4>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d430:	2b00      	cmp	r3, #0
 800d432:	d0f0      	beq.n	800d416 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d106      	bne.n	800d44a <HAL_RCC_OscConfig+0x31a>
 800d43c:	4b70      	ldr	r3, [pc, #448]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d43e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d440:	4a6f      	ldr	r2, [pc, #444]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d442:	f043 0301 	orr.w	r3, r3, #1
 800d446:	6713      	str	r3, [r2, #112]	; 0x70
 800d448:	e02d      	b.n	800d4a6 <HAL_RCC_OscConfig+0x376>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10c      	bne.n	800d46c <HAL_RCC_OscConfig+0x33c>
 800d452:	4b6b      	ldr	r3, [pc, #428]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d456:	4a6a      	ldr	r2, [pc, #424]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d458:	f023 0301 	bic.w	r3, r3, #1
 800d45c:	6713      	str	r3, [r2, #112]	; 0x70
 800d45e:	4b68      	ldr	r3, [pc, #416]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d462:	4a67      	ldr	r2, [pc, #412]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d464:	f023 0304 	bic.w	r3, r3, #4
 800d468:	6713      	str	r3, [r2, #112]	; 0x70
 800d46a:	e01c      	b.n	800d4a6 <HAL_RCC_OscConfig+0x376>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	2b05      	cmp	r3, #5
 800d472:	d10c      	bne.n	800d48e <HAL_RCC_OscConfig+0x35e>
 800d474:	4b62      	ldr	r3, [pc, #392]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d478:	4a61      	ldr	r2, [pc, #388]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d47a:	f043 0304 	orr.w	r3, r3, #4
 800d47e:	6713      	str	r3, [r2, #112]	; 0x70
 800d480:	4b5f      	ldr	r3, [pc, #380]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d484:	4a5e      	ldr	r2, [pc, #376]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d486:	f043 0301 	orr.w	r3, r3, #1
 800d48a:	6713      	str	r3, [r2, #112]	; 0x70
 800d48c:	e00b      	b.n	800d4a6 <HAL_RCC_OscConfig+0x376>
 800d48e:	4b5c      	ldr	r3, [pc, #368]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d492:	4a5b      	ldr	r2, [pc, #364]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d494:	f023 0301 	bic.w	r3, r3, #1
 800d498:	6713      	str	r3, [r2, #112]	; 0x70
 800d49a:	4b59      	ldr	r3, [pc, #356]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d49e:	4a58      	ldr	r2, [pc, #352]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d4a0:	f023 0304 	bic.w	r3, r3, #4
 800d4a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d015      	beq.n	800d4da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4ae:	f7fd fe31 	bl	800b114 <HAL_GetTick>
 800d4b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d4b4:	e00a      	b.n	800d4cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4b6:	f7fd fe2d 	bl	800b114 <HAL_GetTick>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	1ad3      	subs	r3, r2, r3
 800d4c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d901      	bls.n	800d4cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d4c8:	2303      	movs	r3, #3
 800d4ca:	e0d8      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d4cc:	4b4c      	ldr	r3, [pc, #304]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d4ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4d0:	f003 0302 	and.w	r3, r3, #2
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d0ee      	beq.n	800d4b6 <HAL_RCC_OscConfig+0x386>
 800d4d8:	e014      	b.n	800d504 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4da:	f7fd fe1b 	bl	800b114 <HAL_GetTick>
 800d4de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d4e0:	e00a      	b.n	800d4f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4e2:	f7fd fe17 	bl	800b114 <HAL_GetTick>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	1ad3      	subs	r3, r2, r3
 800d4ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d901      	bls.n	800d4f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800d4f4:	2303      	movs	r3, #3
 800d4f6:	e0c2      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d4f8:	4b41      	ldr	r3, [pc, #260]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d4fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4fc:	f003 0302 	and.w	r3, r3, #2
 800d500:	2b00      	cmp	r3, #0
 800d502:	d1ee      	bne.n	800d4e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d504:	7dfb      	ldrb	r3, [r7, #23]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d105      	bne.n	800d516 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d50a:	4b3d      	ldr	r3, [pc, #244]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50e:	4a3c      	ldr	r2, [pc, #240]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d514:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	699b      	ldr	r3, [r3, #24]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f000 80ae 	beq.w	800d67c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d520:	4b37      	ldr	r3, [pc, #220]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d522:	689b      	ldr	r3, [r3, #8]
 800d524:	f003 030c 	and.w	r3, r3, #12
 800d528:	2b08      	cmp	r3, #8
 800d52a:	d06d      	beq.n	800d608 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	699b      	ldr	r3, [r3, #24]
 800d530:	2b02      	cmp	r3, #2
 800d532:	d14b      	bne.n	800d5cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d534:	4b32      	ldr	r3, [pc, #200]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a31      	ldr	r2, [pc, #196]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d53a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d53e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d540:	f7fd fde8 	bl	800b114 <HAL_GetTick>
 800d544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d546:	e008      	b.n	800d55a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d548:	f7fd fde4 	bl	800b114 <HAL_GetTick>
 800d54c:	4602      	mov	r2, r0
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	1ad3      	subs	r3, r2, r3
 800d552:	2b02      	cmp	r3, #2
 800d554:	d901      	bls.n	800d55a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800d556:	2303      	movs	r3, #3
 800d558:	e091      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d55a:	4b29      	ldr	r3, [pc, #164]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1f0      	bne.n	800d548 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	69da      	ldr	r2, [r3, #28]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6a1b      	ldr	r3, [r3, #32]
 800d56e:	431a      	orrs	r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d574:	019b      	lsls	r3, r3, #6
 800d576:	431a      	orrs	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57c:	085b      	lsrs	r3, r3, #1
 800d57e:	3b01      	subs	r3, #1
 800d580:	041b      	lsls	r3, r3, #16
 800d582:	431a      	orrs	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d588:	061b      	lsls	r3, r3, #24
 800d58a:	431a      	orrs	r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d590:	071b      	lsls	r3, r3, #28
 800d592:	491b      	ldr	r1, [pc, #108]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d594:	4313      	orrs	r3, r2
 800d596:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d598:	4b19      	ldr	r3, [pc, #100]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a18      	ldr	r2, [pc, #96]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d59e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d5a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5a4:	f7fd fdb6 	bl	800b114 <HAL_GetTick>
 800d5a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d5aa:	e008      	b.n	800d5be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d5ac:	f7fd fdb2 	bl	800b114 <HAL_GetTick>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d901      	bls.n	800d5be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	e05f      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d5be:	4b10      	ldr	r3, [pc, #64]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d0f0      	beq.n	800d5ac <HAL_RCC_OscConfig+0x47c>
 800d5ca:	e057      	b.n	800d67c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d5cc:	4b0c      	ldr	r3, [pc, #48]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a0b      	ldr	r2, [pc, #44]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d5d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d5d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5d8:	f7fd fd9c 	bl	800b114 <HAL_GetTick>
 800d5dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d5de:	e008      	b.n	800d5f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d5e0:	f7fd fd98 	bl	800b114 <HAL_GetTick>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	2b02      	cmp	r3, #2
 800d5ec:	d901      	bls.n	800d5f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	e045      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d5f2:	4b03      	ldr	r3, [pc, #12]	; (800d600 <HAL_RCC_OscConfig+0x4d0>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1f0      	bne.n	800d5e0 <HAL_RCC_OscConfig+0x4b0>
 800d5fe:	e03d      	b.n	800d67c <HAL_RCC_OscConfig+0x54c>
 800d600:	40023800 	.word	0x40023800
 800d604:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800d608:	4b1f      	ldr	r3, [pc, #124]	; (800d688 <HAL_RCC_OscConfig+0x558>)
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	699b      	ldr	r3, [r3, #24]
 800d612:	2b01      	cmp	r3, #1
 800d614:	d030      	beq.n	800d678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d620:	429a      	cmp	r2, r3
 800d622:	d129      	bne.n	800d678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d62e:	429a      	cmp	r2, r3
 800d630:	d122      	bne.n	800d678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d632:	68fa      	ldr	r2, [r7, #12]
 800d634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d638:	4013      	ands	r3, r2
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d63e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d640:	4293      	cmp	r3, r2
 800d642:	d119      	bne.n	800d678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d64e:	085b      	lsrs	r3, r3, #1
 800d650:	3b01      	subs	r3, #1
 800d652:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d654:	429a      	cmp	r2, r3
 800d656:	d10f      	bne.n	800d678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d662:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d664:	429a      	cmp	r2, r3
 800d666:	d107      	bne.n	800d678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d672:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d674:	429a      	cmp	r2, r3
 800d676:	d001      	beq.n	800d67c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800d678:	2301      	movs	r3, #1
 800d67a:	e000      	b.n	800d67e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800d67c:	2300      	movs	r3, #0
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3718      	adds	r7, #24
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	40023800 	.word	0x40023800

0800d68c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d696:	2300      	movs	r3, #0
 800d698:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e0d0      	b.n	800d846 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d6a4:	4b6a      	ldr	r3, [pc, #424]	; (800d850 <HAL_RCC_ClockConfig+0x1c4>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f003 030f 	and.w	r3, r3, #15
 800d6ac:	683a      	ldr	r2, [r7, #0]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d910      	bls.n	800d6d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6b2:	4b67      	ldr	r3, [pc, #412]	; (800d850 <HAL_RCC_ClockConfig+0x1c4>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f023 020f 	bic.w	r2, r3, #15
 800d6ba:	4965      	ldr	r1, [pc, #404]	; (800d850 <HAL_RCC_ClockConfig+0x1c4>)
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6c2:	4b63      	ldr	r3, [pc, #396]	; (800d850 <HAL_RCC_ClockConfig+0x1c4>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f003 030f 	and.w	r3, r3, #15
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d001      	beq.n	800d6d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	e0b8      	b.n	800d846 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f003 0302 	and.w	r3, r3, #2
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d020      	beq.n	800d722 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f003 0304 	and.w	r3, r3, #4
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d005      	beq.n	800d6f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d6ec:	4b59      	ldr	r3, [pc, #356]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	4a58      	ldr	r2, [pc, #352]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d6f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d6f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f003 0308 	and.w	r3, r3, #8
 800d700:	2b00      	cmp	r3, #0
 800d702:	d005      	beq.n	800d710 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d704:	4b53      	ldr	r3, [pc, #332]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	4a52      	ldr	r2, [pc, #328]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d70a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d70e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d710:	4b50      	ldr	r3, [pc, #320]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d712:	689b      	ldr	r3, [r3, #8]
 800d714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	494d      	ldr	r1, [pc, #308]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d71e:	4313      	orrs	r3, r2
 800d720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d040      	beq.n	800d7b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d107      	bne.n	800d746 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d736:	4b47      	ldr	r3, [pc, #284]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d115      	bne.n	800d76e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d742:	2301      	movs	r3, #1
 800d744:	e07f      	b.n	800d846 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	2b02      	cmp	r3, #2
 800d74c:	d107      	bne.n	800d75e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d74e:	4b41      	ldr	r3, [pc, #260]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d756:	2b00      	cmp	r3, #0
 800d758:	d109      	bne.n	800d76e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d75a:	2301      	movs	r3, #1
 800d75c:	e073      	b.n	800d846 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d75e:	4b3d      	ldr	r3, [pc, #244]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f003 0302 	and.w	r3, r3, #2
 800d766:	2b00      	cmp	r3, #0
 800d768:	d101      	bne.n	800d76e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	e06b      	b.n	800d846 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d76e:	4b39      	ldr	r3, [pc, #228]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	f023 0203 	bic.w	r2, r3, #3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	4936      	ldr	r1, [pc, #216]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d77c:	4313      	orrs	r3, r2
 800d77e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d780:	f7fd fcc8 	bl	800b114 <HAL_GetTick>
 800d784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d786:	e00a      	b.n	800d79e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d788:	f7fd fcc4 	bl	800b114 <HAL_GetTick>
 800d78c:	4602      	mov	r2, r0
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	f241 3288 	movw	r2, #5000	; 0x1388
 800d796:	4293      	cmp	r3, r2
 800d798:	d901      	bls.n	800d79e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800d79a:	2303      	movs	r3, #3
 800d79c:	e053      	b.n	800d846 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d79e:	4b2d      	ldr	r3, [pc, #180]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	f003 020c 	and.w	r2, r3, #12
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d1eb      	bne.n	800d788 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d7b0:	4b27      	ldr	r3, [pc, #156]	; (800d850 <HAL_RCC_ClockConfig+0x1c4>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f003 030f 	and.w	r3, r3, #15
 800d7b8:	683a      	ldr	r2, [r7, #0]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d210      	bcs.n	800d7e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d7be:	4b24      	ldr	r3, [pc, #144]	; (800d850 <HAL_RCC_ClockConfig+0x1c4>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f023 020f 	bic.w	r2, r3, #15
 800d7c6:	4922      	ldr	r1, [pc, #136]	; (800d850 <HAL_RCC_ClockConfig+0x1c4>)
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d7ce:	4b20      	ldr	r3, [pc, #128]	; (800d850 <HAL_RCC_ClockConfig+0x1c4>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 030f 	and.w	r3, r3, #15
 800d7d6:	683a      	ldr	r2, [r7, #0]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d001      	beq.n	800d7e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e032      	b.n	800d846 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f003 0304 	and.w	r3, r3, #4
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d008      	beq.n	800d7fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d7ec:	4b19      	ldr	r3, [pc, #100]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	4916      	ldr	r1, [pc, #88]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f003 0308 	and.w	r3, r3, #8
 800d806:	2b00      	cmp	r3, #0
 800d808:	d009      	beq.n	800d81e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d80a:	4b12      	ldr	r3, [pc, #72]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	691b      	ldr	r3, [r3, #16]
 800d816:	00db      	lsls	r3, r3, #3
 800d818:	490e      	ldr	r1, [pc, #56]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d81a:	4313      	orrs	r3, r2
 800d81c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d81e:	f000 f821 	bl	800d864 <HAL_RCC_GetSysClockFreq>
 800d822:	4601      	mov	r1, r0
 800d824:	4b0b      	ldr	r3, [pc, #44]	; (800d854 <HAL_RCC_ClockConfig+0x1c8>)
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	091b      	lsrs	r3, r3, #4
 800d82a:	f003 030f 	and.w	r3, r3, #15
 800d82e:	4a0a      	ldr	r2, [pc, #40]	; (800d858 <HAL_RCC_ClockConfig+0x1cc>)
 800d830:	5cd3      	ldrb	r3, [r2, r3]
 800d832:	fa21 f303 	lsr.w	r3, r1, r3
 800d836:	4a09      	ldr	r2, [pc, #36]	; (800d85c <HAL_RCC_ClockConfig+0x1d0>)
 800d838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d83a:	4b09      	ldr	r3, [pc, #36]	; (800d860 <HAL_RCC_ClockConfig+0x1d4>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fd fc24 	bl	800b08c <HAL_InitTick>

  return HAL_OK;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	40023c00 	.word	0x40023c00
 800d854:	40023800 	.word	0x40023800
 800d858:	08012b10 	.word	0x08012b10
 800d85c:	20000010 	.word	0x20000010
 800d860:	20000014 	.word	0x20000014

0800d864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d864:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d866:	b085      	sub	sp, #20
 800d868:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800d86a:	2300      	movs	r3, #0
 800d86c:	607b      	str	r3, [r7, #4]
 800d86e:	2300      	movs	r3, #0
 800d870:	60fb      	str	r3, [r7, #12]
 800d872:	2300      	movs	r3, #0
 800d874:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800d876:	2300      	movs	r3, #0
 800d878:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d87a:	4b63      	ldr	r3, [pc, #396]	; (800da08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d87c:	689b      	ldr	r3, [r3, #8]
 800d87e:	f003 030c 	and.w	r3, r3, #12
 800d882:	2b04      	cmp	r3, #4
 800d884:	d007      	beq.n	800d896 <HAL_RCC_GetSysClockFreq+0x32>
 800d886:	2b08      	cmp	r3, #8
 800d888:	d008      	beq.n	800d89c <HAL_RCC_GetSysClockFreq+0x38>
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f040 80b4 	bne.w	800d9f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d890:	4b5e      	ldr	r3, [pc, #376]	; (800da0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d892:	60bb      	str	r3, [r7, #8]
      break;
 800d894:	e0b3      	b.n	800d9fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d896:	4b5d      	ldr	r3, [pc, #372]	; (800da0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d898:	60bb      	str	r3, [r7, #8]
      break;
 800d89a:	e0b0      	b.n	800d9fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d89c:	4b5a      	ldr	r3, [pc, #360]	; (800da08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8a4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d8a6:	4b58      	ldr	r3, [pc, #352]	; (800da08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d04a      	beq.n	800d948 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d8b2:	4b55      	ldr	r3, [pc, #340]	; (800da08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	099b      	lsrs	r3, r3, #6
 800d8b8:	f04f 0400 	mov.w	r4, #0
 800d8bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d8c0:	f04f 0200 	mov.w	r2, #0
 800d8c4:	ea03 0501 	and.w	r5, r3, r1
 800d8c8:	ea04 0602 	and.w	r6, r4, r2
 800d8cc:	4629      	mov	r1, r5
 800d8ce:	4632      	mov	r2, r6
 800d8d0:	f04f 0300 	mov.w	r3, #0
 800d8d4:	f04f 0400 	mov.w	r4, #0
 800d8d8:	0154      	lsls	r4, r2, #5
 800d8da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d8de:	014b      	lsls	r3, r1, #5
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	1b49      	subs	r1, r1, r5
 800d8e6:	eb62 0206 	sbc.w	r2, r2, r6
 800d8ea:	f04f 0300 	mov.w	r3, #0
 800d8ee:	f04f 0400 	mov.w	r4, #0
 800d8f2:	0194      	lsls	r4, r2, #6
 800d8f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d8f8:	018b      	lsls	r3, r1, #6
 800d8fa:	1a5b      	subs	r3, r3, r1
 800d8fc:	eb64 0402 	sbc.w	r4, r4, r2
 800d900:	f04f 0100 	mov.w	r1, #0
 800d904:	f04f 0200 	mov.w	r2, #0
 800d908:	00e2      	lsls	r2, r4, #3
 800d90a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d90e:	00d9      	lsls	r1, r3, #3
 800d910:	460b      	mov	r3, r1
 800d912:	4614      	mov	r4, r2
 800d914:	195b      	adds	r3, r3, r5
 800d916:	eb44 0406 	adc.w	r4, r4, r6
 800d91a:	f04f 0100 	mov.w	r1, #0
 800d91e:	f04f 0200 	mov.w	r2, #0
 800d922:	02a2      	lsls	r2, r4, #10
 800d924:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d928:	0299      	lsls	r1, r3, #10
 800d92a:	460b      	mov	r3, r1
 800d92c:	4614      	mov	r4, r2
 800d92e:	4618      	mov	r0, r3
 800d930:	4621      	mov	r1, r4
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f04f 0400 	mov.w	r4, #0
 800d938:	461a      	mov	r2, r3
 800d93a:	4623      	mov	r3, r4
 800d93c:	f7fa fc88 	bl	8008250 <__aeabi_uldivmod>
 800d940:	4603      	mov	r3, r0
 800d942:	460c      	mov	r4, r1
 800d944:	60fb      	str	r3, [r7, #12]
 800d946:	e049      	b.n	800d9dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d948:	4b2f      	ldr	r3, [pc, #188]	; (800da08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	099b      	lsrs	r3, r3, #6
 800d94e:	f04f 0400 	mov.w	r4, #0
 800d952:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d956:	f04f 0200 	mov.w	r2, #0
 800d95a:	ea03 0501 	and.w	r5, r3, r1
 800d95e:	ea04 0602 	and.w	r6, r4, r2
 800d962:	4629      	mov	r1, r5
 800d964:	4632      	mov	r2, r6
 800d966:	f04f 0300 	mov.w	r3, #0
 800d96a:	f04f 0400 	mov.w	r4, #0
 800d96e:	0154      	lsls	r4, r2, #5
 800d970:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d974:	014b      	lsls	r3, r1, #5
 800d976:	4619      	mov	r1, r3
 800d978:	4622      	mov	r2, r4
 800d97a:	1b49      	subs	r1, r1, r5
 800d97c:	eb62 0206 	sbc.w	r2, r2, r6
 800d980:	f04f 0300 	mov.w	r3, #0
 800d984:	f04f 0400 	mov.w	r4, #0
 800d988:	0194      	lsls	r4, r2, #6
 800d98a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d98e:	018b      	lsls	r3, r1, #6
 800d990:	1a5b      	subs	r3, r3, r1
 800d992:	eb64 0402 	sbc.w	r4, r4, r2
 800d996:	f04f 0100 	mov.w	r1, #0
 800d99a:	f04f 0200 	mov.w	r2, #0
 800d99e:	00e2      	lsls	r2, r4, #3
 800d9a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d9a4:	00d9      	lsls	r1, r3, #3
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	4614      	mov	r4, r2
 800d9aa:	195b      	adds	r3, r3, r5
 800d9ac:	eb44 0406 	adc.w	r4, r4, r6
 800d9b0:	f04f 0100 	mov.w	r1, #0
 800d9b4:	f04f 0200 	mov.w	r2, #0
 800d9b8:	02a2      	lsls	r2, r4, #10
 800d9ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d9be:	0299      	lsls	r1, r3, #10
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4614      	mov	r4, r2
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	4621      	mov	r1, r4
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f04f 0400 	mov.w	r4, #0
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	4623      	mov	r3, r4
 800d9d2:	f7fa fc3d 	bl	8008250 <__aeabi_uldivmod>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	460c      	mov	r4, r1
 800d9da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d9dc:	4b0a      	ldr	r3, [pc, #40]	; (800da08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	0c1b      	lsrs	r3, r3, #16
 800d9e2:	f003 0303 	and.w	r3, r3, #3
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	005b      	lsls	r3, r3, #1
 800d9ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9f4:	60bb      	str	r3, [r7, #8]
      break;
 800d9f6:	e002      	b.n	800d9fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d9f8:	4b04      	ldr	r3, [pc, #16]	; (800da0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d9fa:	60bb      	str	r3, [r7, #8]
      break;
 800d9fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d9fe:	68bb      	ldr	r3, [r7, #8]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3714      	adds	r7, #20
 800da04:	46bd      	mov	sp, r7
 800da06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da08:	40023800 	.word	0x40023800
 800da0c:	00f42400 	.word	0x00f42400

0800da10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800da10:	b480      	push	{r7}
 800da12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800da14:	4b03      	ldr	r3, [pc, #12]	; (800da24 <HAL_RCC_GetHCLKFreq+0x14>)
 800da16:	681b      	ldr	r3, [r3, #0]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	20000010 	.word	0x20000010

0800da28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800da2c:	f7ff fff0 	bl	800da10 <HAL_RCC_GetHCLKFreq>
 800da30:	4601      	mov	r1, r0
 800da32:	4b05      	ldr	r3, [pc, #20]	; (800da48 <HAL_RCC_GetPCLK1Freq+0x20>)
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	0a9b      	lsrs	r3, r3, #10
 800da38:	f003 0307 	and.w	r3, r3, #7
 800da3c:	4a03      	ldr	r2, [pc, #12]	; (800da4c <HAL_RCC_GetPCLK1Freq+0x24>)
 800da3e:	5cd3      	ldrb	r3, [r2, r3]
 800da40:	fa21 f303 	lsr.w	r3, r1, r3
}
 800da44:	4618      	mov	r0, r3
 800da46:	bd80      	pop	{r7, pc}
 800da48:	40023800 	.word	0x40023800
 800da4c:	08012b20 	.word	0x08012b20

0800da50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800da54:	f7ff ffdc 	bl	800da10 <HAL_RCC_GetHCLKFreq>
 800da58:	4601      	mov	r1, r0
 800da5a:	4b05      	ldr	r3, [pc, #20]	; (800da70 <HAL_RCC_GetPCLK2Freq+0x20>)
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	0b5b      	lsrs	r3, r3, #13
 800da60:	f003 0307 	and.w	r3, r3, #7
 800da64:	4a03      	ldr	r2, [pc, #12]	; (800da74 <HAL_RCC_GetPCLK2Freq+0x24>)
 800da66:	5cd3      	ldrb	r3, [r2, r3]
 800da68:	fa21 f303 	lsr.w	r3, r1, r3
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	40023800 	.word	0x40023800
 800da74:	08012b20 	.word	0x08012b20

0800da78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b088      	sub	sp, #32
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800da80:	2300      	movs	r3, #0
 800da82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800da84:	2300      	movs	r3, #0
 800da86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800da88:	2300      	movs	r3, #0
 800da8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800da90:	2300      	movs	r3, #0
 800da92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f003 0301 	and.w	r3, r3, #1
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d012      	beq.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800daa0:	4b69      	ldr	r3, [pc, #420]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	4a68      	ldr	r2, [pc, #416]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800daa6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800daaa:	6093      	str	r3, [r2, #8]
 800daac:	4b66      	ldr	r3, [pc, #408]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800daae:	689a      	ldr	r2, [r3, #8]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dab4:	4964      	ldr	r1, [pc, #400]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dab6:	4313      	orrs	r3, r2
 800dab8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d101      	bne.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800dac2:	2301      	movs	r3, #1
 800dac4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d017      	beq.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dad2:	4b5d      	ldr	r3, [pc, #372]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dae0:	4959      	ldr	r1, [pc, #356]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dae2:	4313      	orrs	r3, r2
 800dae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800daf0:	d101      	bne.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800daf2:	2301      	movs	r3, #1
 800daf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d101      	bne.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800dafe:	2301      	movs	r3, #1
 800db00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d017      	beq.n	800db3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800db0e:	4b4e      	ldr	r3, [pc, #312]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800db10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db1c:	494a      	ldr	r1, [pc, #296]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800db1e:	4313      	orrs	r3, r2
 800db20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db2c:	d101      	bne.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800db2e:	2301      	movs	r3, #1
 800db30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db36:	2b00      	cmp	r3, #0
 800db38:	d101      	bne.n	800db3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800db3a:	2301      	movs	r3, #1
 800db3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800db46:	2b00      	cmp	r3, #0
 800db48:	d001      	beq.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800db4a:	2301      	movs	r3, #1
 800db4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f003 0320 	and.w	r3, r3, #32
 800db56:	2b00      	cmp	r3, #0
 800db58:	f000 808b 	beq.w	800dc72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800db5c:	4b3a      	ldr	r3, [pc, #232]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800db5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db60:	4a39      	ldr	r2, [pc, #228]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800db62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db66:	6413      	str	r3, [r2, #64]	; 0x40
 800db68:	4b37      	ldr	r3, [pc, #220]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800db6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db70:	60bb      	str	r3, [r7, #8]
 800db72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800db74:	4b35      	ldr	r3, [pc, #212]	; (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a34      	ldr	r2, [pc, #208]	; (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800db7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db80:	f7fd fac8 	bl	800b114 <HAL_GetTick>
 800db84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800db86:	e008      	b.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800db88:	f7fd fac4 	bl	800b114 <HAL_GetTick>
 800db8c:	4602      	mov	r2, r0
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	2b64      	cmp	r3, #100	; 0x64
 800db94:	d901      	bls.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800db96:	2303      	movs	r3, #3
 800db98:	e38d      	b.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800db9a:	4b2c      	ldr	r3, [pc, #176]	; (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d0f0      	beq.n	800db88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800dba6:	4b28      	ldr	r3, [pc, #160]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d035      	beq.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbbe:	693a      	ldr	r2, [r7, #16]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d02e      	beq.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dbc4:	4b20      	ldr	r3, [pc, #128]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800dbce:	4b1e      	ldr	r3, [pc, #120]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbd2:	4a1d      	ldr	r2, [pc, #116]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800dbda:	4b1b      	ldr	r3, [pc, #108]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbde:	4a1a      	ldr	r2, [pc, #104]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dbe4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800dbe6:	4a18      	ldr	r2, [pc, #96]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800dbec:	4b16      	ldr	r3, [pc, #88]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbf0:	f003 0301 	and.w	r3, r3, #1
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d114      	bne.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbf8:	f7fd fa8c 	bl	800b114 <HAL_GetTick>
 800dbfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dbfe:	e00a      	b.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dc00:	f7fd fa88 	bl	800b114 <HAL_GetTick>
 800dc04:	4602      	mov	r2, r0
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	1ad3      	subs	r3, r2, r3
 800dc0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d901      	bls.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800dc12:	2303      	movs	r3, #3
 800dc14:	e34f      	b.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dc16:	4b0c      	ldr	r3, [pc, #48]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dc18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc1a:	f003 0302 	and.w	r3, r3, #2
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d0ee      	beq.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc2e:	d111      	bne.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800dc30:	4b05      	ldr	r3, [pc, #20]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dc3c:	4b04      	ldr	r3, [pc, #16]	; (800dc50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800dc3e:	400b      	ands	r3, r1
 800dc40:	4901      	ldr	r1, [pc, #4]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dc42:	4313      	orrs	r3, r2
 800dc44:	608b      	str	r3, [r1, #8]
 800dc46:	e00b      	b.n	800dc60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800dc48:	40023800 	.word	0x40023800
 800dc4c:	40007000 	.word	0x40007000
 800dc50:	0ffffcff 	.word	0x0ffffcff
 800dc54:	4bb3      	ldr	r3, [pc, #716]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	4ab2      	ldr	r2, [pc, #712]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800dc5e:	6093      	str	r3, [r2, #8]
 800dc60:	4bb0      	ldr	r3, [pc, #704]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc6c:	49ad      	ldr	r1, [pc, #692]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f003 0310 	and.w	r3, r3, #16
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d010      	beq.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dc7e:	4ba9      	ldr	r3, [pc, #676]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc84:	4aa7      	ldr	r2, [pc, #668]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dc8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800dc8e:	4ba5      	ldr	r3, [pc, #660]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc98:	49a2      	ldr	r1, [pc, #648]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00a      	beq.n	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dcac:	4b9d      	ldr	r3, [pc, #628]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dcae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcba:	499a      	ldr	r1, [pc, #616]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00a      	beq.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dcce:	4b95      	ldr	r3, [pc, #596]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dcd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcdc:	4991      	ldr	r1, [pc, #580]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dcde:	4313      	orrs	r3, r2
 800dce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00a      	beq.n	800dd06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dcf0:	4b8c      	ldr	r3, [pc, #560]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dcf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcfe:	4989      	ldr	r1, [pc, #548]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd00:	4313      	orrs	r3, r2
 800dd02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d00a      	beq.n	800dd28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dd12:	4b84      	ldr	r3, [pc, #528]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd20:	4980      	ldr	r1, [pc, #512]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd22:	4313      	orrs	r3, r2
 800dd24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d00a      	beq.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dd34:	4b7b      	ldr	r3, [pc, #492]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd3a:	f023 0203 	bic.w	r2, r3, #3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd42:	4978      	ldr	r1, [pc, #480]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd44:	4313      	orrs	r3, r2
 800dd46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d00a      	beq.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dd56:	4b73      	ldr	r3, [pc, #460]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd5c:	f023 020c 	bic.w	r2, r3, #12
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd64:	496f      	ldr	r1, [pc, #444]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd66:	4313      	orrs	r3, r2
 800dd68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00a      	beq.n	800dd8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dd78:	4b6a      	ldr	r3, [pc, #424]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd86:	4967      	ldr	r1, [pc, #412]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00a      	beq.n	800ddb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dd9a:	4b62      	ldr	r3, [pc, #392]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dda0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dda8:	495e      	ldr	r1, [pc, #376]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00a      	beq.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ddbc:	4b59      	ldr	r3, [pc, #356]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ddbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ddc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddca:	4956      	ldr	r1, [pc, #344]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d00a      	beq.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ddde:	4b51      	ldr	r3, [pc, #324]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dde0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dde4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddec:	494d      	ldr	r1, [pc, #308]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d00a      	beq.n	800de16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800de00:	4b48      	ldr	r3, [pc, #288]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800de02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de0e:	4945      	ldr	r1, [pc, #276]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800de10:	4313      	orrs	r3, r2
 800de12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00a      	beq.n	800de38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800de22:	4b40      	ldr	r3, [pc, #256]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800de24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de30:	493c      	ldr	r1, [pc, #240]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800de32:	4313      	orrs	r3, r2
 800de34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00a      	beq.n	800de5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800de44:	4b37      	ldr	r3, [pc, #220]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800de46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de52:	4934      	ldr	r1, [pc, #208]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800de54:	4313      	orrs	r3, r2
 800de56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de62:	2b00      	cmp	r3, #0
 800de64:	d011      	beq.n	800de8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800de66:	4b2f      	ldr	r3, [pc, #188]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800de68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de74:	492b      	ldr	r1, [pc, #172]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800de76:	4313      	orrs	r3, r2
 800de78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800de84:	d101      	bne.n	800de8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800de86:	2301      	movs	r3, #1
 800de88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f003 0308 	and.w	r3, r3, #8
 800de92:	2b00      	cmp	r3, #0
 800de94:	d001      	beq.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800de96:	2301      	movs	r3, #1
 800de98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00a      	beq.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dea6:	4b1f      	ldr	r3, [pc, #124]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800deac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800deb4:	491b      	ldr	r1, [pc, #108]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800deb6:	4313      	orrs	r3, r2
 800deb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00b      	beq.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800dec8:	4b16      	ldr	r3, [pc, #88]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800deca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dece:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ded8:	4912      	ldr	r1, [pc, #72]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800deda:	4313      	orrs	r3, r2
 800dedc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00b      	beq.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800deec:	4b0d      	ldr	r3, [pc, #52]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800deee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800def2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800defc:	4909      	ldr	r1, [pc, #36]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800defe:	4313      	orrs	r3, r2
 800df00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d00f      	beq.n	800df30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800df10:	4b04      	ldr	r3, [pc, #16]	; (800df24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800df12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df20:	e002      	b.n	800df28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800df22:	bf00      	nop
 800df24:	40023800 	.word	0x40023800
 800df28:	4985      	ldr	r1, [pc, #532]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df2a:	4313      	orrs	r3, r2
 800df2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00b      	beq.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800df3c:	4b80      	ldr	r3, [pc, #512]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df4c:	497c      	ldr	r1, [pc, #496]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df4e:	4313      	orrs	r3, r2
 800df50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	2b01      	cmp	r3, #1
 800df58:	d005      	beq.n	800df66 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df62:	f040 80d6 	bne.w	800e112 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800df66:	4b76      	ldr	r3, [pc, #472]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4a75      	ldr	r2, [pc, #468]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800df70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df72:	f7fd f8cf 	bl	800b114 <HAL_GetTick>
 800df76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800df78:	e008      	b.n	800df8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800df7a:	f7fd f8cb 	bl	800b114 <HAL_GetTick>
 800df7e:	4602      	mov	r2, r0
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	1ad3      	subs	r3, r2, r3
 800df84:	2b64      	cmp	r3, #100	; 0x64
 800df86:	d901      	bls.n	800df8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800df88:	2303      	movs	r3, #3
 800df8a:	e194      	b.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800df8c:	4b6c      	ldr	r3, [pc, #432]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1f0      	bne.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f003 0301 	and.w	r3, r3, #1
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d021      	beq.n	800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d11d      	bne.n	800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dfac:	4b64      	ldr	r3, [pc, #400]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800dfae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfb2:	0c1b      	lsrs	r3, r3, #16
 800dfb4:	f003 0303 	and.w	r3, r3, #3
 800dfb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800dfba:	4b61      	ldr	r3, [pc, #388]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800dfbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfc0:	0e1b      	lsrs	r3, r3, #24
 800dfc2:	f003 030f 	and.w	r3, r3, #15
 800dfc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	019a      	lsls	r2, r3, #6
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	041b      	lsls	r3, r3, #16
 800dfd2:	431a      	orrs	r2, r3
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	061b      	lsls	r3, r3, #24
 800dfd8:	431a      	orrs	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	071b      	lsls	r3, r3, #28
 800dfe0:	4957      	ldr	r1, [pc, #348]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d004      	beq.n	800dffe <HAL_RCCEx_PeriphCLKConfig+0x586>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dffc:	d00a      	beq.n	800e014 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e006:	2b00      	cmp	r3, #0
 800e008:	d02e      	beq.n	800e068 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e00e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e012:	d129      	bne.n	800e068 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e014:	4b4a      	ldr	r3, [pc, #296]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e01a:	0c1b      	lsrs	r3, r3, #16
 800e01c:	f003 0303 	and.w	r3, r3, #3
 800e020:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e022:	4b47      	ldr	r3, [pc, #284]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e028:	0f1b      	lsrs	r3, r3, #28
 800e02a:	f003 0307 	and.w	r3, r3, #7
 800e02e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	019a      	lsls	r2, r3, #6
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	041b      	lsls	r3, r3, #16
 800e03a:	431a      	orrs	r2, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	061b      	lsls	r3, r3, #24
 800e042:	431a      	orrs	r2, r3
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	071b      	lsls	r3, r3, #28
 800e048:	493d      	ldr	r1, [pc, #244]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e04a:	4313      	orrs	r3, r2
 800e04c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e050:	4b3b      	ldr	r3, [pc, #236]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e056:	f023 021f 	bic.w	r2, r3, #31
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05e:	3b01      	subs	r3, #1
 800e060:	4937      	ldr	r1, [pc, #220]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e062:	4313      	orrs	r3, r2
 800e064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e070:	2b00      	cmp	r3, #0
 800e072:	d01d      	beq.n	800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e074:	4b32      	ldr	r3, [pc, #200]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e07a:	0e1b      	lsrs	r3, r3, #24
 800e07c:	f003 030f 	and.w	r3, r3, #15
 800e080:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e082:	4b2f      	ldr	r3, [pc, #188]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e088:	0f1b      	lsrs	r3, r3, #28
 800e08a:	f003 0307 	and.w	r3, r3, #7
 800e08e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	019a      	lsls	r2, r3, #6
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	691b      	ldr	r3, [r3, #16]
 800e09a:	041b      	lsls	r3, r3, #16
 800e09c:	431a      	orrs	r2, r3
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	061b      	lsls	r3, r3, #24
 800e0a2:	431a      	orrs	r2, r3
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	071b      	lsls	r3, r3, #28
 800e0a8:	4925      	ldr	r1, [pc, #148]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e0aa:	4313      	orrs	r3, r2
 800e0ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d011      	beq.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	019a      	lsls	r2, r3, #6
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	691b      	ldr	r3, [r3, #16]
 800e0c6:	041b      	lsls	r3, r3, #16
 800e0c8:	431a      	orrs	r2, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	68db      	ldr	r3, [r3, #12]
 800e0ce:	061b      	lsls	r3, r3, #24
 800e0d0:	431a      	orrs	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	071b      	lsls	r3, r3, #28
 800e0d8:	4919      	ldr	r1, [pc, #100]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e0e0:	4b17      	ldr	r3, [pc, #92]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a16      	ldr	r2, [pc, #88]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e0e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e0ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0ec:	f7fd f812 	bl	800b114 <HAL_GetTick>
 800e0f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e0f2:	e008      	b.n	800e106 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e0f4:	f7fd f80e 	bl	800b114 <HAL_GetTick>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	2b64      	cmp	r3, #100	; 0x64
 800e100:	d901      	bls.n	800e106 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e102:	2303      	movs	r3, #3
 800e104:	e0d7      	b.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e106:	4b0e      	ldr	r3, [pc, #56]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d0f0      	beq.n	800e0f4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	2b01      	cmp	r3, #1
 800e116:	f040 80cd 	bne.w	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e11a:	4b09      	ldr	r3, [pc, #36]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a08      	ldr	r2, [pc, #32]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e126:	f7fc fff5 	bl	800b114 <HAL_GetTick>
 800e12a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e12c:	e00a      	b.n	800e144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e12e:	f7fc fff1 	bl	800b114 <HAL_GetTick>
 800e132:	4602      	mov	r2, r0
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	1ad3      	subs	r3, r2, r3
 800e138:	2b64      	cmp	r3, #100	; 0x64
 800e13a:	d903      	bls.n	800e144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e13c:	2303      	movs	r3, #3
 800e13e:	e0ba      	b.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800e140:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e144:	4b5e      	ldr	r3, [pc, #376]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e14c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e150:	d0ed      	beq.n	800e12e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d003      	beq.n	800e166 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e162:	2b00      	cmp	r3, #0
 800e164:	d009      	beq.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d02e      	beq.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e176:	2b00      	cmp	r3, #0
 800e178:	d12a      	bne.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e17a:	4b51      	ldr	r3, [pc, #324]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e180:	0c1b      	lsrs	r3, r3, #16
 800e182:	f003 0303 	and.w	r3, r3, #3
 800e186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e188:	4b4d      	ldr	r3, [pc, #308]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e18e:	0f1b      	lsrs	r3, r3, #28
 800e190:	f003 0307 	and.w	r3, r3, #7
 800e194:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	695b      	ldr	r3, [r3, #20]
 800e19a:	019a      	lsls	r2, r3, #6
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	041b      	lsls	r3, r3, #16
 800e1a0:	431a      	orrs	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	699b      	ldr	r3, [r3, #24]
 800e1a6:	061b      	lsls	r3, r3, #24
 800e1a8:	431a      	orrs	r2, r3
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	071b      	lsls	r3, r3, #28
 800e1ae:	4944      	ldr	r1, [pc, #272]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e1b6:	4b42      	ldr	r3, [pc, #264]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1c4:	3b01      	subs	r3, #1
 800e1c6:	021b      	lsls	r3, r3, #8
 800e1c8:	493d      	ldr	r1, [pc, #244]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d022      	beq.n	800e222 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e1e4:	d11d      	bne.n	800e222 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e1e6:	4b36      	ldr	r3, [pc, #216]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e1e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1ec:	0e1b      	lsrs	r3, r3, #24
 800e1ee:	f003 030f 	and.w	r3, r3, #15
 800e1f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e1f4:	4b32      	ldr	r3, [pc, #200]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1fa:	0f1b      	lsrs	r3, r3, #28
 800e1fc:	f003 0307 	and.w	r3, r3, #7
 800e200:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	695b      	ldr	r3, [r3, #20]
 800e206:	019a      	lsls	r2, r3, #6
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6a1b      	ldr	r3, [r3, #32]
 800e20c:	041b      	lsls	r3, r3, #16
 800e20e:	431a      	orrs	r2, r3
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	061b      	lsls	r3, r3, #24
 800e214:	431a      	orrs	r2, r3
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	071b      	lsls	r3, r3, #28
 800e21a:	4929      	ldr	r1, [pc, #164]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e21c:	4313      	orrs	r3, r2
 800e21e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f003 0308 	and.w	r3, r3, #8
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d028      	beq.n	800e280 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e22e:	4b24      	ldr	r3, [pc, #144]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e234:	0e1b      	lsrs	r3, r3, #24
 800e236:	f003 030f 	and.w	r3, r3, #15
 800e23a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e23c:	4b20      	ldr	r3, [pc, #128]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e242:	0c1b      	lsrs	r3, r3, #16
 800e244:	f003 0303 	and.w	r3, r3, #3
 800e248:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	695b      	ldr	r3, [r3, #20]
 800e24e:	019a      	lsls	r2, r3, #6
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	041b      	lsls	r3, r3, #16
 800e254:	431a      	orrs	r2, r3
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	061b      	lsls	r3, r3, #24
 800e25a:	431a      	orrs	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	69db      	ldr	r3, [r3, #28]
 800e260:	071b      	lsls	r3, r3, #28
 800e262:	4917      	ldr	r1, [pc, #92]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e264:	4313      	orrs	r3, r2
 800e266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e26a:	4b15      	ldr	r3, [pc, #84]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e26c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e270:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e278:	4911      	ldr	r1, [pc, #68]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e27a:	4313      	orrs	r3, r2
 800e27c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e280:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a0e      	ldr	r2, [pc, #56]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e28a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e28c:	f7fc ff42 	bl	800b114 <HAL_GetTick>
 800e290:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e292:	e008      	b.n	800e2a6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e294:	f7fc ff3e 	bl	800b114 <HAL_GetTick>
 800e298:	4602      	mov	r2, r0
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	2b64      	cmp	r3, #100	; 0x64
 800e2a0:	d901      	bls.n	800e2a6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e2a2:	2303      	movs	r3, #3
 800e2a4:	e007      	b.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e2a6:	4b06      	ldr	r3, [pc, #24]	; (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e2ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2b2:	d1ef      	bne.n	800e294 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3720      	adds	r7, #32
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	40023800 	.word	0x40023800

0800e2c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d101      	bne.n	800e2d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	e084      	b.n	800e3e0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d106      	bne.n	800e2f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7fc fce5 	bl	800acc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2202      	movs	r2, #2
 800e2fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e30c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e316:	d902      	bls.n	800e31e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e318:	2300      	movs	r3, #0
 800e31a:	60fb      	str	r3, [r7, #12]
 800e31c:	e002      	b.n	800e324 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e31e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e322:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e32c:	d007      	beq.n	800e33e <HAL_SPI_Init+0x7a>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e336:	d002      	beq.n	800e33e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e342:	2b00      	cmp	r3, #0
 800e344:	d10b      	bne.n	800e35e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	68db      	ldr	r3, [r3, #12]
 800e34a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e34e:	d903      	bls.n	800e358 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2202      	movs	r2, #2
 800e354:	631a      	str	r2, [r3, #48]	; 0x30
 800e356:	e002      	b.n	800e35e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685a      	ldr	r2, [r3, #4]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	431a      	orrs	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	431a      	orrs	r2, r3
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	695b      	ldr	r3, [r3, #20]
 800e372:	431a      	orrs	r2, r3
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	699b      	ldr	r3, [r3, #24]
 800e378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e37c:	431a      	orrs	r2, r3
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	69db      	ldr	r3, [r3, #28]
 800e382:	431a      	orrs	r2, r3
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6a1b      	ldr	r3, [r3, #32]
 800e388:	ea42 0103 	orr.w	r1, r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	430a      	orrs	r2, r1
 800e396:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	699b      	ldr	r3, [r3, #24]
 800e39c:	0c1b      	lsrs	r3, r3, #16
 800e39e:	f003 0204 	and.w	r2, r3, #4
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a6:	431a      	orrs	r2, r3
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ac:	431a      	orrs	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	ea42 0103 	orr.w	r1, r2, r3
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	68fa      	ldr	r2, [r7, #12]
 800e3bc:	430a      	orrs	r2, r1
 800e3be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	69da      	ldr	r2, [r3, #28]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e3ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e3de:	2300      	movs	r3, #0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b088      	sub	sp, #32
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	603b      	str	r3, [r7, #0]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e402:	2b01      	cmp	r3, #1
 800e404:	d101      	bne.n	800e40a <HAL_SPI_Transmit+0x22>
 800e406:	2302      	movs	r3, #2
 800e408:	e150      	b.n	800e6ac <HAL_SPI_Transmit+0x2c4>
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2201      	movs	r2, #1
 800e40e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e412:	f7fc fe7f 	bl	800b114 <HAL_GetTick>
 800e416:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e418:	88fb      	ldrh	r3, [r7, #6]
 800e41a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e422:	b2db      	uxtb	r3, r3
 800e424:	2b01      	cmp	r3, #1
 800e426:	d002      	beq.n	800e42e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e428:	2302      	movs	r3, #2
 800e42a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e42c:	e135      	b.n	800e69a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d002      	beq.n	800e43a <HAL_SPI_Transmit+0x52>
 800e434:	88fb      	ldrh	r3, [r7, #6]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d102      	bne.n	800e440 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e43e:	e12c      	b.n	800e69a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2203      	movs	r2, #3
 800e444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	68ba      	ldr	r2, [r7, #8]
 800e452:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	88fa      	ldrh	r2, [r7, #6]
 800e458:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	88fa      	ldrh	r2, [r7, #6]
 800e45e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2200      	movs	r2, #0
 800e464:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2200      	movs	r2, #0
 800e46a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2200      	movs	r2, #0
 800e472:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2200      	movs	r2, #0
 800e47a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2200      	movs	r2, #0
 800e480:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	689b      	ldr	r3, [r3, #8]
 800e486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e48a:	d107      	bne.n	800e49c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e49a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4a6:	2b40      	cmp	r3, #64	; 0x40
 800e4a8:	d007      	beq.n	800e4ba <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	68db      	ldr	r3, [r3, #12]
 800e4be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e4c2:	d94b      	bls.n	800e55c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d002      	beq.n	800e4d2 <HAL_SPI_Transmit+0xea>
 800e4cc:	8afb      	ldrh	r3, [r7, #22]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d13e      	bne.n	800e550 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d6:	881a      	ldrh	r2, [r3, #0]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e2:	1c9a      	adds	r2, r3, #2
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	3b01      	subs	r3, #1
 800e4f0:	b29a      	uxth	r2, r3
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e4f6:	e02b      	b.n	800e550 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	f003 0302 	and.w	r3, r3, #2
 800e502:	2b02      	cmp	r3, #2
 800e504:	d112      	bne.n	800e52c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e50a:	881a      	ldrh	r2, [r3, #0]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e516:	1c9a      	adds	r2, r3, #2
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e520:	b29b      	uxth	r3, r3
 800e522:	3b01      	subs	r3, #1
 800e524:	b29a      	uxth	r2, r3
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e52a:	e011      	b.n	800e550 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e52c:	f7fc fdf2 	bl	800b114 <HAL_GetTick>
 800e530:	4602      	mov	r2, r0
 800e532:	69bb      	ldr	r3, [r7, #24]
 800e534:	1ad3      	subs	r3, r2, r3
 800e536:	683a      	ldr	r2, [r7, #0]
 800e538:	429a      	cmp	r2, r3
 800e53a:	d803      	bhi.n	800e544 <HAL_SPI_Transmit+0x15c>
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e542:	d102      	bne.n	800e54a <HAL_SPI_Transmit+0x162>
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d102      	bne.n	800e550 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800e54a:	2303      	movs	r3, #3
 800e54c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e54e:	e0a4      	b.n	800e69a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e554:	b29b      	uxth	r3, r3
 800e556:	2b00      	cmp	r3, #0
 800e558:	d1ce      	bne.n	800e4f8 <HAL_SPI_Transmit+0x110>
 800e55a:	e07c      	b.n	800e656 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d002      	beq.n	800e56a <HAL_SPI_Transmit+0x182>
 800e564:	8afb      	ldrh	r3, [r7, #22]
 800e566:	2b01      	cmp	r3, #1
 800e568:	d170      	bne.n	800e64c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e56e:	b29b      	uxth	r3, r3
 800e570:	2b01      	cmp	r3, #1
 800e572:	d912      	bls.n	800e59a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e578:	881a      	ldrh	r2, [r3, #0]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e584:	1c9a      	adds	r2, r3, #2
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e58e:	b29b      	uxth	r3, r3
 800e590:	3b02      	subs	r3, #2
 800e592:	b29a      	uxth	r2, r3
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e598:	e058      	b.n	800e64c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	330c      	adds	r3, #12
 800e5a4:	7812      	ldrb	r2, [r2, #0]
 800e5a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ac:	1c5a      	adds	r2, r3, #1
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	b29a      	uxth	r2, r3
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e5c0:	e044      	b.n	800e64c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	f003 0302 	and.w	r3, r3, #2
 800e5cc:	2b02      	cmp	r3, #2
 800e5ce:	d12b      	bne.n	800e628 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d912      	bls.n	800e600 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5de:	881a      	ldrh	r2, [r3, #0]
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ea:	1c9a      	adds	r2, r3, #2
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	3b02      	subs	r3, #2
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5fe:	e025      	b.n	800e64c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	330c      	adds	r3, #12
 800e60a:	7812      	ldrb	r2, [r2, #0]
 800e60c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e612:	1c5a      	adds	r2, r3, #1
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	3b01      	subs	r3, #1
 800e620:	b29a      	uxth	r2, r3
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e626:	e011      	b.n	800e64c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e628:	f7fc fd74 	bl	800b114 <HAL_GetTick>
 800e62c:	4602      	mov	r2, r0
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	429a      	cmp	r2, r3
 800e636:	d803      	bhi.n	800e640 <HAL_SPI_Transmit+0x258>
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e63e:	d102      	bne.n	800e646 <HAL_SPI_Transmit+0x25e>
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d102      	bne.n	800e64c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800e646:	2303      	movs	r3, #3
 800e648:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e64a:	e026      	b.n	800e69a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e650:	b29b      	uxth	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	d1b5      	bne.n	800e5c2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e656:	69ba      	ldr	r2, [r7, #24]
 800e658:	6839      	ldr	r1, [r7, #0]
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f000 fdf3 	bl	800f246 <SPI_EndRxTxTransaction>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d002      	beq.n	800e66c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2220      	movs	r2, #32
 800e66a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d10a      	bne.n	800e68a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e674:	2300      	movs	r3, #0
 800e676:	613b      	str	r3, [r7, #16]
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	613b      	str	r3, [r7, #16]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	689b      	ldr	r3, [r3, #8]
 800e686:	613b      	str	r3, [r7, #16]
 800e688:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d002      	beq.n	800e698 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800e692:	2301      	movs	r3, #1
 800e694:	77fb      	strb	r3, [r7, #31]
 800e696:	e000      	b.n	800e69a <HAL_SPI_Transmit+0x2b2>
  }

error:
 800e698:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2201      	movs	r2, #1
 800e69e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e6aa:	7ffb      	ldrb	r3, [r7, #31]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3720      	adds	r7, #32
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08a      	sub	sp, #40	; 0x28
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
 800e6c0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d101      	bne.n	800e6da <HAL_SPI_TransmitReceive+0x26>
 800e6d6:	2302      	movs	r3, #2
 800e6d8:	e1fb      	b.n	800ead2 <HAL_SPI_TransmitReceive+0x41e>
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2201      	movs	r2, #1
 800e6de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6e2:	f7fc fd17 	bl	800b114 <HAL_GetTick>
 800e6e6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e6ee:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e6f6:	887b      	ldrh	r3, [r7, #2]
 800e6f8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e6fa:	887b      	ldrh	r3, [r7, #2]
 800e6fc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e6fe:	7efb      	ldrb	r3, [r7, #27]
 800e700:	2b01      	cmp	r3, #1
 800e702:	d00e      	beq.n	800e722 <HAL_SPI_TransmitReceive+0x6e>
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e70a:	d106      	bne.n	800e71a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	689b      	ldr	r3, [r3, #8]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d102      	bne.n	800e71a <HAL_SPI_TransmitReceive+0x66>
 800e714:	7efb      	ldrb	r3, [r7, #27]
 800e716:	2b04      	cmp	r3, #4
 800e718:	d003      	beq.n	800e722 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e71a:	2302      	movs	r3, #2
 800e71c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e720:	e1cd      	b.n	800eabe <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d005      	beq.n	800e734 <HAL_SPI_TransmitReceive+0x80>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d002      	beq.n	800e734 <HAL_SPI_TransmitReceive+0x80>
 800e72e:	887b      	ldrh	r3, [r7, #2]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d103      	bne.n	800e73c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e734:	2301      	movs	r3, #1
 800e736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e73a:	e1c0      	b.n	800eabe <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b04      	cmp	r3, #4
 800e746:	d003      	beq.n	800e750 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2205      	movs	r2, #5
 800e74c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2200      	movs	r2, #0
 800e754:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	887a      	ldrh	r2, [r7, #2]
 800e760:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	887a      	ldrh	r2, [r7, #2]
 800e768:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	68ba      	ldr	r2, [r7, #8]
 800e770:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	887a      	ldrh	r2, [r7, #2]
 800e776:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	887a      	ldrh	r2, [r7, #2]
 800e77c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2200      	movs	r2, #0
 800e782:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2200      	movs	r2, #0
 800e788:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e792:	d802      	bhi.n	800e79a <HAL_SPI_TransmitReceive+0xe6>
 800e794:	8a3b      	ldrh	r3, [r7, #16]
 800e796:	2b01      	cmp	r3, #1
 800e798:	d908      	bls.n	800e7ac <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	685a      	ldr	r2, [r3, #4]
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e7a8:	605a      	str	r2, [r3, #4]
 800e7aa:	e007      	b.n	800e7bc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e7ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7c6:	2b40      	cmp	r3, #64	; 0x40
 800e7c8:	d007      	beq.n	800e7da <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	68db      	ldr	r3, [r3, #12]
 800e7de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e7e2:	d97c      	bls.n	800e8de <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d002      	beq.n	800e7f2 <HAL_SPI_TransmitReceive+0x13e>
 800e7ec:	8a7b      	ldrh	r3, [r7, #18]
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d169      	bne.n	800e8c6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f6:	881a      	ldrh	r2, [r3, #0]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e802:	1c9a      	adds	r2, r3, #2
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	3b01      	subs	r3, #1
 800e810:	b29a      	uxth	r2, r3
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e816:	e056      	b.n	800e8c6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	689b      	ldr	r3, [r3, #8]
 800e81e:	f003 0302 	and.w	r3, r3, #2
 800e822:	2b02      	cmp	r3, #2
 800e824:	d11b      	bne.n	800e85e <HAL_SPI_TransmitReceive+0x1aa>
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d016      	beq.n	800e85e <HAL_SPI_TransmitReceive+0x1aa>
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	2b01      	cmp	r3, #1
 800e834:	d113      	bne.n	800e85e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e83a:	881a      	ldrh	r2, [r3, #0]
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e846:	1c9a      	adds	r2, r3, #2
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e850:	b29b      	uxth	r3, r3
 800e852:	3b01      	subs	r3, #1
 800e854:	b29a      	uxth	r2, r3
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e85a:	2300      	movs	r3, #0
 800e85c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	689b      	ldr	r3, [r3, #8]
 800e864:	f003 0301 	and.w	r3, r3, #1
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d11c      	bne.n	800e8a6 <HAL_SPI_TransmitReceive+0x1f2>
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e872:	b29b      	uxth	r3, r3
 800e874:	2b00      	cmp	r3, #0
 800e876:	d016      	beq.n	800e8a6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	68da      	ldr	r2, [r3, #12]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e882:	b292      	uxth	r2, r2
 800e884:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e88a:	1c9a      	adds	r2, r3, #2
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e896:	b29b      	uxth	r3, r3
 800e898:	3b01      	subs	r3, #1
 800e89a:	b29a      	uxth	r2, r3
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e8a6:	f7fc fc35 	bl	800b114 <HAL_GetTick>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d807      	bhi.n	800e8c6 <HAL_SPI_TransmitReceive+0x212>
 800e8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8bc:	d003      	beq.n	800e8c6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800e8be:	2303      	movs	r3, #3
 800e8c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e8c4:	e0fb      	b.n	800eabe <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1a3      	bne.n	800e818 <HAL_SPI_TransmitReceive+0x164>
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d19d      	bne.n	800e818 <HAL_SPI_TransmitReceive+0x164>
 800e8dc:	e0df      	b.n	800ea9e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d003      	beq.n	800e8ee <HAL_SPI_TransmitReceive+0x23a>
 800e8e6:	8a7b      	ldrh	r3, [r7, #18]
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	f040 80cb 	bne.w	800ea84 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d912      	bls.n	800e91e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8fc:	881a      	ldrh	r2, [r3, #0]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e908:	1c9a      	adds	r2, r3, #2
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e912:	b29b      	uxth	r3, r3
 800e914:	3b02      	subs	r3, #2
 800e916:	b29a      	uxth	r2, r3
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e91c:	e0b2      	b.n	800ea84 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	330c      	adds	r3, #12
 800e928:	7812      	ldrb	r2, [r2, #0]
 800e92a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e930:	1c5a      	adds	r2, r3, #1
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	3b01      	subs	r3, #1
 800e93e:	b29a      	uxth	r2, r3
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e944:	e09e      	b.n	800ea84 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	f003 0302 	and.w	r3, r3, #2
 800e950:	2b02      	cmp	r3, #2
 800e952:	d134      	bne.n	800e9be <HAL_SPI_TransmitReceive+0x30a>
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e958:	b29b      	uxth	r3, r3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d02f      	beq.n	800e9be <HAL_SPI_TransmitReceive+0x30a>
 800e95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e960:	2b01      	cmp	r3, #1
 800e962:	d12c      	bne.n	800e9be <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e968:	b29b      	uxth	r3, r3
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d912      	bls.n	800e994 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e972:	881a      	ldrh	r2, [r3, #0]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e97e:	1c9a      	adds	r2, r3, #2
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e988:	b29b      	uxth	r3, r3
 800e98a:	3b02      	subs	r3, #2
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e992:	e012      	b.n	800e9ba <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	330c      	adds	r3, #12
 800e99e:	7812      	ldrb	r2, [r2, #0]
 800e9a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a6:	1c5a      	adds	r2, r3, #1
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	3b01      	subs	r3, #1
 800e9b4:	b29a      	uxth	r2, r3
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	689b      	ldr	r3, [r3, #8]
 800e9c4:	f003 0301 	and.w	r3, r3, #1
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d148      	bne.n	800ea5e <HAL_SPI_TransmitReceive+0x3aa>
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d042      	beq.n	800ea5e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d923      	bls.n	800ea2c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	68da      	ldr	r2, [r3, #12]
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ee:	b292      	uxth	r2, r2
 800e9f0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9f6:	1c9a      	adds	r2, r3, #2
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	3b02      	subs	r3, #2
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	d81f      	bhi.n	800ea5a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ea28:	605a      	str	r2, [r3, #4]
 800ea2a:	e016      	b.n	800ea5a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f103 020c 	add.w	r2, r3, #12
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea38:	7812      	ldrb	r2, [r2, #0]
 800ea3a:	b2d2      	uxtb	r2, r2
 800ea3c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea42:	1c5a      	adds	r2, r3, #1
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	3b01      	subs	r3, #1
 800ea52:	b29a      	uxth	r2, r3
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ea5e:	f7fc fb59 	bl	800b114 <HAL_GetTick>
 800ea62:	4602      	mov	r2, r0
 800ea64:	69fb      	ldr	r3, [r7, #28]
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d803      	bhi.n	800ea76 <HAL_SPI_TransmitReceive+0x3c2>
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea74:	d102      	bne.n	800ea7c <HAL_SPI_TransmitReceive+0x3c8>
 800ea76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d103      	bne.n	800ea84 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ea82:	e01c      	b.n	800eabe <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f47f af5b 	bne.w	800e946 <HAL_SPI_TransmitReceive+0x292>
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f47f af54 	bne.w	800e946 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ea9e:	69fa      	ldr	r2, [r7, #28]
 800eaa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eaa2:	68f8      	ldr	r0, [r7, #12]
 800eaa4:	f000 fbcf 	bl	800f246 <SPI_EndRxTxTransaction>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d006      	beq.n	800eabc <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800eaae:	2301      	movs	r3, #1
 800eab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2220      	movs	r2, #32
 800eab8:	661a      	str	r2, [r3, #96]	; 0x60
 800eaba:	e000      	b.n	800eabe <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800eabc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2201      	movs	r2, #1
 800eac2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800eace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3728      	adds	r7, #40	; 0x28
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
	...

0800eadc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b086      	sub	sp, #24
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	607a      	str	r2, [r7, #4]
 800eae8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eaea:	2300      	movs	r3, #0
 800eaec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d101      	bne.n	800eafc <HAL_SPI_TransmitReceive_DMA+0x20>
 800eaf8:	2302      	movs	r3, #2
 800eafa:	e16c      	b.n	800edd6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2201      	movs	r2, #1
 800eb00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eb0a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800eb12:	7dbb      	ldrb	r3, [r7, #22]
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	d00d      	beq.n	800eb34 <HAL_SPI_TransmitReceive_DMA+0x58>
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb1e:	d106      	bne.n	800eb2e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d102      	bne.n	800eb2e <HAL_SPI_TransmitReceive_DMA+0x52>
 800eb28:	7dbb      	ldrb	r3, [r7, #22]
 800eb2a:	2b04      	cmp	r3, #4
 800eb2c:	d002      	beq.n	800eb34 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800eb2e:	2302      	movs	r3, #2
 800eb30:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eb32:	e14b      	b.n	800edcc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d005      	beq.n	800eb46 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d002      	beq.n	800eb46 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800eb40:	887b      	ldrh	r3, [r7, #2]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d102      	bne.n	800eb4c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800eb46:	2301      	movs	r3, #1
 800eb48:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eb4a:	e13f      	b.n	800edcc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	2b04      	cmp	r3, #4
 800eb56:	d003      	beq.n	800eb60 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2205      	movs	r2, #5
 800eb5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	68ba      	ldr	r2, [r7, #8]
 800eb6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	887a      	ldrh	r2, [r7, #2]
 800eb70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	887a      	ldrh	r2, [r7, #2]
 800eb76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	887a      	ldrh	r2, [r7, #2]
 800eb82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	887a      	ldrh	r2, [r7, #2]
 800eb8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2200      	movs	r2, #0
 800eb98:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	685a      	ldr	r2, [r3, #4]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800eba8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	68db      	ldr	r3, [r3, #12]
 800ebae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ebb2:	d908      	bls.n	800ebc6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	685a      	ldr	r2, [r3, #4]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ebc2:	605a      	str	r2, [r3, #4]
 800ebc4:	e06f      	b.n	800eca6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	685a      	ldr	r2, [r3, #4]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ebd4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebda:	699b      	ldr	r3, [r3, #24]
 800ebdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ebe0:	d126      	bne.n	800ec30 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ebe6:	f003 0301 	and.w	r3, r3, #1
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d10f      	bne.n	800ec0e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	685a      	ldr	r2, [r3, #4]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ebfc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	085b      	lsrs	r3, r3, #1
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ec0c:	e010      	b.n	800ec30 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	685a      	ldr	r2, [r3, #4]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ec1c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	085b      	lsrs	r3, r3, #1
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	3301      	adds	r3, #1
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec34:	699b      	ldr	r3, [r3, #24]
 800ec36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec3a:	d134      	bne.n	800eca6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	685a      	ldr	r2, [r3, #4]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ec4a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	f003 0301 	and.w	r3, r3, #1
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d111      	bne.n	800ec80 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	685a      	ldr	r2, [r3, #4]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ec6a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	085b      	lsrs	r3, r3, #1
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ec7e:	e012      	b.n	800eca6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ec8e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	085b      	lsrs	r3, r3, #1
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	2b04      	cmp	r3, #4
 800ecb0:	d108      	bne.n	800ecc4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecb6:	4a4a      	ldr	r2, [pc, #296]	; (800ede0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800ecb8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecbe:	4a49      	ldr	r2, [pc, #292]	; (800ede4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800ecc0:	63da      	str	r2, [r3, #60]	; 0x3c
 800ecc2:	e007      	b.n	800ecd4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecc8:	4a47      	ldr	r2, [pc, #284]	; (800ede8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800ecca:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecd0:	4a46      	ldr	r2, [pc, #280]	; (800edec <HAL_SPI_TransmitReceive_DMA+0x310>)
 800ecd2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecd8:	4a45      	ldr	r2, [pc, #276]	; (800edf0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800ecda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ece0:	2200      	movs	r2, #0
 800ece2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	330c      	adds	r3, #12
 800ecee:	4619      	mov	r1, r3
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	f7fc fbd5 	bl	800b4ac <HAL_DMA_Start_IT>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00c      	beq.n	800ed22 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed0c:	f043 0210 	orr.w	r2, r3, #16
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ed14:	2301      	movs	r3, #1
 800ed16:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ed20:	e054      	b.n	800edcc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	685a      	ldr	r2, [r3, #4]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f042 0201 	orr.w	r2, r2, #1
 800ed30:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed36:	2200      	movs	r2, #0
 800ed38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed3e:	2200      	movs	r2, #0
 800ed40:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed46:	2200      	movs	r2, #0
 800ed48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed4e:	2200      	movs	r2, #0
 800ed50:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	330c      	adds	r3, #12
 800ed62:	461a      	mov	r2, r3
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	f7fc fb9f 	bl	800b4ac <HAL_DMA_Start_IT>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d00c      	beq.n	800ed8e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed78:	f043 0210 	orr.w	r2, r3, #16
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ed80:	2301      	movs	r3, #1
 800ed82:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2201      	movs	r2, #1
 800ed88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ed8c:	e01e      	b.n	800edcc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed98:	2b40      	cmp	r3, #64	; 0x40
 800ed9a:	d007      	beq.n	800edac <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800edaa:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	685a      	ldr	r2, [r3, #4]
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f042 0220 	orr.w	r2, r2, #32
 800edba:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	685a      	ldr	r2, [r3, #4]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f042 0202 	orr.w	r2, r2, #2
 800edca:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2200      	movs	r2, #0
 800edd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800edd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3718      	adds	r7, #24
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	0800ef71 	.word	0x0800ef71
 800ede4:	0800ee59 	.word	0x0800ee59
 800ede8:	0800ef8d 	.word	0x0800ef8d
 800edec:	0800eedf 	.word	0x0800eedf
 800edf0:	0800efa9 	.word	0x0800efa9

0800edf4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800edfc:	bf00      	nop
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ee10:	bf00      	nop
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b083      	sub	sp, #12
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ee24:	bf00      	nop
 800ee26:	370c      	adds	r7, #12
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr

0800ee30 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b083      	sub	sp, #12
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ee38:	bf00      	nop
 800ee3a:	370c      	adds	r7, #12
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr

0800ee44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ee4c:	bf00      	nop
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee64:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee66:	f7fc f955 	bl	800b114 <HAL_GetTick>
 800ee6a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee7a:	d02a      	beq.n	800eed2 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	685a      	ldr	r2, [r3, #4]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f022 0220 	bic.w	r2, r2, #32
 800ee8a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	685a      	ldr	r2, [r3, #4]
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f022 0203 	bic.w	r2, r2, #3
 800ee9a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ee9c:	68ba      	ldr	r2, [r7, #8]
 800ee9e:	2164      	movs	r1, #100	; 0x64
 800eea0:	68f8      	ldr	r0, [r7, #12]
 800eea2:	f000 f978 	bl	800f196 <SPI_EndRxTransaction>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d002      	beq.n	800eeb2 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2220      	movs	r2, #32
 800eeb0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2201      	movs	r2, #1
 800eebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d003      	beq.n	800eed2 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800eeca:	68f8      	ldr	r0, [r7, #12]
 800eecc:	f7ff ffba 	bl	800ee44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800eed0:	e002      	b.n	800eed8 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800eed2:	68f8      	ldr	r0, [r7, #12]
 800eed4:	f7ff ff8e 	bl	800edf4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800eed8:	3710      	adds	r7, #16
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}

0800eede <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eede:	b580      	push	{r7, lr}
 800eee0:	b084      	sub	sp, #16
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeea:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eeec:	f7fc f912 	bl	800b114 <HAL_GetTick>
 800eef0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eefc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef00:	d030      	beq.n	800ef64 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	685a      	ldr	r2, [r3, #4]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f022 0220 	bic.w	r2, r2, #32
 800ef10:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	2164      	movs	r1, #100	; 0x64
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f000 f995 	bl	800f246 <SPI_EndRxTxTransaction>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d005      	beq.n	800ef2e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef26:	f043 0220 	orr.w	r2, r3, #32
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	685a      	ldr	r2, [r3, #4]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f022 0203 	bic.w	r2, r2, #3
 800ef3c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2200      	movs	r2, #0
 800ef42:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2200      	movs	r2, #0
 800ef48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d003      	beq.n	800ef64 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ef5c:	68f8      	ldr	r0, [r7, #12]
 800ef5e:	f7ff ff71 	bl	800ee44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ef62:	e002      	b.n	800ef6a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ef64:	68f8      	ldr	r0, [r7, #12]
 800ef66:	f7ff ff4f 	bl	800ee08 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ef6a:	3710      	adds	r7, #16
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef7c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f7ff ff4c 	bl	800ee1c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ef84:	bf00      	nop
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b084      	sub	sp, #16
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef98:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ef9a:	68f8      	ldr	r0, [r7, #12]
 800ef9c:	f7ff ff48 	bl	800ee30 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800efa0:	bf00      	nop
 800efa2:	3710      	adds	r7, #16
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efb4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	685a      	ldr	r2, [r3, #4]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f022 0203 	bic.w	r2, r2, #3
 800efc4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efca:	f043 0210 	orr.w	r2, r3, #16
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2201      	movs	r2, #1
 800efd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f7ff ff32 	bl	800ee44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800efe0:	bf00      	nop
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	603b      	str	r3, [r7, #0]
 800eff4:	4613      	mov	r3, r2
 800eff6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eff8:	e04c      	b.n	800f094 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f000:	d048      	beq.n	800f094 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f002:	f7fc f887 	bl	800b114 <HAL_GetTick>
 800f006:	4602      	mov	r2, r0
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	683a      	ldr	r2, [r7, #0]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d902      	bls.n	800f018 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d13d      	bne.n	800f094 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	685a      	ldr	r2, [r3, #4]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f026:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f030:	d111      	bne.n	800f056 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	689b      	ldr	r3, [r3, #8]
 800f036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f03a:	d004      	beq.n	800f046 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f044:	d107      	bne.n	800f056 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f054:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f05a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f05e:	d10f      	bne.n	800f080 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f06e:	601a      	str	r2, [r3, #0]
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f07e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2201      	movs	r2, #1
 800f084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2200      	movs	r2, #0
 800f08c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f090:	2303      	movs	r3, #3
 800f092:	e00f      	b.n	800f0b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	689a      	ldr	r2, [r3, #8]
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	4013      	ands	r3, r2
 800f09e:	68ba      	ldr	r2, [r7, #8]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	bf0c      	ite	eq
 800f0a4:	2301      	moveq	r3, #1
 800f0a6:	2300      	movne	r3, #0
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	79fb      	ldrb	r3, [r7, #7]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d1a3      	bne.n	800effa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f0b2:	2300      	movs	r3, #0
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3710      	adds	r7, #16
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	607a      	str	r2, [r7, #4]
 800f0c8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800f0ca:	e057      	b.n	800f17c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f0d2:	d106      	bne.n	800f0e2 <SPI_WaitFifoStateUntilTimeout+0x26>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d103      	bne.n	800f0e2 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	330c      	adds	r3, #12
 800f0e0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e8:	d048      	beq.n	800f17c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f0ea:	f7fc f813 	bl	800b114 <HAL_GetTick>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	1ad3      	subs	r3, r2, r3
 800f0f4:	683a      	ldr	r2, [r7, #0]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d902      	bls.n	800f100 <SPI_WaitFifoStateUntilTimeout+0x44>
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d13d      	bne.n	800f17c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	685a      	ldr	r2, [r3, #4]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f10e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f118:	d111      	bne.n	800f13e <SPI_WaitFifoStateUntilTimeout+0x82>
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	689b      	ldr	r3, [r3, #8]
 800f11e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f122:	d004      	beq.n	800f12e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	689b      	ldr	r3, [r3, #8]
 800f128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f12c:	d107      	bne.n	800f13e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f13c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f146:	d10f      	bne.n	800f168 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f156:	601a      	str	r2, [r3, #0]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f166:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2201      	movs	r2, #1
 800f16c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2200      	movs	r2, #0
 800f174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f178:	2303      	movs	r3, #3
 800f17a:	e008      	b.n	800f18e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	689a      	ldr	r2, [r3, #8]
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	4013      	ands	r3, r2
 800f186:	687a      	ldr	r2, [r7, #4]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d19f      	bne.n	800f0cc <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800f18c:	2300      	movs	r3, #0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3710      	adds	r7, #16
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b086      	sub	sp, #24
 800f19a:	af02      	add	r7, sp, #8
 800f19c:	60f8      	str	r0, [r7, #12]
 800f19e:	60b9      	str	r1, [r7, #8]
 800f1a0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f1aa:	d111      	bne.n	800f1d0 <SPI_EndRxTransaction+0x3a>
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	689b      	ldr	r3, [r3, #8]
 800f1b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1b4:	d004      	beq.n	800f1c0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1be:	d107      	bne.n	800f1d0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	681a      	ldr	r2, [r3, #0]
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f1ce:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	2180      	movs	r1, #128	; 0x80
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f7ff ff04 	bl	800efe8 <SPI_WaitFlagStateUntilTimeout>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d007      	beq.n	800f1f6 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1ea:	f043 0220 	orr.w	r2, r3, #32
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f1f2:	2303      	movs	r3, #3
 800f1f4:	e023      	b.n	800f23e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f1fe:	d11d      	bne.n	800f23c <SPI_EndRxTransaction+0xa6>
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	689b      	ldr	r3, [r3, #8]
 800f204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f208:	d004      	beq.n	800f214 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	689b      	ldr	r3, [r3, #8]
 800f20e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f212:	d113      	bne.n	800f23c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	9300      	str	r3, [sp, #0]
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	2200      	movs	r2, #0
 800f21c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f7ff ff4b 	bl	800f0bc <SPI_WaitFifoStateUntilTimeout>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d007      	beq.n	800f23c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f230:	f043 0220 	orr.w	r2, r3, #32
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800f238:	2303      	movs	r3, #3
 800f23a:	e000      	b.n	800f23e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800f23c:	2300      	movs	r3, #0
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b086      	sub	sp, #24
 800f24a:	af02      	add	r7, sp, #8
 800f24c:	60f8      	str	r0, [r7, #12]
 800f24e:	60b9      	str	r1, [r7, #8]
 800f250:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	9300      	str	r3, [sp, #0]
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	2200      	movs	r2, #0
 800f25a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f7ff ff2c 	bl	800f0bc <SPI_WaitFifoStateUntilTimeout>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d007      	beq.n	800f27a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f26e:	f043 0220 	orr.w	r2, r3, #32
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f276:	2303      	movs	r3, #3
 800f278:	e027      	b.n	800f2ca <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	9300      	str	r3, [sp, #0]
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	2200      	movs	r2, #0
 800f282:	2180      	movs	r1, #128	; 0x80
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f7ff feaf 	bl	800efe8 <SPI_WaitFlagStateUntilTimeout>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d007      	beq.n	800f2a0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f294:	f043 0220 	orr.w	r2, r3, #32
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f29c:	2303      	movs	r3, #3
 800f29e:	e014      	b.n	800f2ca <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f7ff ff05 	bl	800f0bc <SPI_WaitFifoStateUntilTimeout>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d007      	beq.n	800f2c8 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2bc:	f043 0220 	orr.w	r2, r3, #32
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f2c4:	2303      	movs	r3, #3
 800f2c6:	e000      	b.n	800f2ca <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f2c8:	2300      	movs	r3, #0
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}

0800f2d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f2d2:	b580      	push	{r7, lr}
 800f2d4:	b082      	sub	sp, #8
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d101      	bne.n	800f2e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	e040      	b.n	800f366 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d106      	bne.n	800f2fa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7fb fd8b 	bl	800ae10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2224      	movs	r2, #36	; 0x24
 800f2fe:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f022 0201 	bic.w	r2, r2, #1
 800f30e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 fb49 	bl	800f9a8 <UART_SetConfig>
 800f316:	4603      	mov	r3, r0
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d101      	bne.n	800f320 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f31c:	2301      	movs	r3, #1
 800f31e:	e022      	b.n	800f366 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f324:	2b00      	cmp	r3, #0
 800f326:	d002      	beq.n	800f32e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f000 fde7 	bl	800fefc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	685a      	ldr	r2, [r3, #4]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f33c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	689a      	ldr	r2, [r3, #8]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f34c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f042 0201 	orr.w	r2, r2, #1
 800f35c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 fe6e 	bl	8010040 <UART_CheckIdleState>
 800f364:	4603      	mov	r3, r0
}
 800f366:	4618      	mov	r0, r3
 800f368:	3708      	adds	r7, #8
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}

0800f36e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f36e:	b580      	push	{r7, lr}
 800f370:	b08a      	sub	sp, #40	; 0x28
 800f372:	af02      	add	r7, sp, #8
 800f374:	60f8      	str	r0, [r7, #12]
 800f376:	60b9      	str	r1, [r7, #8]
 800f378:	603b      	str	r3, [r7, #0]
 800f37a:	4613      	mov	r3, r2
 800f37c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f382:	2b20      	cmp	r3, #32
 800f384:	d17f      	bne.n	800f486 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d002      	beq.n	800f392 <HAL_UART_Transmit+0x24>
 800f38c:	88fb      	ldrh	r3, [r7, #6]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d101      	bne.n	800f396 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f392:	2301      	movs	r3, #1
 800f394:	e078      	b.n	800f488 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d101      	bne.n	800f3a4 <HAL_UART_Transmit+0x36>
 800f3a0:	2302      	movs	r3, #2
 800f3a2:	e071      	b.n	800f488 <HAL_UART_Transmit+0x11a>
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2221      	movs	r2, #33	; 0x21
 800f3b6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f3b8:	f7fb feac 	bl	800b114 <HAL_GetTick>
 800f3bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	88fa      	ldrh	r2, [r7, #6]
 800f3c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	88fa      	ldrh	r2, [r7, #6]
 800f3ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3d6:	d108      	bne.n	800f3ea <HAL_UART_Transmit+0x7c>
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	691b      	ldr	r3, [r3, #16]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d104      	bne.n	800f3ea <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	61bb      	str	r3, [r7, #24]
 800f3e8:	e003      	b.n	800f3f2 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800f3fa:	e02c      	b.n	800f456 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	9300      	str	r3, [sp, #0]
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	2200      	movs	r2, #0
 800f404:	2180      	movs	r1, #128	; 0x80
 800f406:	68f8      	ldr	r0, [r7, #12]
 800f408:	f000 fe5f 	bl	80100ca <UART_WaitOnFlagUntilTimeout>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d001      	beq.n	800f416 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800f412:	2303      	movs	r3, #3
 800f414:	e038      	b.n	800f488 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800f416:	69fb      	ldr	r3, [r7, #28]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d10b      	bne.n	800f434 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	881b      	ldrh	r3, [r3, #0]
 800f420:	461a      	mov	r2, r3
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f42a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f42c:	69bb      	ldr	r3, [r7, #24]
 800f42e:	3302      	adds	r3, #2
 800f430:	61bb      	str	r3, [r7, #24]
 800f432:	e007      	b.n	800f444 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	781a      	ldrb	r2, [r3, #0]
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	3301      	adds	r3, #1
 800f442:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	3b01      	subs	r3, #1
 800f44e:	b29a      	uxth	r2, r3
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f45c:	b29b      	uxth	r3, r3
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d1cc      	bne.n	800f3fc <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	2200      	movs	r2, #0
 800f46a:	2140      	movs	r1, #64	; 0x40
 800f46c:	68f8      	ldr	r0, [r7, #12]
 800f46e:	f000 fe2c 	bl	80100ca <UART_WaitOnFlagUntilTimeout>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d001      	beq.n	800f47c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f478:	2303      	movs	r3, #3
 800f47a:	e005      	b.n	800f488 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2220      	movs	r2, #32
 800f480:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800f482:	2300      	movs	r3, #0
 800f484:	e000      	b.n	800f488 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800f486:	2302      	movs	r3, #2
  }
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3720      	adds	r7, #32
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f490:	b480      	push	{r7}
 800f492:	b085      	sub	sp, #20
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	4613      	mov	r3, r2
 800f49c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4a2:	2b20      	cmp	r3, #32
 800f4a4:	f040 808a 	bne.w	800f5bc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d002      	beq.n	800f4b4 <HAL_UART_Receive_IT+0x24>
 800f4ae:	88fb      	ldrh	r3, [r7, #6]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d101      	bne.n	800f4b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	e082      	b.n	800f5be <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f4be:	2b01      	cmp	r3, #1
 800f4c0:	d101      	bne.n	800f4c6 <HAL_UART_Receive_IT+0x36>
 800f4c2:	2302      	movs	r3, #2
 800f4c4:	e07b      	b.n	800f5be <HAL_UART_Receive_IT+0x12e>
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	68ba      	ldr	r2, [r7, #8]
 800f4d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	88fa      	ldrh	r2, [r7, #6]
 800f4d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	88fa      	ldrh	r2, [r7, #6]
 800f4e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	689b      	ldr	r3, [r3, #8]
 800f4ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4f2:	d10e      	bne.n	800f512 <HAL_UART_Receive_IT+0x82>
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	691b      	ldr	r3, [r3, #16]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d105      	bne.n	800f508 <HAL_UART_Receive_IT+0x78>
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f502:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f506:	e02d      	b.n	800f564 <HAL_UART_Receive_IT+0xd4>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	22ff      	movs	r2, #255	; 0xff
 800f50c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f510:	e028      	b.n	800f564 <HAL_UART_Receive_IT+0xd4>
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	689b      	ldr	r3, [r3, #8]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d10d      	bne.n	800f536 <HAL_UART_Receive_IT+0xa6>
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d104      	bne.n	800f52c <HAL_UART_Receive_IT+0x9c>
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	22ff      	movs	r2, #255	; 0xff
 800f526:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f52a:	e01b      	b.n	800f564 <HAL_UART_Receive_IT+0xd4>
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	227f      	movs	r2, #127	; 0x7f
 800f530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f534:	e016      	b.n	800f564 <HAL_UART_Receive_IT+0xd4>
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	689b      	ldr	r3, [r3, #8]
 800f53a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f53e:	d10d      	bne.n	800f55c <HAL_UART_Receive_IT+0xcc>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	691b      	ldr	r3, [r3, #16]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d104      	bne.n	800f552 <HAL_UART_Receive_IT+0xc2>
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	227f      	movs	r2, #127	; 0x7f
 800f54c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f550:	e008      	b.n	800f564 <HAL_UART_Receive_IT+0xd4>
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	223f      	movs	r2, #63	; 0x3f
 800f556:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f55a:	e003      	b.n	800f564 <HAL_UART_Receive_IT+0xd4>
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2200      	movs	r2, #0
 800f560:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2200      	movs	r2, #0
 800f568:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2222      	movs	r2, #34	; 0x22
 800f56e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	689a      	ldr	r2, [r3, #8]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f042 0201 	orr.w	r2, r2, #1
 800f57e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	689b      	ldr	r3, [r3, #8]
 800f584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f588:	d107      	bne.n	800f59a <HAL_UART_Receive_IT+0x10a>
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	691b      	ldr	r3, [r3, #16]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d103      	bne.n	800f59a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	4a0d      	ldr	r2, [pc, #52]	; (800f5cc <HAL_UART_Receive_IT+0x13c>)
 800f596:	661a      	str	r2, [r3, #96]	; 0x60
 800f598:	e002      	b.n	800f5a0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	4a0c      	ldr	r2, [pc, #48]	; (800f5d0 <HAL_UART_Receive_IT+0x140>)
 800f59e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f5b6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	e000      	b.n	800f5be <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800f5bc:	2302      	movs	r3, #2
  }
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3714      	adds	r7, #20
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop
 800f5cc:	08010413 	.word	0x08010413
 800f5d0:	0801036d 	.word	0x0801036d

0800f5d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	4613      	mov	r3, r2
 800f5e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5e6:	2b20      	cmp	r3, #32
 800f5e8:	d164      	bne.n	800f6b4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d002      	beq.n	800f5f6 <HAL_UART_Transmit_DMA+0x22>
 800f5f0:	88fb      	ldrh	r3, [r7, #6]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d101      	bne.n	800f5fa <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e05d      	b.n	800f6b6 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f600:	2b01      	cmp	r3, #1
 800f602:	d101      	bne.n	800f608 <HAL_UART_Transmit_DMA+0x34>
 800f604:	2302      	movs	r3, #2
 800f606:	e056      	b.n	800f6b6 <HAL_UART_Transmit_DMA+0xe2>
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2201      	movs	r2, #1
 800f60c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	68ba      	ldr	r2, [r7, #8]
 800f614:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	88fa      	ldrh	r2, [r7, #6]
 800f61a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	88fa      	ldrh	r2, [r7, #6]
 800f622:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2200      	movs	r2, #0
 800f62a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2221      	movs	r2, #33	; 0x21
 800f630:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f636:	2b00      	cmp	r3, #0
 800f638:	d02a      	beq.n	800f690 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f63e:	4a20      	ldr	r2, [pc, #128]	; (800f6c0 <HAL_UART_Transmit_DMA+0xec>)
 800f640:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f646:	4a1f      	ldr	r2, [pc, #124]	; (800f6c4 <HAL_UART_Transmit_DMA+0xf0>)
 800f648:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f64e:	4a1e      	ldr	r2, [pc, #120]	; (800f6c8 <HAL_UART_Transmit_DMA+0xf4>)
 800f650:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f656:	2200      	movs	r2, #0
 800f658:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f662:	4619      	mov	r1, r3
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	3328      	adds	r3, #40	; 0x28
 800f66a:	461a      	mov	r2, r3
 800f66c:	88fb      	ldrh	r3, [r7, #6]
 800f66e:	f7fb ff1d 	bl	800b4ac <HAL_DMA_Start_IT>
 800f672:	4603      	mov	r3, r0
 800f674:	2b00      	cmp	r3, #0
 800f676:	d00b      	beq.n	800f690 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2210      	movs	r2, #16
 800f67c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2200      	movs	r2, #0
 800f682:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2220      	movs	r2, #32
 800f68a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800f68c:	2301      	movs	r3, #1
 800f68e:	e012      	b.n	800f6b6 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2240      	movs	r2, #64	; 0x40
 800f696:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2200      	movs	r2, #0
 800f69c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	689a      	ldr	r2, [r3, #8]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f6ae:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	e000      	b.n	800f6b6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800f6b4:	2302      	movs	r3, #2
  }
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	0801022b 	.word	0x0801022b
 800f6c4:	0801027b 	.word	0x0801027b
 800f6c8:	08010297 	.word	0x08010297

0800f6cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b088      	sub	sp, #32
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	69db      	ldr	r3, [r3, #28]
 800f6da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	689b      	ldr	r3, [r3, #8]
 800f6ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f6ec:	69fa      	ldr	r2, [r7, #28]
 800f6ee:	f640 030f 	movw	r3, #2063	; 0x80f
 800f6f2:	4013      	ands	r3, r2
 800f6f4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d113      	bne.n	800f724 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	f003 0320 	and.w	r3, r3, #32
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00e      	beq.n	800f724 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f706:	69bb      	ldr	r3, [r7, #24]
 800f708:	f003 0320 	and.w	r3, r3, #32
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d009      	beq.n	800f724 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f714:	2b00      	cmp	r3, #0
 800f716:	f000 8114 	beq.w	800f942 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	4798      	blx	r3
      }
      return;
 800f722:	e10e      	b.n	800f942 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	2b00      	cmp	r3, #0
 800f728:	f000 80d6 	beq.w	800f8d8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f003 0301 	and.w	r3, r3, #1
 800f732:	2b00      	cmp	r3, #0
 800f734:	d105      	bne.n	800f742 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f000 80cb 	beq.w	800f8d8 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	f003 0301 	and.w	r3, r3, #1
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d00e      	beq.n	800f76a <HAL_UART_IRQHandler+0x9e>
 800f74c:	69bb      	ldr	r3, [r7, #24]
 800f74e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f752:	2b00      	cmp	r3, #0
 800f754:	d009      	beq.n	800f76a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	2201      	movs	r2, #1
 800f75c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f762:	f043 0201 	orr.w	r2, r3, #1
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	f003 0302 	and.w	r3, r3, #2
 800f770:	2b00      	cmp	r3, #0
 800f772:	d00e      	beq.n	800f792 <HAL_UART_IRQHandler+0xc6>
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	f003 0301 	and.w	r3, r3, #1
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d009      	beq.n	800f792 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	2202      	movs	r2, #2
 800f784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f78a:	f043 0204 	orr.w	r2, r3, #4
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f792:	69fb      	ldr	r3, [r7, #28]
 800f794:	f003 0304 	and.w	r3, r3, #4
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d00e      	beq.n	800f7ba <HAL_UART_IRQHandler+0xee>
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	f003 0301 	and.w	r3, r3, #1
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d009      	beq.n	800f7ba <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2204      	movs	r2, #4
 800f7ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7b2:	f043 0202 	orr.w	r2, r3, #2
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f7ba:	69fb      	ldr	r3, [r7, #28]
 800f7bc:	f003 0308 	and.w	r3, r3, #8
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d013      	beq.n	800f7ec <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f7c4:	69bb      	ldr	r3, [r7, #24]
 800f7c6:	f003 0320 	and.w	r3, r3, #32
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d104      	bne.n	800f7d8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d009      	beq.n	800f7ec <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2208      	movs	r2, #8
 800f7de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7e4:	f043 0208 	orr.w	r2, r3, #8
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f7ec:	69fb      	ldr	r3, [r7, #28]
 800f7ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00f      	beq.n	800f816 <HAL_UART_IRQHandler+0x14a>
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00a      	beq.n	800f816 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f808:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f80e:	f043 0220 	orr.w	r2, r3, #32
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f000 8093 	beq.w	800f946 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	f003 0320 	and.w	r3, r3, #32
 800f826:	2b00      	cmp	r3, #0
 800f828:	d00c      	beq.n	800f844 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	f003 0320 	and.w	r3, r3, #32
 800f830:	2b00      	cmp	r3, #0
 800f832:	d007      	beq.n	800f844 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d003      	beq.n	800f844 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f848:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	689b      	ldr	r3, [r3, #8]
 800f850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f854:	2b40      	cmp	r3, #64	; 0x40
 800f856:	d004      	beq.n	800f862 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d031      	beq.n	800f8c6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 fcc1 	bl	80101ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	689b      	ldr	r3, [r3, #8]
 800f86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f872:	2b40      	cmp	r3, #64	; 0x40
 800f874:	d123      	bne.n	800f8be <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	689a      	ldr	r2, [r3, #8]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f884:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d013      	beq.n	800f8b6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f892:	4a30      	ldr	r2, [pc, #192]	; (800f954 <HAL_UART_IRQHandler+0x288>)
 800f894:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fb fe66 	bl	800b56c <HAL_DMA_Abort_IT>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d016      	beq.n	800f8d4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8b4:	e00e      	b.n	800f8d4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 f862 	bl	800f980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8bc:	e00a      	b.n	800f8d4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 f85e 	bl	800f980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8c4:	e006      	b.n	800f8d4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f000 f85a 	bl	800f980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800f8d2:	e038      	b.n	800f946 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8d4:	bf00      	nop
    return;
 800f8d6:	e036      	b.n	800f946 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d00d      	beq.n	800f8fe <HAL_UART_IRQHandler+0x232>
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d008      	beq.n	800f8fe <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f8f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 f84c 	bl	800f994 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f8fc:	e026      	b.n	800f94c <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f904:	2b00      	cmp	r3, #0
 800f906:	d00d      	beq.n	800f924 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f908:	69bb      	ldr	r3, [r7, #24]
 800f90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d008      	beq.n	800f924 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f916:	2b00      	cmp	r3, #0
 800f918:	d017      	beq.n	800f94a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	4798      	blx	r3
    }
    return;
 800f922:	e012      	b.n	800f94a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00e      	beq.n	800f94c <HAL_UART_IRQHandler+0x280>
 800f92e:	69bb      	ldr	r3, [r7, #24]
 800f930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f934:	2b00      	cmp	r3, #0
 800f936:	d009      	beq.n	800f94c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 fcfe 	bl	801033a <UART_EndTransmit_IT>
    return;
 800f93e:	bf00      	nop
 800f940:	e004      	b.n	800f94c <HAL_UART_IRQHandler+0x280>
      return;
 800f942:	bf00      	nop
 800f944:	e002      	b.n	800f94c <HAL_UART_IRQHandler+0x280>
    return;
 800f946:	bf00      	nop
 800f948:	e000      	b.n	800f94c <HAL_UART_IRQHandler+0x280>
    return;
 800f94a:	bf00      	nop
  }

}
 800f94c:	3720      	adds	r7, #32
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}
 800f952:	bf00      	nop
 800f954:	0801030f 	.word	0x0801030f

0800f958 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f960:	bf00      	nop
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f974:	bf00      	nop
 800f976:	370c      	adds	r7, #12
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f980:	b480      	push	{r7}
 800f982:	b083      	sub	sp, #12
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f988:	bf00      	nop
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f99c:	bf00      	nop
 800f99e:	370c      	adds	r7, #12
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr

0800f9a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b088      	sub	sp, #32
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	689a      	ldr	r2, [r3, #8]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	691b      	ldr	r3, [r3, #16]
 800f9c0:	431a      	orrs	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	695b      	ldr	r3, [r3, #20]
 800f9c6:	431a      	orrs	r2, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	69db      	ldr	r3, [r3, #28]
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	4bb1      	ldr	r3, [pc, #708]	; (800fc9c <UART_SetConfig+0x2f4>)
 800f9d8:	4013      	ands	r3, r2
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	6812      	ldr	r2, [r2, #0]
 800f9de:	6939      	ldr	r1, [r7, #16]
 800f9e0:	430b      	orrs	r3, r1
 800f9e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	68da      	ldr	r2, [r3, #12]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	430a      	orrs	r2, r1
 800f9f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	699b      	ldr	r3, [r3, #24]
 800f9fe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6a1b      	ldr	r3, [r3, #32]
 800fa04:	693a      	ldr	r2, [r7, #16]
 800fa06:	4313      	orrs	r3, r2
 800fa08:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	689b      	ldr	r3, [r3, #8]
 800fa10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	693a      	ldr	r2, [r7, #16]
 800fa1a:	430a      	orrs	r2, r1
 800fa1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	4a9f      	ldr	r2, [pc, #636]	; (800fca0 <UART_SetConfig+0x2f8>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d121      	bne.n	800fa6c <UART_SetConfig+0xc4>
 800fa28:	4b9e      	ldr	r3, [pc, #632]	; (800fca4 <UART_SetConfig+0x2fc>)
 800fa2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa2e:	f003 0303 	and.w	r3, r3, #3
 800fa32:	2b03      	cmp	r3, #3
 800fa34:	d816      	bhi.n	800fa64 <UART_SetConfig+0xbc>
 800fa36:	a201      	add	r2, pc, #4	; (adr r2, 800fa3c <UART_SetConfig+0x94>)
 800fa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa3c:	0800fa4d 	.word	0x0800fa4d
 800fa40:	0800fa59 	.word	0x0800fa59
 800fa44:	0800fa53 	.word	0x0800fa53
 800fa48:	0800fa5f 	.word	0x0800fa5f
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	77fb      	strb	r3, [r7, #31]
 800fa50:	e151      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fa52:	2302      	movs	r3, #2
 800fa54:	77fb      	strb	r3, [r7, #31]
 800fa56:	e14e      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fa58:	2304      	movs	r3, #4
 800fa5a:	77fb      	strb	r3, [r7, #31]
 800fa5c:	e14b      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fa5e:	2308      	movs	r3, #8
 800fa60:	77fb      	strb	r3, [r7, #31]
 800fa62:	e148      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fa64:	2310      	movs	r3, #16
 800fa66:	77fb      	strb	r3, [r7, #31]
 800fa68:	bf00      	nop
 800fa6a:	e144      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a8d      	ldr	r2, [pc, #564]	; (800fca8 <UART_SetConfig+0x300>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d134      	bne.n	800fae0 <UART_SetConfig+0x138>
 800fa76:	4b8b      	ldr	r3, [pc, #556]	; (800fca4 <UART_SetConfig+0x2fc>)
 800fa78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa7c:	f003 030c 	and.w	r3, r3, #12
 800fa80:	2b0c      	cmp	r3, #12
 800fa82:	d829      	bhi.n	800fad8 <UART_SetConfig+0x130>
 800fa84:	a201      	add	r2, pc, #4	; (adr r2, 800fa8c <UART_SetConfig+0xe4>)
 800fa86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa8a:	bf00      	nop
 800fa8c:	0800fac1 	.word	0x0800fac1
 800fa90:	0800fad9 	.word	0x0800fad9
 800fa94:	0800fad9 	.word	0x0800fad9
 800fa98:	0800fad9 	.word	0x0800fad9
 800fa9c:	0800facd 	.word	0x0800facd
 800faa0:	0800fad9 	.word	0x0800fad9
 800faa4:	0800fad9 	.word	0x0800fad9
 800faa8:	0800fad9 	.word	0x0800fad9
 800faac:	0800fac7 	.word	0x0800fac7
 800fab0:	0800fad9 	.word	0x0800fad9
 800fab4:	0800fad9 	.word	0x0800fad9
 800fab8:	0800fad9 	.word	0x0800fad9
 800fabc:	0800fad3 	.word	0x0800fad3
 800fac0:	2300      	movs	r3, #0
 800fac2:	77fb      	strb	r3, [r7, #31]
 800fac4:	e117      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fac6:	2302      	movs	r3, #2
 800fac8:	77fb      	strb	r3, [r7, #31]
 800faca:	e114      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800facc:	2304      	movs	r3, #4
 800face:	77fb      	strb	r3, [r7, #31]
 800fad0:	e111      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fad2:	2308      	movs	r3, #8
 800fad4:	77fb      	strb	r3, [r7, #31]
 800fad6:	e10e      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fad8:	2310      	movs	r3, #16
 800fada:	77fb      	strb	r3, [r7, #31]
 800fadc:	bf00      	nop
 800fade:	e10a      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4a71      	ldr	r2, [pc, #452]	; (800fcac <UART_SetConfig+0x304>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d120      	bne.n	800fb2c <UART_SetConfig+0x184>
 800faea:	4b6e      	ldr	r3, [pc, #440]	; (800fca4 <UART_SetConfig+0x2fc>)
 800faec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800faf0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800faf4:	2b10      	cmp	r3, #16
 800faf6:	d00f      	beq.n	800fb18 <UART_SetConfig+0x170>
 800faf8:	2b10      	cmp	r3, #16
 800fafa:	d802      	bhi.n	800fb02 <UART_SetConfig+0x15a>
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d005      	beq.n	800fb0c <UART_SetConfig+0x164>
 800fb00:	e010      	b.n	800fb24 <UART_SetConfig+0x17c>
 800fb02:	2b20      	cmp	r3, #32
 800fb04:	d005      	beq.n	800fb12 <UART_SetConfig+0x16a>
 800fb06:	2b30      	cmp	r3, #48	; 0x30
 800fb08:	d009      	beq.n	800fb1e <UART_SetConfig+0x176>
 800fb0a:	e00b      	b.n	800fb24 <UART_SetConfig+0x17c>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	77fb      	strb	r3, [r7, #31]
 800fb10:	e0f1      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fb12:	2302      	movs	r3, #2
 800fb14:	77fb      	strb	r3, [r7, #31]
 800fb16:	e0ee      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fb18:	2304      	movs	r3, #4
 800fb1a:	77fb      	strb	r3, [r7, #31]
 800fb1c:	e0eb      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fb1e:	2308      	movs	r3, #8
 800fb20:	77fb      	strb	r3, [r7, #31]
 800fb22:	e0e8      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fb24:	2310      	movs	r3, #16
 800fb26:	77fb      	strb	r3, [r7, #31]
 800fb28:	bf00      	nop
 800fb2a:	e0e4      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4a5f      	ldr	r2, [pc, #380]	; (800fcb0 <UART_SetConfig+0x308>)
 800fb32:	4293      	cmp	r3, r2
 800fb34:	d120      	bne.n	800fb78 <UART_SetConfig+0x1d0>
 800fb36:	4b5b      	ldr	r3, [pc, #364]	; (800fca4 <UART_SetConfig+0x2fc>)
 800fb38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fb40:	2b40      	cmp	r3, #64	; 0x40
 800fb42:	d00f      	beq.n	800fb64 <UART_SetConfig+0x1bc>
 800fb44:	2b40      	cmp	r3, #64	; 0x40
 800fb46:	d802      	bhi.n	800fb4e <UART_SetConfig+0x1a6>
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d005      	beq.n	800fb58 <UART_SetConfig+0x1b0>
 800fb4c:	e010      	b.n	800fb70 <UART_SetConfig+0x1c8>
 800fb4e:	2b80      	cmp	r3, #128	; 0x80
 800fb50:	d005      	beq.n	800fb5e <UART_SetConfig+0x1b6>
 800fb52:	2bc0      	cmp	r3, #192	; 0xc0
 800fb54:	d009      	beq.n	800fb6a <UART_SetConfig+0x1c2>
 800fb56:	e00b      	b.n	800fb70 <UART_SetConfig+0x1c8>
 800fb58:	2300      	movs	r3, #0
 800fb5a:	77fb      	strb	r3, [r7, #31]
 800fb5c:	e0cb      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fb5e:	2302      	movs	r3, #2
 800fb60:	77fb      	strb	r3, [r7, #31]
 800fb62:	e0c8      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fb64:	2304      	movs	r3, #4
 800fb66:	77fb      	strb	r3, [r7, #31]
 800fb68:	e0c5      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fb6a:	2308      	movs	r3, #8
 800fb6c:	77fb      	strb	r3, [r7, #31]
 800fb6e:	e0c2      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fb70:	2310      	movs	r3, #16
 800fb72:	77fb      	strb	r3, [r7, #31]
 800fb74:	bf00      	nop
 800fb76:	e0be      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	4a4d      	ldr	r2, [pc, #308]	; (800fcb4 <UART_SetConfig+0x30c>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d124      	bne.n	800fbcc <UART_SetConfig+0x224>
 800fb82:	4b48      	ldr	r3, [pc, #288]	; (800fca4 <UART_SetConfig+0x2fc>)
 800fb84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb90:	d012      	beq.n	800fbb8 <UART_SetConfig+0x210>
 800fb92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb96:	d802      	bhi.n	800fb9e <UART_SetConfig+0x1f6>
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d007      	beq.n	800fbac <UART_SetConfig+0x204>
 800fb9c:	e012      	b.n	800fbc4 <UART_SetConfig+0x21c>
 800fb9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fba2:	d006      	beq.n	800fbb2 <UART_SetConfig+0x20a>
 800fba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fba8:	d009      	beq.n	800fbbe <UART_SetConfig+0x216>
 800fbaa:	e00b      	b.n	800fbc4 <UART_SetConfig+0x21c>
 800fbac:	2300      	movs	r3, #0
 800fbae:	77fb      	strb	r3, [r7, #31]
 800fbb0:	e0a1      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fbb2:	2302      	movs	r3, #2
 800fbb4:	77fb      	strb	r3, [r7, #31]
 800fbb6:	e09e      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fbb8:	2304      	movs	r3, #4
 800fbba:	77fb      	strb	r3, [r7, #31]
 800fbbc:	e09b      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fbbe:	2308      	movs	r3, #8
 800fbc0:	77fb      	strb	r3, [r7, #31]
 800fbc2:	e098      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fbc4:	2310      	movs	r3, #16
 800fbc6:	77fb      	strb	r3, [r7, #31]
 800fbc8:	bf00      	nop
 800fbca:	e094      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4a39      	ldr	r2, [pc, #228]	; (800fcb8 <UART_SetConfig+0x310>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d124      	bne.n	800fc20 <UART_SetConfig+0x278>
 800fbd6:	4b33      	ldr	r3, [pc, #204]	; (800fca4 <UART_SetConfig+0x2fc>)
 800fbd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fbe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbe4:	d012      	beq.n	800fc0c <UART_SetConfig+0x264>
 800fbe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbea:	d802      	bhi.n	800fbf2 <UART_SetConfig+0x24a>
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d007      	beq.n	800fc00 <UART_SetConfig+0x258>
 800fbf0:	e012      	b.n	800fc18 <UART_SetConfig+0x270>
 800fbf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fbf6:	d006      	beq.n	800fc06 <UART_SetConfig+0x25e>
 800fbf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fbfc:	d009      	beq.n	800fc12 <UART_SetConfig+0x26a>
 800fbfe:	e00b      	b.n	800fc18 <UART_SetConfig+0x270>
 800fc00:	2301      	movs	r3, #1
 800fc02:	77fb      	strb	r3, [r7, #31]
 800fc04:	e077      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fc06:	2302      	movs	r3, #2
 800fc08:	77fb      	strb	r3, [r7, #31]
 800fc0a:	e074      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fc0c:	2304      	movs	r3, #4
 800fc0e:	77fb      	strb	r3, [r7, #31]
 800fc10:	e071      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fc12:	2308      	movs	r3, #8
 800fc14:	77fb      	strb	r3, [r7, #31]
 800fc16:	e06e      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fc18:	2310      	movs	r3, #16
 800fc1a:	77fb      	strb	r3, [r7, #31]
 800fc1c:	bf00      	nop
 800fc1e:	e06a      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4a25      	ldr	r2, [pc, #148]	; (800fcbc <UART_SetConfig+0x314>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d124      	bne.n	800fc74 <UART_SetConfig+0x2cc>
 800fc2a:	4b1e      	ldr	r3, [pc, #120]	; (800fca4 <UART_SetConfig+0x2fc>)
 800fc2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc30:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fc34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc38:	d012      	beq.n	800fc60 <UART_SetConfig+0x2b8>
 800fc3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc3e:	d802      	bhi.n	800fc46 <UART_SetConfig+0x29e>
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d007      	beq.n	800fc54 <UART_SetConfig+0x2ac>
 800fc44:	e012      	b.n	800fc6c <UART_SetConfig+0x2c4>
 800fc46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc4a:	d006      	beq.n	800fc5a <UART_SetConfig+0x2b2>
 800fc4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fc50:	d009      	beq.n	800fc66 <UART_SetConfig+0x2be>
 800fc52:	e00b      	b.n	800fc6c <UART_SetConfig+0x2c4>
 800fc54:	2300      	movs	r3, #0
 800fc56:	77fb      	strb	r3, [r7, #31]
 800fc58:	e04d      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fc5a:	2302      	movs	r3, #2
 800fc5c:	77fb      	strb	r3, [r7, #31]
 800fc5e:	e04a      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fc60:	2304      	movs	r3, #4
 800fc62:	77fb      	strb	r3, [r7, #31]
 800fc64:	e047      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fc66:	2308      	movs	r3, #8
 800fc68:	77fb      	strb	r3, [r7, #31]
 800fc6a:	e044      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fc6c:	2310      	movs	r3, #16
 800fc6e:	77fb      	strb	r3, [r7, #31]
 800fc70:	bf00      	nop
 800fc72:	e040      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4a11      	ldr	r2, [pc, #68]	; (800fcc0 <UART_SetConfig+0x318>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d139      	bne.n	800fcf2 <UART_SetConfig+0x34a>
 800fc7e:	4b09      	ldr	r3, [pc, #36]	; (800fca4 <UART_SetConfig+0x2fc>)
 800fc80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fc88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fc8c:	d027      	beq.n	800fcde <UART_SetConfig+0x336>
 800fc8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fc92:	d817      	bhi.n	800fcc4 <UART_SetConfig+0x31c>
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d01c      	beq.n	800fcd2 <UART_SetConfig+0x32a>
 800fc98:	e027      	b.n	800fcea <UART_SetConfig+0x342>
 800fc9a:	bf00      	nop
 800fc9c:	efff69f3 	.word	0xefff69f3
 800fca0:	40011000 	.word	0x40011000
 800fca4:	40023800 	.word	0x40023800
 800fca8:	40004400 	.word	0x40004400
 800fcac:	40004800 	.word	0x40004800
 800fcb0:	40004c00 	.word	0x40004c00
 800fcb4:	40005000 	.word	0x40005000
 800fcb8:	40011400 	.word	0x40011400
 800fcbc:	40007800 	.word	0x40007800
 800fcc0:	40007c00 	.word	0x40007c00
 800fcc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fcc8:	d006      	beq.n	800fcd8 <UART_SetConfig+0x330>
 800fcca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fcce:	d009      	beq.n	800fce4 <UART_SetConfig+0x33c>
 800fcd0:	e00b      	b.n	800fcea <UART_SetConfig+0x342>
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	77fb      	strb	r3, [r7, #31]
 800fcd6:	e00e      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fcd8:	2302      	movs	r3, #2
 800fcda:	77fb      	strb	r3, [r7, #31]
 800fcdc:	e00b      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fcde:	2304      	movs	r3, #4
 800fce0:	77fb      	strb	r3, [r7, #31]
 800fce2:	e008      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fce4:	2308      	movs	r3, #8
 800fce6:	77fb      	strb	r3, [r7, #31]
 800fce8:	e005      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fcea:	2310      	movs	r3, #16
 800fcec:	77fb      	strb	r3, [r7, #31]
 800fcee:	bf00      	nop
 800fcf0:	e001      	b.n	800fcf6 <UART_SetConfig+0x34e>
 800fcf2:	2310      	movs	r3, #16
 800fcf4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	69db      	ldr	r3, [r3, #28]
 800fcfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fcfe:	d17f      	bne.n	800fe00 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800fd00:	7ffb      	ldrb	r3, [r7, #31]
 800fd02:	2b08      	cmp	r3, #8
 800fd04:	d85c      	bhi.n	800fdc0 <UART_SetConfig+0x418>
 800fd06:	a201      	add	r2, pc, #4	; (adr r2, 800fd0c <UART_SetConfig+0x364>)
 800fd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd0c:	0800fd31 	.word	0x0800fd31
 800fd10:	0800fd51 	.word	0x0800fd51
 800fd14:	0800fd71 	.word	0x0800fd71
 800fd18:	0800fdc1 	.word	0x0800fdc1
 800fd1c:	0800fd89 	.word	0x0800fd89
 800fd20:	0800fdc1 	.word	0x0800fdc1
 800fd24:	0800fdc1 	.word	0x0800fdc1
 800fd28:	0800fdc1 	.word	0x0800fdc1
 800fd2c:	0800fda9 	.word	0x0800fda9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd30:	f7fd fe7a 	bl	800da28 <HAL_RCC_GetPCLK1Freq>
 800fd34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	005a      	lsls	r2, r3, #1
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	085b      	lsrs	r3, r3, #1
 800fd40:	441a      	add	r2, r3
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	61bb      	str	r3, [r7, #24]
        break;
 800fd4e:	e03a      	b.n	800fdc6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd50:	f7fd fe7e 	bl	800da50 <HAL_RCC_GetPCLK2Freq>
 800fd54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	005a      	lsls	r2, r3, #1
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	085b      	lsrs	r3, r3, #1
 800fd60:	441a      	add	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd6a:	b29b      	uxth	r3, r3
 800fd6c:	61bb      	str	r3, [r7, #24]
        break;
 800fd6e:	e02a      	b.n	800fdc6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	085a      	lsrs	r2, r3, #1
 800fd76:	4b5f      	ldr	r3, [pc, #380]	; (800fef4 <UART_SetConfig+0x54c>)
 800fd78:	4413      	add	r3, r2
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	6852      	ldr	r2, [r2, #4]
 800fd7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	61bb      	str	r3, [r7, #24]
        break;
 800fd86:	e01e      	b.n	800fdc6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fd88:	f7fd fd6c 	bl	800d864 <HAL_RCC_GetSysClockFreq>
 800fd8c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	005a      	lsls	r2, r3, #1
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	085b      	lsrs	r3, r3, #1
 800fd98:	441a      	add	r2, r3
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	61bb      	str	r3, [r7, #24]
        break;
 800fda6:	e00e      	b.n	800fdc6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	685b      	ldr	r3, [r3, #4]
 800fdac:	085b      	lsrs	r3, r3, #1
 800fdae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	61bb      	str	r3, [r7, #24]
        break;
 800fdbe:	e002      	b.n	800fdc6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	75fb      	strb	r3, [r7, #23]
        break;
 800fdc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fdc6:	69bb      	ldr	r3, [r7, #24]
 800fdc8:	2b0f      	cmp	r3, #15
 800fdca:	d916      	bls.n	800fdfa <UART_SetConfig+0x452>
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdd2:	d212      	bcs.n	800fdfa <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fdd4:	69bb      	ldr	r3, [r7, #24]
 800fdd6:	b29b      	uxth	r3, r3
 800fdd8:	f023 030f 	bic.w	r3, r3, #15
 800fddc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fdde:	69bb      	ldr	r3, [r7, #24]
 800fde0:	085b      	lsrs	r3, r3, #1
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	f003 0307 	and.w	r3, r3, #7
 800fde8:	b29a      	uxth	r2, r3
 800fdea:	897b      	ldrh	r3, [r7, #10]
 800fdec:	4313      	orrs	r3, r2
 800fdee:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	897a      	ldrh	r2, [r7, #10]
 800fdf6:	60da      	str	r2, [r3, #12]
 800fdf8:	e070      	b.n	800fedc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	75fb      	strb	r3, [r7, #23]
 800fdfe:	e06d      	b.n	800fedc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800fe00:	7ffb      	ldrb	r3, [r7, #31]
 800fe02:	2b08      	cmp	r3, #8
 800fe04:	d859      	bhi.n	800feba <UART_SetConfig+0x512>
 800fe06:	a201      	add	r2, pc, #4	; (adr r2, 800fe0c <UART_SetConfig+0x464>)
 800fe08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe0c:	0800fe31 	.word	0x0800fe31
 800fe10:	0800fe4f 	.word	0x0800fe4f
 800fe14:	0800fe6d 	.word	0x0800fe6d
 800fe18:	0800febb 	.word	0x0800febb
 800fe1c:	0800fe85 	.word	0x0800fe85
 800fe20:	0800febb 	.word	0x0800febb
 800fe24:	0800febb 	.word	0x0800febb
 800fe28:	0800febb 	.word	0x0800febb
 800fe2c:	0800fea3 	.word	0x0800fea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe30:	f7fd fdfa 	bl	800da28 <HAL_RCC_GetPCLK1Freq>
 800fe34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	085a      	lsrs	r2, r3, #1
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	441a      	add	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	61bb      	str	r3, [r7, #24]
        break;
 800fe4c:	e038      	b.n	800fec0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe4e:	f7fd fdff 	bl	800da50 <HAL_RCC_GetPCLK2Freq>
 800fe52:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	085a      	lsrs	r2, r3, #1
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	441a      	add	r2, r3
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	61bb      	str	r3, [r7, #24]
        break;
 800fe6a:	e029      	b.n	800fec0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	085a      	lsrs	r2, r3, #1
 800fe72:	4b21      	ldr	r3, [pc, #132]	; (800fef8 <UART_SetConfig+0x550>)
 800fe74:	4413      	add	r3, r2
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	6852      	ldr	r2, [r2, #4]
 800fe7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	61bb      	str	r3, [r7, #24]
        break;
 800fe82:	e01d      	b.n	800fec0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fe84:	f7fd fcee 	bl	800d864 <HAL_RCC_GetSysClockFreq>
 800fe88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	085a      	lsrs	r2, r3, #1
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	441a      	add	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	61bb      	str	r3, [r7, #24]
        break;
 800fea0:	e00e      	b.n	800fec0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	085b      	lsrs	r3, r3, #1
 800fea8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	61bb      	str	r3, [r7, #24]
        break;
 800feb8:	e002      	b.n	800fec0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800feba:	2301      	movs	r3, #1
 800febc:	75fb      	strb	r3, [r7, #23]
        break;
 800febe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fec0:	69bb      	ldr	r3, [r7, #24]
 800fec2:	2b0f      	cmp	r3, #15
 800fec4:	d908      	bls.n	800fed8 <UART_SetConfig+0x530>
 800fec6:	69bb      	ldr	r3, [r7, #24]
 800fec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fecc:	d204      	bcs.n	800fed8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	69ba      	ldr	r2, [r7, #24]
 800fed4:	60da      	str	r2, [r3, #12]
 800fed6:	e001      	b.n	800fedc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800fed8:	2301      	movs	r3, #1
 800feda:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2200      	movs	r2, #0
 800fee0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2200      	movs	r2, #0
 800fee6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800fee8:	7dfb      	ldrb	r3, [r7, #23]
}
 800feea:	4618      	mov	r0, r3
 800feec:	3720      	adds	r7, #32
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}
 800fef2:	bf00      	nop
 800fef4:	01e84800 	.word	0x01e84800
 800fef8:	00f42400 	.word	0x00f42400

0800fefc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff08:	f003 0301 	and.w	r3, r3, #1
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d00a      	beq.n	800ff26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	430a      	orrs	r2, r1
 800ff24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff2a:	f003 0302 	and.w	r3, r3, #2
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d00a      	beq.n	800ff48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	430a      	orrs	r2, r1
 800ff46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4c:	f003 0304 	and.w	r3, r3, #4
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d00a      	beq.n	800ff6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	685b      	ldr	r3, [r3, #4]
 800ff5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	430a      	orrs	r2, r1
 800ff68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6e:	f003 0308 	and.w	r3, r3, #8
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d00a      	beq.n	800ff8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	430a      	orrs	r2, r1
 800ff8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff90:	f003 0310 	and.w	r3, r3, #16
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d00a      	beq.n	800ffae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	689b      	ldr	r3, [r3, #8]
 800ff9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	430a      	orrs	r2, r1
 800ffac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb2:	f003 0320 	and.w	r3, r3, #32
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d00a      	beq.n	800ffd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	689b      	ldr	r3, [r3, #8]
 800ffc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	430a      	orrs	r2, r1
 800ffce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d01a      	beq.n	8010012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	430a      	orrs	r2, r1
 800fff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fffa:	d10a      	bne.n	8010012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	430a      	orrs	r2, r1
 8010010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00a      	beq.n	8010034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	430a      	orrs	r2, r1
 8010032:	605a      	str	r2, [r3, #4]
  }
}
 8010034:	bf00      	nop
 8010036:	370c      	adds	r7, #12
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr

08010040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b086      	sub	sp, #24
 8010044:	af02      	add	r7, sp, #8
 8010046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2200      	movs	r2, #0
 801004c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801004e:	f7fb f861 	bl	800b114 <HAL_GetTick>
 8010052:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f003 0308 	and.w	r3, r3, #8
 801005e:	2b08      	cmp	r3, #8
 8010060:	d10e      	bne.n	8010080 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010062:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010066:	9300      	str	r3, [sp, #0]
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2200      	movs	r2, #0
 801006c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 f82a 	bl	80100ca <UART_WaitOnFlagUntilTimeout>
 8010076:	4603      	mov	r3, r0
 8010078:	2b00      	cmp	r3, #0
 801007a:	d001      	beq.n	8010080 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801007c:	2303      	movs	r3, #3
 801007e:	e020      	b.n	80100c2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f003 0304 	and.w	r3, r3, #4
 801008a:	2b04      	cmp	r3, #4
 801008c:	d10e      	bne.n	80100ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801008e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2200      	movs	r2, #0
 8010098:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f000 f814 	bl	80100ca <UART_WaitOnFlagUntilTimeout>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d001      	beq.n	80100ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80100a8:	2303      	movs	r3, #3
 80100aa:	e00a      	b.n	80100c2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2220      	movs	r2, #32
 80100b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2220      	movs	r2, #32
 80100b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2200      	movs	r2, #0
 80100bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80100c0:	2300      	movs	r3, #0
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3710      	adds	r7, #16
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}

080100ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80100ca:	b580      	push	{r7, lr}
 80100cc:	b084      	sub	sp, #16
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	60f8      	str	r0, [r7, #12]
 80100d2:	60b9      	str	r1, [r7, #8]
 80100d4:	603b      	str	r3, [r7, #0]
 80100d6:	4613      	mov	r3, r2
 80100d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100da:	e05d      	b.n	8010198 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80100dc:	69bb      	ldr	r3, [r7, #24]
 80100de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100e2:	d059      	beq.n	8010198 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100e4:	f7fb f816 	bl	800b114 <HAL_GetTick>
 80100e8:	4602      	mov	r2, r0
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	1ad3      	subs	r3, r2, r3
 80100ee:	69ba      	ldr	r2, [r7, #24]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d302      	bcc.n	80100fa <UART_WaitOnFlagUntilTimeout+0x30>
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d11b      	bne.n	8010132 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	681a      	ldr	r2, [r3, #0]
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010108:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	689a      	ldr	r2, [r3, #8]
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f022 0201 	bic.w	r2, r2, #1
 8010118:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2220      	movs	r2, #32
 801011e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2220      	movs	r2, #32
 8010124:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2200      	movs	r2, #0
 801012a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 801012e:	2303      	movs	r3, #3
 8010130:	e042      	b.n	80101b8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	f003 0304 	and.w	r3, r3, #4
 801013c:	2b00      	cmp	r3, #0
 801013e:	d02b      	beq.n	8010198 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	69db      	ldr	r3, [r3, #28]
 8010146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801014a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801014e:	d123      	bne.n	8010198 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010158:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	681a      	ldr	r2, [r3, #0]
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010168:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	689a      	ldr	r2, [r3, #8]
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f022 0201 	bic.w	r2, r2, #1
 8010178:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2220      	movs	r2, #32
 801017e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2220      	movs	r2, #32
 8010184:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2220      	movs	r2, #32
 801018a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	2200      	movs	r2, #0
 8010190:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8010194:	2303      	movs	r3, #3
 8010196:	e00f      	b.n	80101b8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	69da      	ldr	r2, [r3, #28]
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	4013      	ands	r3, r2
 80101a2:	68ba      	ldr	r2, [r7, #8]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	bf0c      	ite	eq
 80101a8:	2301      	moveq	r3, #1
 80101aa:	2300      	movne	r3, #0
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	461a      	mov	r2, r3
 80101b0:	79fb      	ldrb	r3, [r7, #7]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d092      	beq.n	80100dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80101b6:	2300      	movs	r3, #0
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3710      	adds	r7, #16
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80101d6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2220      	movs	r2, #32
 80101dc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80101de:	bf00      	nop
 80101e0:	370c      	adds	r7, #12
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr

080101ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80101ea:	b480      	push	{r7}
 80101ec:	b083      	sub	sp, #12
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010200:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	689a      	ldr	r2, [r3, #8]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f022 0201 	bic.w	r2, r2, #1
 8010210:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2220      	movs	r2, #32
 8010216:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	661a      	str	r2, [r3, #96]	; 0x60
}
 801021e:	bf00      	nop
 8010220:	370c      	adds	r7, #12
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr

0801022a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801022a:	b580      	push	{r7, lr}
 801022c:	b084      	sub	sp, #16
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010236:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	69db      	ldr	r3, [r3, #28]
 801023c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010240:	d014      	beq.n	801026c <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2200      	movs	r2, #0
 8010246:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	689a      	ldr	r2, [r3, #8]
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010258:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010268:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801026a:	e002      	b.n	8010272 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f7ff fb73 	bl	800f958 <HAL_UART_TxCpltCallback>
}
 8010272:	bf00      	nop
 8010274:	3710      	adds	r7, #16
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b084      	sub	sp, #16
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010286:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010288:	68f8      	ldr	r0, [r7, #12]
 801028a:	f7ff fb6f 	bl	800f96c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801028e:	bf00      	nop
 8010290:	3710      	adds	r7, #16
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}

08010296 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010296:	b580      	push	{r7, lr}
 8010298:	b086      	sub	sp, #24
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	689b      	ldr	r3, [r3, #8]
 80102b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102ba:	2b80      	cmp	r3, #128	; 0x80
 80102bc:	d109      	bne.n	80102d2 <UART_DMAError+0x3c>
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	2b21      	cmp	r3, #33	; 0x21
 80102c2:	d106      	bne.n	80102d2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	2200      	movs	r2, #0
 80102c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80102cc:	6978      	ldr	r0, [r7, #20]
 80102ce:	f7ff ff77 	bl	80101c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	689b      	ldr	r3, [r3, #8]
 80102d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102dc:	2b40      	cmp	r3, #64	; 0x40
 80102de:	d109      	bne.n	80102f4 <UART_DMAError+0x5e>
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2b22      	cmp	r3, #34	; 0x22
 80102e4:	d106      	bne.n	80102f4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	2200      	movs	r2, #0
 80102ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80102ee:	6978      	ldr	r0, [r7, #20]
 80102f0:	f7ff ff7b 	bl	80101ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102f8:	f043 0210 	orr.w	r2, r3, #16
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010300:	6978      	ldr	r0, [r7, #20]
 8010302:	f7ff fb3d 	bl	800f980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010306:	bf00      	nop
 8010308:	3718      	adds	r7, #24
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}

0801030e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801030e:	b580      	push	{r7, lr}
 8010310:	b084      	sub	sp, #16
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801031a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2200      	movs	r2, #0
 8010320:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2200      	movs	r2, #0
 8010328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801032c:	68f8      	ldr	r0, [r7, #12]
 801032e:	f7ff fb27 	bl	800f980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010332:	bf00      	nop
 8010334:	3710      	adds	r7, #16
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801033a:	b580      	push	{r7, lr}
 801033c:	b082      	sub	sp, #8
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010350:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2220      	movs	r2, #32
 8010356:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2200      	movs	r2, #0
 801035c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7ff fafa 	bl	800f958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010364:	bf00      	nop
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b084      	sub	sp, #16
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801037a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010380:	2b22      	cmp	r3, #34	; 0x22
 8010382:	d13a      	bne.n	80103fa <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801038a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801038c:	89bb      	ldrh	r3, [r7, #12]
 801038e:	b2d9      	uxtb	r1, r3
 8010390:	89fb      	ldrh	r3, [r7, #14]
 8010392:	b2da      	uxtb	r2, r3
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010398:	400a      	ands	r2, r1
 801039a:	b2d2      	uxtb	r2, r2
 801039c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103a2:	1c5a      	adds	r2, r3, #1
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	3b01      	subs	r3, #1
 80103b2:	b29a      	uxth	r2, r3
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d121      	bne.n	801040a <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80103d4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	689a      	ldr	r2, [r3, #8]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	f022 0201 	bic.w	r2, r2, #1
 80103e4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2220      	movs	r2, #32
 80103ea:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2200      	movs	r2, #0
 80103f0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f7f8 ff30 	bl	8009258 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80103f8:	e007      	b.n	801040a <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	699a      	ldr	r2, [r3, #24]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f042 0208 	orr.w	r2, r2, #8
 8010408:	619a      	str	r2, [r3, #24]
}
 801040a:	bf00      	nop
 801040c:	3710      	adds	r7, #16
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}

08010412 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010412:	b580      	push	{r7, lr}
 8010414:	b084      	sub	sp, #16
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010420:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010426:	2b22      	cmp	r3, #34	; 0x22
 8010428:	d13a      	bne.n	80104a0 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010430:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010436:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8010438:	89ba      	ldrh	r2, [r7, #12]
 801043a:	89fb      	ldrh	r3, [r7, #14]
 801043c:	4013      	ands	r3, r2
 801043e:	b29a      	uxth	r2, r3
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010448:	1c9a      	adds	r2, r3, #2
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010454:	b29b      	uxth	r3, r3
 8010456:	3b01      	subs	r3, #1
 8010458:	b29a      	uxth	r2, r3
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010466:	b29b      	uxth	r3, r3
 8010468:	2b00      	cmp	r3, #0
 801046a:	d121      	bne.n	80104b0 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	681a      	ldr	r2, [r3, #0]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801047a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	689a      	ldr	r2, [r3, #8]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f022 0201 	bic.w	r2, r2, #1
 801048a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2220      	movs	r2, #32
 8010490:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2200      	movs	r2, #0
 8010496:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f7f8 fedd 	bl	8009258 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801049e:	e007      	b.n	80104b0 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	699a      	ldr	r2, [r3, #24]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f042 0208 	orr.w	r2, r2, #8
 80104ae:	619a      	str	r2, [r3, #24]
}
 80104b0:	bf00      	nop
 80104b2:	3710      	adds	r7, #16
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80104b8:	b480      	push	{r7}
 80104ba:	b085      	sub	sp, #20
 80104bc:	af00      	add	r7, sp, #0
 80104be:	4603      	mov	r3, r0
 80104c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80104c2:	2300      	movs	r3, #0
 80104c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80104c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80104ca:	2b84      	cmp	r3, #132	; 0x84
 80104cc:	d005      	beq.n	80104da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80104ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	4413      	add	r3, r2
 80104d6:	3303      	adds	r3, #3
 80104d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80104da:	68fb      	ldr	r3, [r7, #12]
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3714      	adds	r7, #20
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80104ec:	f000 ffe6 	bl	80114bc <vTaskStartScheduler>
  
  return osOK;
 80104f0:	2300      	movs	r3, #0
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	bd80      	pop	{r7, pc}

080104f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80104f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104f8:	b089      	sub	sp, #36	; 0x24
 80104fa:	af04      	add	r7, sp, #16
 80104fc:	6078      	str	r0, [r7, #4]
 80104fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	695b      	ldr	r3, [r3, #20]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d020      	beq.n	801054a <osThreadCreate+0x54>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	699b      	ldr	r3, [r3, #24]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d01c      	beq.n	801054a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	685c      	ldr	r4, [r3, #4]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681d      	ldr	r5, [r3, #0]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	691e      	ldr	r6, [r3, #16]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010522:	4618      	mov	r0, r3
 8010524:	f7ff ffc8 	bl	80104b8 <makeFreeRtosPriority>
 8010528:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	695b      	ldr	r3, [r3, #20]
 801052e:	687a      	ldr	r2, [r7, #4]
 8010530:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010532:	9202      	str	r2, [sp, #8]
 8010534:	9301      	str	r3, [sp, #4]
 8010536:	9100      	str	r1, [sp, #0]
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	4632      	mov	r2, r6
 801053c:	4629      	mov	r1, r5
 801053e:	4620      	mov	r0, r4
 8010540:	f000 fe24 	bl	801118c <xTaskCreateStatic>
 8010544:	4603      	mov	r3, r0
 8010546:	60fb      	str	r3, [r7, #12]
 8010548:	e01c      	b.n	8010584 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	685c      	ldr	r4, [r3, #4]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010556:	b29e      	uxth	r6, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801055e:	4618      	mov	r0, r3
 8010560:	f7ff ffaa 	bl	80104b8 <makeFreeRtosPriority>
 8010564:	4602      	mov	r2, r0
 8010566:	f107 030c 	add.w	r3, r7, #12
 801056a:	9301      	str	r3, [sp, #4]
 801056c:	9200      	str	r2, [sp, #0]
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	4632      	mov	r2, r6
 8010572:	4629      	mov	r1, r5
 8010574:	4620      	mov	r0, r4
 8010576:	f000 fe69 	bl	801124c <xTaskCreate>
 801057a:	4603      	mov	r3, r0
 801057c:	2b01      	cmp	r3, #1
 801057e:	d001      	beq.n	8010584 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010580:	2300      	movs	r3, #0
 8010582:	e000      	b.n	8010586 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010584:	68fb      	ldr	r3, [r7, #12]
}
 8010586:	4618      	mov	r0, r3
 8010588:	3714      	adds	r7, #20
 801058a:	46bd      	mov	sp, r7
 801058c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801058e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801058e:	b580      	push	{r7, lr}
 8010590:	b086      	sub	sp, #24
 8010592:	af02      	add	r7, sp, #8
 8010594:	6078      	str	r0, [r7, #4]
 8010596:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d010      	beq.n	80105c2 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d10b      	bne.n	80105be <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	685a      	ldr	r2, [r3, #4]
 80105aa:	2303      	movs	r3, #3
 80105ac:	9300      	str	r3, [sp, #0]
 80105ae:	4613      	mov	r3, r2
 80105b0:	2200      	movs	r2, #0
 80105b2:	2100      	movs	r1, #0
 80105b4:	2001      	movs	r0, #1
 80105b6:	f000 f965 	bl	8010884 <xQueueGenericCreateStatic>
 80105ba:	4603      	mov	r3, r0
 80105bc:	e016      	b.n	80105ec <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80105be:	2300      	movs	r3, #0
 80105c0:	e014      	b.n	80105ec <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	d110      	bne.n	80105ea <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80105c8:	2203      	movs	r2, #3
 80105ca:	2100      	movs	r1, #0
 80105cc:	2001      	movs	r0, #1
 80105ce:	f000 f9d6 	bl	801097e <xQueueGenericCreate>
 80105d2:	60f8      	str	r0, [r7, #12]
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d005      	beq.n	80105e6 <osSemaphoreCreate+0x58>
 80105da:	2300      	movs	r3, #0
 80105dc:	2200      	movs	r2, #0
 80105de:	2100      	movs	r1, #0
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	f000 fa2d 	bl	8010a40 <xQueueGenericSend>
      return sema;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	e000      	b.n	80105ec <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80105ea:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3710      	adds	r7, #16
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80105f4:	b590      	push	{r4, r7, lr}
 80105f6:	b085      	sub	sp, #20
 80105f8:	af02      	add	r7, sp, #8
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	689b      	ldr	r3, [r3, #8]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d012      	beq.n	801062c <osMessageCreate+0x38>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	68db      	ldr	r3, [r3, #12]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d00e      	beq.n	801062c <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6818      	ldr	r0, [r3, #0]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6859      	ldr	r1, [r3, #4]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	689a      	ldr	r2, [r3, #8]
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	68dc      	ldr	r4, [r3, #12]
 801061e:	2300      	movs	r3, #0
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	4623      	mov	r3, r4
 8010624:	f000 f92e 	bl	8010884 <xQueueGenericCreateStatic>
 8010628:	4603      	mov	r3, r0
 801062a:	e008      	b.n	801063e <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6818      	ldr	r0, [r3, #0]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	4619      	mov	r1, r3
 8010638:	f000 f9a1 	bl	801097e <xQueueGenericCreate>
 801063c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801063e:	4618      	mov	r0, r3
 8010640:	370c      	adds	r7, #12
 8010642:	46bd      	mov	sp, r7
 8010644:	bd90      	pop	{r4, r7, pc}

08010646 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010646:	b480      	push	{r7}
 8010648:	b083      	sub	sp, #12
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f103 0208 	add.w	r2, r3, #8
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f04f 32ff 	mov.w	r2, #4294967295
 801065e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f103 0208 	add.w	r2, r3, #8
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f103 0208 	add.w	r2, r3, #8
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2200      	movs	r2, #0
 8010678:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801067a:	bf00      	nop
 801067c:	370c      	adds	r7, #12
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr

08010686 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010686:	b480      	push	{r7}
 8010688:	b083      	sub	sp, #12
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2200      	movs	r2, #0
 8010692:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010694:	bf00      	nop
 8010696:	370c      	adds	r7, #12
 8010698:	46bd      	mov	sp, r7
 801069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069e:	4770      	bx	lr

080106a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106a0:	b480      	push	{r7}
 80106a2:	b085      	sub	sp, #20
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	689a      	ldr	r2, [r3, #8]
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	689b      	ldr	r3, [r3, #8]
 80106c2:	683a      	ldr	r2, [r7, #0]
 80106c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	683a      	ldr	r2, [r7, #0]
 80106ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	687a      	ldr	r2, [r7, #4]
 80106d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	1c5a      	adds	r2, r3, #1
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	601a      	str	r2, [r3, #0]
}
 80106dc:	bf00      	nop
 80106de:	3714      	adds	r7, #20
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106e8:	b480      	push	{r7}
 80106ea:	b085      	sub	sp, #20
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106fe:	d103      	bne.n	8010708 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	691b      	ldr	r3, [r3, #16]
 8010704:	60fb      	str	r3, [r7, #12]
 8010706:	e00c      	b.n	8010722 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	3308      	adds	r3, #8
 801070c:	60fb      	str	r3, [r7, #12]
 801070e:	e002      	b.n	8010716 <vListInsert+0x2e>
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	60fb      	str	r3, [r7, #12]
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	68ba      	ldr	r2, [r7, #8]
 801071e:	429a      	cmp	r2, r3
 8010720:	d2f6      	bcs.n	8010710 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	685a      	ldr	r2, [r3, #4]
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	683a      	ldr	r2, [r7, #0]
 8010730:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	68fa      	ldr	r2, [r7, #12]
 8010736:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	683a      	ldr	r2, [r7, #0]
 801073c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	1c5a      	adds	r2, r3, #1
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	601a      	str	r2, [r3, #0]
}
 801074e:	bf00      	nop
 8010750:	3714      	adds	r7, #20
 8010752:	46bd      	mov	sp, r7
 8010754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010758:	4770      	bx	lr

0801075a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801075a:	b480      	push	{r7}
 801075c:	b085      	sub	sp, #20
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	691b      	ldr	r3, [r3, #16]
 8010766:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	687a      	ldr	r2, [r7, #4]
 801076e:	6892      	ldr	r2, [r2, #8]
 8010770:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	689b      	ldr	r3, [r3, #8]
 8010776:	687a      	ldr	r2, [r7, #4]
 8010778:	6852      	ldr	r2, [r2, #4]
 801077a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	685b      	ldr	r3, [r3, #4]
 8010780:	687a      	ldr	r2, [r7, #4]
 8010782:	429a      	cmp	r2, r3
 8010784:	d103      	bne.n	801078e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	689a      	ldr	r2, [r3, #8]
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2200      	movs	r2, #0
 8010792:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	1e5a      	subs	r2, r3, #1
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681b      	ldr	r3, [r3, #0]
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3714      	adds	r7, #20
 80107a6:	46bd      	mov	sp, r7
 80107a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ac:	4770      	bx	lr
	...

080107b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d10b      	bne.n	80107dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80107c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c8:	b672      	cpsid	i
 80107ca:	f383 8811 	msr	BASEPRI, r3
 80107ce:	f3bf 8f6f 	isb	sy
 80107d2:	f3bf 8f4f 	dsb	sy
 80107d6:	b662      	cpsie	i
 80107d8:	60bb      	str	r3, [r7, #8]
 80107da:	e7fe      	b.n	80107da <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80107dc:	f001 fdbc 	bl	8012358 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681a      	ldr	r2, [r3, #0]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107e8:	68f9      	ldr	r1, [r7, #12]
 80107ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80107ec:	fb01 f303 	mul.w	r3, r1, r3
 80107f0:	441a      	add	r2, r3
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2200      	movs	r2, #0
 80107fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801080c:	3b01      	subs	r3, #1
 801080e:	68f9      	ldr	r1, [r7, #12]
 8010810:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010812:	fb01 f303 	mul.w	r3, r1, r3
 8010816:	441a      	add	r2, r3
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	22ff      	movs	r2, #255	; 0xff
 8010820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	22ff      	movs	r2, #255	; 0xff
 8010828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d114      	bne.n	801085c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	691b      	ldr	r3, [r3, #16]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d01a      	beq.n	8010870 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	3310      	adds	r3, #16
 801083e:	4618      	mov	r0, r3
 8010840:	f001 f886 	bl	8011950 <xTaskRemoveFromEventList>
 8010844:	4603      	mov	r3, r0
 8010846:	2b00      	cmp	r3, #0
 8010848:	d012      	beq.n	8010870 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801084a:	4b0d      	ldr	r3, [pc, #52]	; (8010880 <xQueueGenericReset+0xd0>)
 801084c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010850:	601a      	str	r2, [r3, #0]
 8010852:	f3bf 8f4f 	dsb	sy
 8010856:	f3bf 8f6f 	isb	sy
 801085a:	e009      	b.n	8010870 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	3310      	adds	r3, #16
 8010860:	4618      	mov	r0, r3
 8010862:	f7ff fef0 	bl	8010646 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	3324      	adds	r3, #36	; 0x24
 801086a:	4618      	mov	r0, r3
 801086c:	f7ff feeb 	bl	8010646 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010870:	f001 fda4 	bl	80123bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010874:	2301      	movs	r3, #1
}
 8010876:	4618      	mov	r0, r3
 8010878:	3710      	adds	r7, #16
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	e000ed04 	.word	0xe000ed04

08010884 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010884:	b580      	push	{r7, lr}
 8010886:	b08e      	sub	sp, #56	; 0x38
 8010888:	af02      	add	r7, sp, #8
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	607a      	str	r2, [r7, #4]
 8010890:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d10b      	bne.n	80108b0 <xQueueGenericCreateStatic+0x2c>
 8010898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801089c:	b672      	cpsid	i
 801089e:	f383 8811 	msr	BASEPRI, r3
 80108a2:	f3bf 8f6f 	isb	sy
 80108a6:	f3bf 8f4f 	dsb	sy
 80108aa:	b662      	cpsie	i
 80108ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80108ae:	e7fe      	b.n	80108ae <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d10b      	bne.n	80108ce <xQueueGenericCreateStatic+0x4a>
 80108b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ba:	b672      	cpsid	i
 80108bc:	f383 8811 	msr	BASEPRI, r3
 80108c0:	f3bf 8f6f 	isb	sy
 80108c4:	f3bf 8f4f 	dsb	sy
 80108c8:	b662      	cpsie	i
 80108ca:	627b      	str	r3, [r7, #36]	; 0x24
 80108cc:	e7fe      	b.n	80108cc <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d002      	beq.n	80108da <xQueueGenericCreateStatic+0x56>
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d001      	beq.n	80108de <xQueueGenericCreateStatic+0x5a>
 80108da:	2301      	movs	r3, #1
 80108dc:	e000      	b.n	80108e0 <xQueueGenericCreateStatic+0x5c>
 80108de:	2300      	movs	r3, #0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d10b      	bne.n	80108fc <xQueueGenericCreateStatic+0x78>
 80108e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e8:	b672      	cpsid	i
 80108ea:	f383 8811 	msr	BASEPRI, r3
 80108ee:	f3bf 8f6f 	isb	sy
 80108f2:	f3bf 8f4f 	dsb	sy
 80108f6:	b662      	cpsie	i
 80108f8:	623b      	str	r3, [r7, #32]
 80108fa:	e7fe      	b.n	80108fa <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d102      	bne.n	8010908 <xQueueGenericCreateStatic+0x84>
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d101      	bne.n	801090c <xQueueGenericCreateStatic+0x88>
 8010908:	2301      	movs	r3, #1
 801090a:	e000      	b.n	801090e <xQueueGenericCreateStatic+0x8a>
 801090c:	2300      	movs	r3, #0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d10b      	bne.n	801092a <xQueueGenericCreateStatic+0xa6>
 8010912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010916:	b672      	cpsid	i
 8010918:	f383 8811 	msr	BASEPRI, r3
 801091c:	f3bf 8f6f 	isb	sy
 8010920:	f3bf 8f4f 	dsb	sy
 8010924:	b662      	cpsie	i
 8010926:	61fb      	str	r3, [r7, #28]
 8010928:	e7fe      	b.n	8010928 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801092a:	2348      	movs	r3, #72	; 0x48
 801092c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	2b48      	cmp	r3, #72	; 0x48
 8010932:	d00b      	beq.n	801094c <xQueueGenericCreateStatic+0xc8>
 8010934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010938:	b672      	cpsid	i
 801093a:	f383 8811 	msr	BASEPRI, r3
 801093e:	f3bf 8f6f 	isb	sy
 8010942:	f3bf 8f4f 	dsb	sy
 8010946:	b662      	cpsie	i
 8010948:	61bb      	str	r3, [r7, #24]
 801094a:	e7fe      	b.n	801094a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801094c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010954:	2b00      	cmp	r3, #0
 8010956:	d00d      	beq.n	8010974 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801095a:	2201      	movs	r2, #1
 801095c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010960:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	4613      	mov	r3, r2
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	68b9      	ldr	r1, [r7, #8]
 801096e:	68f8      	ldr	r0, [r7, #12]
 8010970:	f000 f846 	bl	8010a00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010976:	4618      	mov	r0, r3
 8010978:	3730      	adds	r7, #48	; 0x30
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801097e:	b580      	push	{r7, lr}
 8010980:	b08a      	sub	sp, #40	; 0x28
 8010982:	af02      	add	r7, sp, #8
 8010984:	60f8      	str	r0, [r7, #12]
 8010986:	60b9      	str	r1, [r7, #8]
 8010988:	4613      	mov	r3, r2
 801098a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d10b      	bne.n	80109aa <xQueueGenericCreate+0x2c>
 8010992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010996:	b672      	cpsid	i
 8010998:	f383 8811 	msr	BASEPRI, r3
 801099c:	f3bf 8f6f 	isb	sy
 80109a0:	f3bf 8f4f 	dsb	sy
 80109a4:	b662      	cpsie	i
 80109a6:	613b      	str	r3, [r7, #16]
 80109a8:	e7fe      	b.n	80109a8 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d102      	bne.n	80109b6 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80109b0:	2300      	movs	r3, #0
 80109b2:	61fb      	str	r3, [r7, #28]
 80109b4:	e004      	b.n	80109c0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	68ba      	ldr	r2, [r7, #8]
 80109ba:	fb02 f303 	mul.w	r3, r2, r3
 80109be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80109c0:	69fb      	ldr	r3, [r7, #28]
 80109c2:	3348      	adds	r3, #72	; 0x48
 80109c4:	4618      	mov	r0, r3
 80109c6:	f001 fde9 	bl	801259c <pvPortMalloc>
 80109ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80109cc:	69bb      	ldr	r3, [r7, #24]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d011      	beq.n	80109f6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80109d2:	69bb      	ldr	r3, [r7, #24]
 80109d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	3348      	adds	r3, #72	; 0x48
 80109da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80109dc:	69bb      	ldr	r3, [r7, #24]
 80109de:	2200      	movs	r2, #0
 80109e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80109e4:	79fa      	ldrb	r2, [r7, #7]
 80109e6:	69bb      	ldr	r3, [r7, #24]
 80109e8:	9300      	str	r3, [sp, #0]
 80109ea:	4613      	mov	r3, r2
 80109ec:	697a      	ldr	r2, [r7, #20]
 80109ee:	68b9      	ldr	r1, [r7, #8]
 80109f0:	68f8      	ldr	r0, [r7, #12]
 80109f2:	f000 f805 	bl	8010a00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80109f6:	69bb      	ldr	r3, [r7, #24]
	}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3720      	adds	r7, #32
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}

08010a00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b084      	sub	sp, #16
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	60f8      	str	r0, [r7, #12]
 8010a08:	60b9      	str	r1, [r7, #8]
 8010a0a:	607a      	str	r2, [r7, #4]
 8010a0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d103      	bne.n	8010a1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010a14:	69bb      	ldr	r3, [r7, #24]
 8010a16:	69ba      	ldr	r2, [r7, #24]
 8010a18:	601a      	str	r2, [r3, #0]
 8010a1a:	e002      	b.n	8010a22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010a1c:	69bb      	ldr	r3, [r7, #24]
 8010a1e:	687a      	ldr	r2, [r7, #4]
 8010a20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010a22:	69bb      	ldr	r3, [r7, #24]
 8010a24:	68fa      	ldr	r2, [r7, #12]
 8010a26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010a28:	69bb      	ldr	r3, [r7, #24]
 8010a2a:	68ba      	ldr	r2, [r7, #8]
 8010a2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010a2e:	2101      	movs	r1, #1
 8010a30:	69b8      	ldr	r0, [r7, #24]
 8010a32:	f7ff febd 	bl	80107b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010a36:	bf00      	nop
 8010a38:	3710      	adds	r7, #16
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
	...

08010a40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b08e      	sub	sp, #56	; 0x38
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	607a      	str	r2, [r7, #4]
 8010a4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d10b      	bne.n	8010a74 <xQueueGenericSend+0x34>
 8010a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a60:	b672      	cpsid	i
 8010a62:	f383 8811 	msr	BASEPRI, r3
 8010a66:	f3bf 8f6f 	isb	sy
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	b662      	cpsie	i
 8010a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a72:	e7fe      	b.n	8010a72 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d103      	bne.n	8010a82 <xQueueGenericSend+0x42>
 8010a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d101      	bne.n	8010a86 <xQueueGenericSend+0x46>
 8010a82:	2301      	movs	r3, #1
 8010a84:	e000      	b.n	8010a88 <xQueueGenericSend+0x48>
 8010a86:	2300      	movs	r3, #0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d10b      	bne.n	8010aa4 <xQueueGenericSend+0x64>
 8010a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a90:	b672      	cpsid	i
 8010a92:	f383 8811 	msr	BASEPRI, r3
 8010a96:	f3bf 8f6f 	isb	sy
 8010a9a:	f3bf 8f4f 	dsb	sy
 8010a9e:	b662      	cpsie	i
 8010aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8010aa2:	e7fe      	b.n	8010aa2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	2b02      	cmp	r3, #2
 8010aa8:	d103      	bne.n	8010ab2 <xQueueGenericSend+0x72>
 8010aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d101      	bne.n	8010ab6 <xQueueGenericSend+0x76>
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	e000      	b.n	8010ab8 <xQueueGenericSend+0x78>
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d10b      	bne.n	8010ad4 <xQueueGenericSend+0x94>
 8010abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac0:	b672      	cpsid	i
 8010ac2:	f383 8811 	msr	BASEPRI, r3
 8010ac6:	f3bf 8f6f 	isb	sy
 8010aca:	f3bf 8f4f 	dsb	sy
 8010ace:	b662      	cpsie	i
 8010ad0:	623b      	str	r3, [r7, #32]
 8010ad2:	e7fe      	b.n	8010ad2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ad4:	f001 f8fa 	bl	8011ccc <xTaskGetSchedulerState>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d102      	bne.n	8010ae4 <xQueueGenericSend+0xa4>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d101      	bne.n	8010ae8 <xQueueGenericSend+0xa8>
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	e000      	b.n	8010aea <xQueueGenericSend+0xaa>
 8010ae8:	2300      	movs	r3, #0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d10b      	bne.n	8010b06 <xQueueGenericSend+0xc6>
 8010aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af2:	b672      	cpsid	i
 8010af4:	f383 8811 	msr	BASEPRI, r3
 8010af8:	f3bf 8f6f 	isb	sy
 8010afc:	f3bf 8f4f 	dsb	sy
 8010b00:	b662      	cpsie	i
 8010b02:	61fb      	str	r3, [r7, #28]
 8010b04:	e7fe      	b.n	8010b04 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b06:	f001 fc27 	bl	8012358 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d302      	bcc.n	8010b1c <xQueueGenericSend+0xdc>
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	2b02      	cmp	r3, #2
 8010b1a:	d129      	bne.n	8010b70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b1c:	683a      	ldr	r2, [r7, #0]
 8010b1e:	68b9      	ldr	r1, [r7, #8]
 8010b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b22:	f000 fa49 	bl	8010fb8 <prvCopyDataToQueue>
 8010b26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d010      	beq.n	8010b52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b32:	3324      	adds	r3, #36	; 0x24
 8010b34:	4618      	mov	r0, r3
 8010b36:	f000 ff0b 	bl	8011950 <xTaskRemoveFromEventList>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d013      	beq.n	8010b68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010b40:	4b3f      	ldr	r3, [pc, #252]	; (8010c40 <xQueueGenericSend+0x200>)
 8010b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b46:	601a      	str	r2, [r3, #0]
 8010b48:	f3bf 8f4f 	dsb	sy
 8010b4c:	f3bf 8f6f 	isb	sy
 8010b50:	e00a      	b.n	8010b68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d007      	beq.n	8010b68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010b58:	4b39      	ldr	r3, [pc, #228]	; (8010c40 <xQueueGenericSend+0x200>)
 8010b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b5e:	601a      	str	r2, [r3, #0]
 8010b60:	f3bf 8f4f 	dsb	sy
 8010b64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010b68:	f001 fc28 	bl	80123bc <vPortExitCritical>
				return pdPASS;
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	e063      	b.n	8010c38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d103      	bne.n	8010b7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b76:	f001 fc21 	bl	80123bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	e05c      	b.n	8010c38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d106      	bne.n	8010b92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b84:	f107 0314 	add.w	r3, r7, #20
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f000 ff45 	bl	8011a18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b8e:	2301      	movs	r3, #1
 8010b90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b92:	f001 fc13 	bl	80123bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b96:	f000 fcf3 	bl	8011580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b9a:	f001 fbdd 	bl	8012358 <vPortEnterCritical>
 8010b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ba4:	b25b      	sxtb	r3, r3
 8010ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010baa:	d103      	bne.n	8010bb4 <xQueueGenericSend+0x174>
 8010bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bba:	b25b      	sxtb	r3, r3
 8010bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc0:	d103      	bne.n	8010bca <xQueueGenericSend+0x18a>
 8010bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bca:	f001 fbf7 	bl	80123bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010bce:	1d3a      	adds	r2, r7, #4
 8010bd0:	f107 0314 	add.w	r3, r7, #20
 8010bd4:	4611      	mov	r1, r2
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f000 ff34 	bl	8011a44 <xTaskCheckForTimeOut>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d124      	bne.n	8010c2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010be4:	f000 faba 	bl	801115c <prvIsQueueFull>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d018      	beq.n	8010c20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf0:	3310      	adds	r3, #16
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	4611      	mov	r1, r2
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f000 fe84 	bl	8011904 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bfe:	f000 fa45 	bl	801108c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010c02:	f000 fccb 	bl	801159c <xTaskResumeAll>
 8010c06:	4603      	mov	r3, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	f47f af7c 	bne.w	8010b06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010c0e:	4b0c      	ldr	r3, [pc, #48]	; (8010c40 <xQueueGenericSend+0x200>)
 8010c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c14:	601a      	str	r2, [r3, #0]
 8010c16:	f3bf 8f4f 	dsb	sy
 8010c1a:	f3bf 8f6f 	isb	sy
 8010c1e:	e772      	b.n	8010b06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c22:	f000 fa33 	bl	801108c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c26:	f000 fcb9 	bl	801159c <xTaskResumeAll>
 8010c2a:	e76c      	b.n	8010b06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c2e:	f000 fa2d 	bl	801108c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c32:	f000 fcb3 	bl	801159c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010c36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3738      	adds	r7, #56	; 0x38
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	e000ed04 	.word	0xe000ed04

08010c44 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b08e      	sub	sp, #56	; 0x38
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d10b      	bne.n	8010c70 <xQueueGiveFromISR+0x2c>
 8010c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c5c:	b672      	cpsid	i
 8010c5e:	f383 8811 	msr	BASEPRI, r3
 8010c62:	f3bf 8f6f 	isb	sy
 8010c66:	f3bf 8f4f 	dsb	sy
 8010c6a:	b662      	cpsie	i
 8010c6c:	623b      	str	r3, [r7, #32]
 8010c6e:	e7fe      	b.n	8010c6e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d00b      	beq.n	8010c90 <xQueueGiveFromISR+0x4c>
 8010c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7c:	b672      	cpsid	i
 8010c7e:	f383 8811 	msr	BASEPRI, r3
 8010c82:	f3bf 8f6f 	isb	sy
 8010c86:	f3bf 8f4f 	dsb	sy
 8010c8a:	b662      	cpsie	i
 8010c8c:	61fb      	str	r3, [r7, #28]
 8010c8e:	e7fe      	b.n	8010c8e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d103      	bne.n	8010ca0 <xQueueGiveFromISR+0x5c>
 8010c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9a:	689b      	ldr	r3, [r3, #8]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d101      	bne.n	8010ca4 <xQueueGiveFromISR+0x60>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	e000      	b.n	8010ca6 <xQueueGiveFromISR+0x62>
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d10b      	bne.n	8010cc2 <xQueueGiveFromISR+0x7e>
 8010caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cae:	b672      	cpsid	i
 8010cb0:	f383 8811 	msr	BASEPRI, r3
 8010cb4:	f3bf 8f6f 	isb	sy
 8010cb8:	f3bf 8f4f 	dsb	sy
 8010cbc:	b662      	cpsie	i
 8010cbe:	61bb      	str	r3, [r7, #24]
 8010cc0:	e7fe      	b.n	8010cc0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cc2:	f001 fc29 	bl	8012518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010cc6:	f3ef 8211 	mrs	r2, BASEPRI
 8010cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cce:	b672      	cpsid	i
 8010cd0:	f383 8811 	msr	BASEPRI, r3
 8010cd4:	f3bf 8f6f 	isb	sy
 8010cd8:	f3bf 8f4f 	dsb	sy
 8010cdc:	b662      	cpsie	i
 8010cde:	617a      	str	r2, [r7, #20]
 8010ce0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010ce2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d22b      	bcs.n	8010d4e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d02:	1c5a      	adds	r2, r3, #1
 8010d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d06:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d10:	d112      	bne.n	8010d38 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d016      	beq.n	8010d48 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d1c:	3324      	adds	r3, #36	; 0x24
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f000 fe16 	bl	8011950 <xTaskRemoveFromEventList>
 8010d24:	4603      	mov	r3, r0
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d00e      	beq.n	8010d48 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00b      	beq.n	8010d48 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	2201      	movs	r2, #1
 8010d34:	601a      	str	r2, [r3, #0]
 8010d36:	e007      	b.n	8010d48 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	b25a      	sxtb	r2, r3
 8010d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d48:	2301      	movs	r3, #1
 8010d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8010d4c:	e001      	b.n	8010d52 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	637b      	str	r3, [r7, #52]	; 0x34
 8010d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d54:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3738      	adds	r7, #56	; 0x38
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
	...

08010d68 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b08e      	sub	sp, #56	; 0x38
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010d72:	2300      	movs	r3, #0
 8010d74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d10b      	bne.n	8010d9c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d88:	b672      	cpsid	i
 8010d8a:	f383 8811 	msr	BASEPRI, r3
 8010d8e:	f3bf 8f6f 	isb	sy
 8010d92:	f3bf 8f4f 	dsb	sy
 8010d96:	b662      	cpsie	i
 8010d98:	623b      	str	r3, [r7, #32]
 8010d9a:	e7fe      	b.n	8010d9a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d00b      	beq.n	8010dbc <xQueueSemaphoreTake+0x54>
 8010da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da8:	b672      	cpsid	i
 8010daa:	f383 8811 	msr	BASEPRI, r3
 8010dae:	f3bf 8f6f 	isb	sy
 8010db2:	f3bf 8f4f 	dsb	sy
 8010db6:	b662      	cpsie	i
 8010db8:	61fb      	str	r3, [r7, #28]
 8010dba:	e7fe      	b.n	8010dba <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010dbc:	f000 ff86 	bl	8011ccc <xTaskGetSchedulerState>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d102      	bne.n	8010dcc <xQueueSemaphoreTake+0x64>
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d101      	bne.n	8010dd0 <xQueueSemaphoreTake+0x68>
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e000      	b.n	8010dd2 <xQueueSemaphoreTake+0x6a>
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d10b      	bne.n	8010dee <xQueueSemaphoreTake+0x86>
 8010dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dda:	b672      	cpsid	i
 8010ddc:	f383 8811 	msr	BASEPRI, r3
 8010de0:	f3bf 8f6f 	isb	sy
 8010de4:	f3bf 8f4f 	dsb	sy
 8010de8:	b662      	cpsie	i
 8010dea:	61bb      	str	r3, [r7, #24]
 8010dec:	e7fe      	b.n	8010dec <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010dee:	f001 fab3 	bl	8012358 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010df6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d024      	beq.n	8010e48 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e00:	1e5a      	subs	r2, r3, #1
 8010e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e04:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d104      	bne.n	8010e18 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010e0e:	f001 f91f 	bl	8012050 <pvTaskIncrementMutexHeldCount>
 8010e12:	4602      	mov	r2, r0
 8010e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e16:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1a:	691b      	ldr	r3, [r3, #16]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d00f      	beq.n	8010e40 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e22:	3310      	adds	r3, #16
 8010e24:	4618      	mov	r0, r3
 8010e26:	f000 fd93 	bl	8011950 <xTaskRemoveFromEventList>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d007      	beq.n	8010e40 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010e30:	4b54      	ldr	r3, [pc, #336]	; (8010f84 <xQueueSemaphoreTake+0x21c>)
 8010e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e36:	601a      	str	r2, [r3, #0]
 8010e38:	f3bf 8f4f 	dsb	sy
 8010e3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010e40:	f001 fabc 	bl	80123bc <vPortExitCritical>
				return pdPASS;
 8010e44:	2301      	movs	r3, #1
 8010e46:	e098      	b.n	8010f7a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d112      	bne.n	8010e74 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d00b      	beq.n	8010e6c <xQueueSemaphoreTake+0x104>
 8010e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e58:	b672      	cpsid	i
 8010e5a:	f383 8811 	msr	BASEPRI, r3
 8010e5e:	f3bf 8f6f 	isb	sy
 8010e62:	f3bf 8f4f 	dsb	sy
 8010e66:	b662      	cpsie	i
 8010e68:	617b      	str	r3, [r7, #20]
 8010e6a:	e7fe      	b.n	8010e6a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010e6c:	f001 faa6 	bl	80123bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010e70:	2300      	movs	r3, #0
 8010e72:	e082      	b.n	8010f7a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d106      	bne.n	8010e88 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e7a:	f107 030c 	add.w	r3, r7, #12
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f000 fdca 	bl	8011a18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e84:	2301      	movs	r3, #1
 8010e86:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e88:	f001 fa98 	bl	80123bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e8c:	f000 fb78 	bl	8011580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e90:	f001 fa62 	bl	8012358 <vPortEnterCritical>
 8010e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e9a:	b25b      	sxtb	r3, r3
 8010e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ea0:	d103      	bne.n	8010eaa <xQueueSemaphoreTake+0x142>
 8010ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010eb0:	b25b      	sxtb	r3, r3
 8010eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eb6:	d103      	bne.n	8010ec0 <xQueueSemaphoreTake+0x158>
 8010eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eba:	2200      	movs	r2, #0
 8010ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010ec0:	f001 fa7c 	bl	80123bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010ec4:	463a      	mov	r2, r7
 8010ec6:	f107 030c 	add.w	r3, r7, #12
 8010eca:	4611      	mov	r1, r2
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f000 fdb9 	bl	8011a44 <xTaskCheckForTimeOut>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d132      	bne.n	8010f3e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010eda:	f000 f929 	bl	8011130 <prvIsQueueEmpty>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d026      	beq.n	8010f32 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d109      	bne.n	8010f00 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010eec:	f001 fa34 	bl	8012358 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef2:	689b      	ldr	r3, [r3, #8]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f000 ff07 	bl	8011d08 <xTaskPriorityInherit>
 8010efa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010efc:	f001 fa5e 	bl	80123bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f02:	3324      	adds	r3, #36	; 0x24
 8010f04:	683a      	ldr	r2, [r7, #0]
 8010f06:	4611      	mov	r1, r2
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f000 fcfb 	bl	8011904 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010f0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f10:	f000 f8bc 	bl	801108c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010f14:	f000 fb42 	bl	801159c <xTaskResumeAll>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	f47f af67 	bne.w	8010dee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010f20:	4b18      	ldr	r3, [pc, #96]	; (8010f84 <xQueueSemaphoreTake+0x21c>)
 8010f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f26:	601a      	str	r2, [r3, #0]
 8010f28:	f3bf 8f4f 	dsb	sy
 8010f2c:	f3bf 8f6f 	isb	sy
 8010f30:	e75d      	b.n	8010dee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010f32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f34:	f000 f8aa 	bl	801108c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f38:	f000 fb30 	bl	801159c <xTaskResumeAll>
 8010f3c:	e757      	b.n	8010dee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010f3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f40:	f000 f8a4 	bl	801108c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f44:	f000 fb2a 	bl	801159c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f4a:	f000 f8f1 	bl	8011130 <prvIsQueueEmpty>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f43f af4c 	beq.w	8010dee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d00d      	beq.n	8010f78 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010f5c:	f001 f9fc 	bl	8012358 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010f60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f62:	f000 f811 	bl	8010f88 <prvGetDisinheritPriorityAfterTimeout>
 8010f66:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6a:	689b      	ldr	r3, [r3, #8]
 8010f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f000 ffd2 	bl	8011f18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010f74:	f001 fa22 	bl	80123bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010f78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3738      	adds	r7, #56	; 0x38
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	e000ed04 	.word	0xe000ed04

08010f88 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010f88:	b480      	push	{r7}
 8010f8a:	b085      	sub	sp, #20
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d006      	beq.n	8010fa6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f1c3 0307 	rsb	r3, r3, #7
 8010fa2:	60fb      	str	r3, [r7, #12]
 8010fa4:	e001      	b.n	8010faa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010faa:	68fb      	ldr	r3, [r7, #12]
	}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3714      	adds	r7, #20
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b086      	sub	sp, #24
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	60b9      	str	r1, [r7, #8]
 8010fc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d10d      	bne.n	8010ff2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d14d      	bne.n	801107a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	689b      	ldr	r3, [r3, #8]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f000 ff10 	bl	8011e08 <xTaskPriorityDisinherit>
 8010fe8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2200      	movs	r2, #0
 8010fee:	609a      	str	r2, [r3, #8]
 8010ff0:	e043      	b.n	801107a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d119      	bne.n	801102c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6858      	ldr	r0, [r3, #4]
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011000:	461a      	mov	r2, r3
 8011002:	68b9      	ldr	r1, [r7, #8]
 8011004:	f001 fcce 	bl	80129a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	685a      	ldr	r2, [r3, #4]
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011010:	441a      	add	r2, r3
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	685a      	ldr	r2, [r3, #4]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	689b      	ldr	r3, [r3, #8]
 801101e:	429a      	cmp	r2, r3
 8011020:	d32b      	bcc.n	801107a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681a      	ldr	r2, [r3, #0]
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	605a      	str	r2, [r3, #4]
 801102a:	e026      	b.n	801107a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	68d8      	ldr	r0, [r3, #12]
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011034:	461a      	mov	r2, r3
 8011036:	68b9      	ldr	r1, [r7, #8]
 8011038:	f001 fcb4 	bl	80129a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	68da      	ldr	r2, [r3, #12]
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011044:	425b      	negs	r3, r3
 8011046:	441a      	add	r2, r3
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	68da      	ldr	r2, [r3, #12]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	429a      	cmp	r2, r3
 8011056:	d207      	bcs.n	8011068 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	689a      	ldr	r2, [r3, #8]
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011060:	425b      	negs	r3, r3
 8011062:	441a      	add	r2, r3
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b02      	cmp	r3, #2
 801106c:	d105      	bne.n	801107a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d002      	beq.n	801107a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	3b01      	subs	r3, #1
 8011078:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	1c5a      	adds	r2, r3, #1
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011082:	697b      	ldr	r3, [r7, #20]
}
 8011084:	4618      	mov	r0, r3
 8011086:	3718      	adds	r7, #24
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011094:	f001 f960 	bl	8012358 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801109e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110a0:	e011      	b.n	80110c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d012      	beq.n	80110d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	3324      	adds	r3, #36	; 0x24
 80110ae:	4618      	mov	r0, r3
 80110b0:	f000 fc4e 	bl	8011950 <xTaskRemoveFromEventList>
 80110b4:	4603      	mov	r3, r0
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d001      	beq.n	80110be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80110ba:	f000 fd27 	bl	8011b0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80110be:	7bfb      	ldrb	r3, [r7, #15]
 80110c0:	3b01      	subs	r3, #1
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	dce9      	bgt.n	80110a2 <prvUnlockQueue+0x16>
 80110ce:	e000      	b.n	80110d2 <prvUnlockQueue+0x46>
					break;
 80110d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	22ff      	movs	r2, #255	; 0xff
 80110d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80110da:	f001 f96f 	bl	80123bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80110de:	f001 f93b 	bl	8012358 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80110e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80110ea:	e011      	b.n	8011110 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	691b      	ldr	r3, [r3, #16]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d012      	beq.n	801111a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	3310      	adds	r3, #16
 80110f8:	4618      	mov	r0, r3
 80110fa:	f000 fc29 	bl	8011950 <xTaskRemoveFromEventList>
 80110fe:	4603      	mov	r3, r0
 8011100:	2b00      	cmp	r3, #0
 8011102:	d001      	beq.n	8011108 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011104:	f000 fd02 	bl	8011b0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011108:	7bbb      	ldrb	r3, [r7, #14]
 801110a:	3b01      	subs	r3, #1
 801110c:	b2db      	uxtb	r3, r3
 801110e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011114:	2b00      	cmp	r3, #0
 8011116:	dce9      	bgt.n	80110ec <prvUnlockQueue+0x60>
 8011118:	e000      	b.n	801111c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801111a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	22ff      	movs	r2, #255	; 0xff
 8011120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011124:	f001 f94a 	bl	80123bc <vPortExitCritical>
}
 8011128:	bf00      	nop
 801112a:	3710      	adds	r7, #16
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011138:	f001 f90e 	bl	8012358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011140:	2b00      	cmp	r3, #0
 8011142:	d102      	bne.n	801114a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011144:	2301      	movs	r3, #1
 8011146:	60fb      	str	r3, [r7, #12]
 8011148:	e001      	b.n	801114e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801114a:	2300      	movs	r3, #0
 801114c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801114e:	f001 f935 	bl	80123bc <vPortExitCritical>

	return xReturn;
 8011152:	68fb      	ldr	r3, [r7, #12]
}
 8011154:	4618      	mov	r0, r3
 8011156:	3710      	adds	r7, #16
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}

0801115c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b084      	sub	sp, #16
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011164:	f001 f8f8 	bl	8012358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011170:	429a      	cmp	r2, r3
 8011172:	d102      	bne.n	801117a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011174:	2301      	movs	r3, #1
 8011176:	60fb      	str	r3, [r7, #12]
 8011178:	e001      	b.n	801117e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801117a:	2300      	movs	r3, #0
 801117c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801117e:	f001 f91d 	bl	80123bc <vPortExitCritical>

	return xReturn;
 8011182:	68fb      	ldr	r3, [r7, #12]
}
 8011184:	4618      	mov	r0, r3
 8011186:	3710      	adds	r7, #16
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801118c:	b580      	push	{r7, lr}
 801118e:	b08e      	sub	sp, #56	; 0x38
 8011190:	af04      	add	r7, sp, #16
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	60b9      	str	r1, [r7, #8]
 8011196:	607a      	str	r2, [r7, #4]
 8011198:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801119a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801119c:	2b00      	cmp	r3, #0
 801119e:	d10b      	bne.n	80111b8 <xTaskCreateStatic+0x2c>
 80111a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a4:	b672      	cpsid	i
 80111a6:	f383 8811 	msr	BASEPRI, r3
 80111aa:	f3bf 8f6f 	isb	sy
 80111ae:	f3bf 8f4f 	dsb	sy
 80111b2:	b662      	cpsie	i
 80111b4:	623b      	str	r3, [r7, #32]
 80111b6:	e7fe      	b.n	80111b6 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80111b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d10b      	bne.n	80111d6 <xTaskCreateStatic+0x4a>
 80111be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c2:	b672      	cpsid	i
 80111c4:	f383 8811 	msr	BASEPRI, r3
 80111c8:	f3bf 8f6f 	isb	sy
 80111cc:	f3bf 8f4f 	dsb	sy
 80111d0:	b662      	cpsie	i
 80111d2:	61fb      	str	r3, [r7, #28]
 80111d4:	e7fe      	b.n	80111d4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80111d6:	2354      	movs	r3, #84	; 0x54
 80111d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	2b54      	cmp	r3, #84	; 0x54
 80111de:	d00b      	beq.n	80111f8 <xTaskCreateStatic+0x6c>
 80111e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111e4:	b672      	cpsid	i
 80111e6:	f383 8811 	msr	BASEPRI, r3
 80111ea:	f3bf 8f6f 	isb	sy
 80111ee:	f3bf 8f4f 	dsb	sy
 80111f2:	b662      	cpsie	i
 80111f4:	61bb      	str	r3, [r7, #24]
 80111f6:	e7fe      	b.n	80111f6 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80111f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80111fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d01e      	beq.n	801123e <xTaskCreateStatic+0xb2>
 8011200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011202:	2b00      	cmp	r3, #0
 8011204:	d01b      	beq.n	801123e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011208:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801120e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011212:	2202      	movs	r2, #2
 8011214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011218:	2300      	movs	r3, #0
 801121a:	9303      	str	r3, [sp, #12]
 801121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121e:	9302      	str	r3, [sp, #8]
 8011220:	f107 0314 	add.w	r3, r7, #20
 8011224:	9301      	str	r3, [sp, #4]
 8011226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011228:	9300      	str	r3, [sp, #0]
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	68b9      	ldr	r1, [r7, #8]
 8011230:	68f8      	ldr	r0, [r7, #12]
 8011232:	f000 f850 	bl	80112d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011236:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011238:	f000 f8d6 	bl	80113e8 <prvAddNewTaskToReadyList>
 801123c:	e001      	b.n	8011242 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801123e:	2300      	movs	r3, #0
 8011240:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011242:	697b      	ldr	r3, [r7, #20]
	}
 8011244:	4618      	mov	r0, r3
 8011246:	3728      	adds	r7, #40	; 0x28
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801124c:	b580      	push	{r7, lr}
 801124e:	b08c      	sub	sp, #48	; 0x30
 8011250:	af04      	add	r7, sp, #16
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	603b      	str	r3, [r7, #0]
 8011258:	4613      	mov	r3, r2
 801125a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801125c:	88fb      	ldrh	r3, [r7, #6]
 801125e:	009b      	lsls	r3, r3, #2
 8011260:	4618      	mov	r0, r3
 8011262:	f001 f99b 	bl	801259c <pvPortMalloc>
 8011266:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d00e      	beq.n	801128c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801126e:	2054      	movs	r0, #84	; 0x54
 8011270:	f001 f994 	bl	801259c <pvPortMalloc>
 8011274:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d003      	beq.n	8011284 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801127c:	69fb      	ldr	r3, [r7, #28]
 801127e:	697a      	ldr	r2, [r7, #20]
 8011280:	631a      	str	r2, [r3, #48]	; 0x30
 8011282:	e005      	b.n	8011290 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011284:	6978      	ldr	r0, [r7, #20]
 8011286:	f001 fa51 	bl	801272c <vPortFree>
 801128a:	e001      	b.n	8011290 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801128c:	2300      	movs	r3, #0
 801128e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011290:	69fb      	ldr	r3, [r7, #28]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d017      	beq.n	80112c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011296:	69fb      	ldr	r3, [r7, #28]
 8011298:	2200      	movs	r2, #0
 801129a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801129e:	88fa      	ldrh	r2, [r7, #6]
 80112a0:	2300      	movs	r3, #0
 80112a2:	9303      	str	r3, [sp, #12]
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	9302      	str	r3, [sp, #8]
 80112a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112aa:	9301      	str	r3, [sp, #4]
 80112ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ae:	9300      	str	r3, [sp, #0]
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	68b9      	ldr	r1, [r7, #8]
 80112b4:	68f8      	ldr	r0, [r7, #12]
 80112b6:	f000 f80e 	bl	80112d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80112ba:	69f8      	ldr	r0, [r7, #28]
 80112bc:	f000 f894 	bl	80113e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80112c0:	2301      	movs	r3, #1
 80112c2:	61bb      	str	r3, [r7, #24]
 80112c4:	e002      	b.n	80112cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80112c6:	f04f 33ff 	mov.w	r3, #4294967295
 80112ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80112cc:	69bb      	ldr	r3, [r7, #24]
	}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3720      	adds	r7, #32
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80112d6:	b580      	push	{r7, lr}
 80112d8:	b088      	sub	sp, #32
 80112da:	af00      	add	r7, sp, #0
 80112dc:	60f8      	str	r0, [r7, #12]
 80112de:	60b9      	str	r1, [r7, #8]
 80112e0:	607a      	str	r2, [r7, #4]
 80112e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80112e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80112e8:	6879      	ldr	r1, [r7, #4]
 80112ea:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80112ee:	440b      	add	r3, r1
 80112f0:	009b      	lsls	r3, r3, #2
 80112f2:	4413      	add	r3, r2
 80112f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80112f6:	69bb      	ldr	r3, [r7, #24]
 80112f8:	f023 0307 	bic.w	r3, r3, #7
 80112fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80112fe:	69bb      	ldr	r3, [r7, #24]
 8011300:	f003 0307 	and.w	r3, r3, #7
 8011304:	2b00      	cmp	r3, #0
 8011306:	d00b      	beq.n	8011320 <prvInitialiseNewTask+0x4a>
 8011308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801130c:	b672      	cpsid	i
 801130e:	f383 8811 	msr	BASEPRI, r3
 8011312:	f3bf 8f6f 	isb	sy
 8011316:	f3bf 8f4f 	dsb	sy
 801131a:	b662      	cpsie	i
 801131c:	617b      	str	r3, [r7, #20]
 801131e:	e7fe      	b.n	801131e <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d01f      	beq.n	8011366 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011326:	2300      	movs	r3, #0
 8011328:	61fb      	str	r3, [r7, #28]
 801132a:	e012      	b.n	8011352 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801132c:	68ba      	ldr	r2, [r7, #8]
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	4413      	add	r3, r2
 8011332:	7819      	ldrb	r1, [r3, #0]
 8011334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011336:	69fb      	ldr	r3, [r7, #28]
 8011338:	4413      	add	r3, r2
 801133a:	3334      	adds	r3, #52	; 0x34
 801133c:	460a      	mov	r2, r1
 801133e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011340:	68ba      	ldr	r2, [r7, #8]
 8011342:	69fb      	ldr	r3, [r7, #28]
 8011344:	4413      	add	r3, r2
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d006      	beq.n	801135a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801134c:	69fb      	ldr	r3, [r7, #28]
 801134e:	3301      	adds	r3, #1
 8011350:	61fb      	str	r3, [r7, #28]
 8011352:	69fb      	ldr	r3, [r7, #28]
 8011354:	2b0f      	cmp	r3, #15
 8011356:	d9e9      	bls.n	801132c <prvInitialiseNewTask+0x56>
 8011358:	e000      	b.n	801135c <prvInitialiseNewTask+0x86>
			{
				break;
 801135a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135e:	2200      	movs	r2, #0
 8011360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011364:	e003      	b.n	801136e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011368:	2200      	movs	r2, #0
 801136a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011370:	2b06      	cmp	r3, #6
 8011372:	d901      	bls.n	8011378 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011374:	2306      	movs	r3, #6
 8011376:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801137a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801137c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011382:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011386:	2200      	movs	r2, #0
 8011388:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801138c:	3304      	adds	r3, #4
 801138e:	4618      	mov	r0, r3
 8011390:	f7ff f979 	bl	8010686 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011396:	3318      	adds	r3, #24
 8011398:	4618      	mov	r0, r3
 801139a:	f7ff f974 	bl	8010686 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801139e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a6:	f1c3 0207 	rsb	r2, r3, #7
 80113aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80113ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80113b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b6:	2200      	movs	r2, #0
 80113b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80113ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113bc:	2200      	movs	r2, #0
 80113be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80113c2:	683a      	ldr	r2, [r7, #0]
 80113c4:	68f9      	ldr	r1, [r7, #12]
 80113c6:	69b8      	ldr	r0, [r7, #24]
 80113c8:	f000 febc 	bl	8012144 <pxPortInitialiseStack>
 80113cc:	4602      	mov	r2, r0
 80113ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80113d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d002      	beq.n	80113de <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80113d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113de:	bf00      	nop
 80113e0:	3720      	adds	r7, #32
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
	...

080113e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80113f0:	f000 ffb2 	bl	8012358 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80113f4:	4b2a      	ldr	r3, [pc, #168]	; (80114a0 <prvAddNewTaskToReadyList+0xb8>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	3301      	adds	r3, #1
 80113fa:	4a29      	ldr	r2, [pc, #164]	; (80114a0 <prvAddNewTaskToReadyList+0xb8>)
 80113fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80113fe:	4b29      	ldr	r3, [pc, #164]	; (80114a4 <prvAddNewTaskToReadyList+0xbc>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d109      	bne.n	801141a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011406:	4a27      	ldr	r2, [pc, #156]	; (80114a4 <prvAddNewTaskToReadyList+0xbc>)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801140c:	4b24      	ldr	r3, [pc, #144]	; (80114a0 <prvAddNewTaskToReadyList+0xb8>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2b01      	cmp	r3, #1
 8011412:	d110      	bne.n	8011436 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011414:	f000 fb9e 	bl	8011b54 <prvInitialiseTaskLists>
 8011418:	e00d      	b.n	8011436 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801141a:	4b23      	ldr	r3, [pc, #140]	; (80114a8 <prvAddNewTaskToReadyList+0xc0>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d109      	bne.n	8011436 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011422:	4b20      	ldr	r3, [pc, #128]	; (80114a4 <prvAddNewTaskToReadyList+0xbc>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142c:	429a      	cmp	r2, r3
 801142e:	d802      	bhi.n	8011436 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011430:	4a1c      	ldr	r2, [pc, #112]	; (80114a4 <prvAddNewTaskToReadyList+0xbc>)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011436:	4b1d      	ldr	r3, [pc, #116]	; (80114ac <prvAddNewTaskToReadyList+0xc4>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	3301      	adds	r3, #1
 801143c:	4a1b      	ldr	r2, [pc, #108]	; (80114ac <prvAddNewTaskToReadyList+0xc4>)
 801143e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011444:	2201      	movs	r2, #1
 8011446:	409a      	lsls	r2, r3
 8011448:	4b19      	ldr	r3, [pc, #100]	; (80114b0 <prvAddNewTaskToReadyList+0xc8>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4313      	orrs	r3, r2
 801144e:	4a18      	ldr	r2, [pc, #96]	; (80114b0 <prvAddNewTaskToReadyList+0xc8>)
 8011450:	6013      	str	r3, [r2, #0]
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011456:	4613      	mov	r3, r2
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	4413      	add	r3, r2
 801145c:	009b      	lsls	r3, r3, #2
 801145e:	4a15      	ldr	r2, [pc, #84]	; (80114b4 <prvAddNewTaskToReadyList+0xcc>)
 8011460:	441a      	add	r2, r3
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	3304      	adds	r3, #4
 8011466:	4619      	mov	r1, r3
 8011468:	4610      	mov	r0, r2
 801146a:	f7ff f919 	bl	80106a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801146e:	f000 ffa5 	bl	80123bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011472:	4b0d      	ldr	r3, [pc, #52]	; (80114a8 <prvAddNewTaskToReadyList+0xc0>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d00e      	beq.n	8011498 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801147a:	4b0a      	ldr	r3, [pc, #40]	; (80114a4 <prvAddNewTaskToReadyList+0xbc>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011484:	429a      	cmp	r2, r3
 8011486:	d207      	bcs.n	8011498 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011488:	4b0b      	ldr	r3, [pc, #44]	; (80114b8 <prvAddNewTaskToReadyList+0xd0>)
 801148a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801148e:	601a      	str	r2, [r3, #0]
 8011490:	f3bf 8f4f 	dsb	sy
 8011494:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011498:	bf00      	nop
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}
 80114a0:	200003a8 	.word	0x200003a8
 80114a4:	200002a8 	.word	0x200002a8
 80114a8:	200003b4 	.word	0x200003b4
 80114ac:	200003c4 	.word	0x200003c4
 80114b0:	200003b0 	.word	0x200003b0
 80114b4:	200002ac 	.word	0x200002ac
 80114b8:	e000ed04 	.word	0xe000ed04

080114bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b08a      	sub	sp, #40	; 0x28
 80114c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80114c2:	2300      	movs	r3, #0
 80114c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80114c6:	2300      	movs	r3, #0
 80114c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80114ca:	463a      	mov	r2, r7
 80114cc:	1d39      	adds	r1, r7, #4
 80114ce:	f107 0308 	add.w	r3, r7, #8
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7f7 faac 	bl	8008a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80114d8:	6839      	ldr	r1, [r7, #0]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	68ba      	ldr	r2, [r7, #8]
 80114de:	9202      	str	r2, [sp, #8]
 80114e0:	9301      	str	r3, [sp, #4]
 80114e2:	2300      	movs	r3, #0
 80114e4:	9300      	str	r3, [sp, #0]
 80114e6:	2300      	movs	r3, #0
 80114e8:	460a      	mov	r2, r1
 80114ea:	491f      	ldr	r1, [pc, #124]	; (8011568 <vTaskStartScheduler+0xac>)
 80114ec:	481f      	ldr	r0, [pc, #124]	; (801156c <vTaskStartScheduler+0xb0>)
 80114ee:	f7ff fe4d 	bl	801118c <xTaskCreateStatic>
 80114f2:	4602      	mov	r2, r0
 80114f4:	4b1e      	ldr	r3, [pc, #120]	; (8011570 <vTaskStartScheduler+0xb4>)
 80114f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80114f8:	4b1d      	ldr	r3, [pc, #116]	; (8011570 <vTaskStartScheduler+0xb4>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d002      	beq.n	8011506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011500:	2301      	movs	r3, #1
 8011502:	617b      	str	r3, [r7, #20]
 8011504:	e001      	b.n	801150a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011506:	2300      	movs	r3, #0
 8011508:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	2b01      	cmp	r3, #1
 801150e:	d117      	bne.n	8011540 <vTaskStartScheduler+0x84>
 8011510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011514:	b672      	cpsid	i
 8011516:	f383 8811 	msr	BASEPRI, r3
 801151a:	f3bf 8f6f 	isb	sy
 801151e:	f3bf 8f4f 	dsb	sy
 8011522:	b662      	cpsie	i
 8011524:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011526:	4b13      	ldr	r3, [pc, #76]	; (8011574 <vTaskStartScheduler+0xb8>)
 8011528:	f04f 32ff 	mov.w	r2, #4294967295
 801152c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801152e:	4b12      	ldr	r3, [pc, #72]	; (8011578 <vTaskStartScheduler+0xbc>)
 8011530:	2201      	movs	r2, #1
 8011532:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011534:	4b11      	ldr	r3, [pc, #68]	; (801157c <vTaskStartScheduler+0xc0>)
 8011536:	2200      	movs	r2, #0
 8011538:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801153a:	f000 fe91 	bl	8012260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801153e:	e00f      	b.n	8011560 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011546:	d10b      	bne.n	8011560 <vTaskStartScheduler+0xa4>
 8011548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801154c:	b672      	cpsid	i
 801154e:	f383 8811 	msr	BASEPRI, r3
 8011552:	f3bf 8f6f 	isb	sy
 8011556:	f3bf 8f4f 	dsb	sy
 801155a:	b662      	cpsie	i
 801155c:	60fb      	str	r3, [r7, #12]
 801155e:	e7fe      	b.n	801155e <vTaskStartScheduler+0xa2>
}
 8011560:	bf00      	nop
 8011562:	3718      	adds	r7, #24
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}
 8011568:	08012ab4 	.word	0x08012ab4
 801156c:	08011b25 	.word	0x08011b25
 8011570:	200003cc 	.word	0x200003cc
 8011574:	200003c8 	.word	0x200003c8
 8011578:	200003b4 	.word	0x200003b4
 801157c:	200003ac 	.word	0x200003ac

08011580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011580:	b480      	push	{r7}
 8011582:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011584:	4b04      	ldr	r3, [pc, #16]	; (8011598 <vTaskSuspendAll+0x18>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	3301      	adds	r3, #1
 801158a:	4a03      	ldr	r2, [pc, #12]	; (8011598 <vTaskSuspendAll+0x18>)
 801158c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801158e:	bf00      	nop
 8011590:	46bd      	mov	sp, r7
 8011592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011596:	4770      	bx	lr
 8011598:	200003d0 	.word	0x200003d0

0801159c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b084      	sub	sp, #16
 80115a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80115a2:	2300      	movs	r3, #0
 80115a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80115a6:	2300      	movs	r3, #0
 80115a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80115aa:	4b42      	ldr	r3, [pc, #264]	; (80116b4 <xTaskResumeAll+0x118>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d10b      	bne.n	80115ca <xTaskResumeAll+0x2e>
 80115b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b6:	b672      	cpsid	i
 80115b8:	f383 8811 	msr	BASEPRI, r3
 80115bc:	f3bf 8f6f 	isb	sy
 80115c0:	f3bf 8f4f 	dsb	sy
 80115c4:	b662      	cpsie	i
 80115c6:	603b      	str	r3, [r7, #0]
 80115c8:	e7fe      	b.n	80115c8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80115ca:	f000 fec5 	bl	8012358 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80115ce:	4b39      	ldr	r3, [pc, #228]	; (80116b4 <xTaskResumeAll+0x118>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	3b01      	subs	r3, #1
 80115d4:	4a37      	ldr	r2, [pc, #220]	; (80116b4 <xTaskResumeAll+0x118>)
 80115d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115d8:	4b36      	ldr	r3, [pc, #216]	; (80116b4 <xTaskResumeAll+0x118>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d161      	bne.n	80116a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80115e0:	4b35      	ldr	r3, [pc, #212]	; (80116b8 <xTaskResumeAll+0x11c>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d05d      	beq.n	80116a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80115e8:	e02e      	b.n	8011648 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115ea:	4b34      	ldr	r3, [pc, #208]	; (80116bc <xTaskResumeAll+0x120>)
 80115ec:	68db      	ldr	r3, [r3, #12]
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	3318      	adds	r3, #24
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7ff f8af 	bl	801075a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	3304      	adds	r3, #4
 8011600:	4618      	mov	r0, r3
 8011602:	f7ff f8aa 	bl	801075a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801160a:	2201      	movs	r2, #1
 801160c:	409a      	lsls	r2, r3
 801160e:	4b2c      	ldr	r3, [pc, #176]	; (80116c0 <xTaskResumeAll+0x124>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	4313      	orrs	r3, r2
 8011614:	4a2a      	ldr	r2, [pc, #168]	; (80116c0 <xTaskResumeAll+0x124>)
 8011616:	6013      	str	r3, [r2, #0]
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801161c:	4613      	mov	r3, r2
 801161e:	009b      	lsls	r3, r3, #2
 8011620:	4413      	add	r3, r2
 8011622:	009b      	lsls	r3, r3, #2
 8011624:	4a27      	ldr	r2, [pc, #156]	; (80116c4 <xTaskResumeAll+0x128>)
 8011626:	441a      	add	r2, r3
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	3304      	adds	r3, #4
 801162c:	4619      	mov	r1, r3
 801162e:	4610      	mov	r0, r2
 8011630:	f7ff f836 	bl	80106a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011638:	4b23      	ldr	r3, [pc, #140]	; (80116c8 <xTaskResumeAll+0x12c>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801163e:	429a      	cmp	r2, r3
 8011640:	d302      	bcc.n	8011648 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011642:	4b22      	ldr	r3, [pc, #136]	; (80116cc <xTaskResumeAll+0x130>)
 8011644:	2201      	movs	r2, #1
 8011646:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011648:	4b1c      	ldr	r3, [pc, #112]	; (80116bc <xTaskResumeAll+0x120>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d1cc      	bne.n	80115ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d001      	beq.n	801165a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011656:	f000 fb19 	bl	8011c8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801165a:	4b1d      	ldr	r3, [pc, #116]	; (80116d0 <xTaskResumeAll+0x134>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d010      	beq.n	8011688 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011666:	f000 f837 	bl	80116d8 <xTaskIncrementTick>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d002      	beq.n	8011676 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011670:	4b16      	ldr	r3, [pc, #88]	; (80116cc <xTaskResumeAll+0x130>)
 8011672:	2201      	movs	r2, #1
 8011674:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	3b01      	subs	r3, #1
 801167a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d1f1      	bne.n	8011666 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8011682:	4b13      	ldr	r3, [pc, #76]	; (80116d0 <xTaskResumeAll+0x134>)
 8011684:	2200      	movs	r2, #0
 8011686:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011688:	4b10      	ldr	r3, [pc, #64]	; (80116cc <xTaskResumeAll+0x130>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d009      	beq.n	80116a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011690:	2301      	movs	r3, #1
 8011692:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011694:	4b0f      	ldr	r3, [pc, #60]	; (80116d4 <xTaskResumeAll+0x138>)
 8011696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801169a:	601a      	str	r2, [r3, #0]
 801169c:	f3bf 8f4f 	dsb	sy
 80116a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80116a4:	f000 fe8a 	bl	80123bc <vPortExitCritical>

	return xAlreadyYielded;
 80116a8:	68bb      	ldr	r3, [r7, #8]
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3710      	adds	r7, #16
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	bf00      	nop
 80116b4:	200003d0 	.word	0x200003d0
 80116b8:	200003a8 	.word	0x200003a8
 80116bc:	20000368 	.word	0x20000368
 80116c0:	200003b0 	.word	0x200003b0
 80116c4:	200002ac 	.word	0x200002ac
 80116c8:	200002a8 	.word	0x200002a8
 80116cc:	200003bc 	.word	0x200003bc
 80116d0:	200003b8 	.word	0x200003b8
 80116d4:	e000ed04 	.word	0xe000ed04

080116d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b086      	sub	sp, #24
 80116dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80116de:	2300      	movs	r3, #0
 80116e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116e2:	4b4f      	ldr	r3, [pc, #316]	; (8011820 <xTaskIncrementTick+0x148>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f040 8089 	bne.w	80117fe <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80116ec:	4b4d      	ldr	r3, [pc, #308]	; (8011824 <xTaskIncrementTick+0x14c>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	3301      	adds	r3, #1
 80116f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80116f4:	4a4b      	ldr	r2, [pc, #300]	; (8011824 <xTaskIncrementTick+0x14c>)
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d121      	bne.n	8011744 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011700:	4b49      	ldr	r3, [pc, #292]	; (8011828 <xTaskIncrementTick+0x150>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d00b      	beq.n	8011722 <xTaskIncrementTick+0x4a>
 801170a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801170e:	b672      	cpsid	i
 8011710:	f383 8811 	msr	BASEPRI, r3
 8011714:	f3bf 8f6f 	isb	sy
 8011718:	f3bf 8f4f 	dsb	sy
 801171c:	b662      	cpsie	i
 801171e:	603b      	str	r3, [r7, #0]
 8011720:	e7fe      	b.n	8011720 <xTaskIncrementTick+0x48>
 8011722:	4b41      	ldr	r3, [pc, #260]	; (8011828 <xTaskIncrementTick+0x150>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	60fb      	str	r3, [r7, #12]
 8011728:	4b40      	ldr	r3, [pc, #256]	; (801182c <xTaskIncrementTick+0x154>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	4a3e      	ldr	r2, [pc, #248]	; (8011828 <xTaskIncrementTick+0x150>)
 801172e:	6013      	str	r3, [r2, #0]
 8011730:	4a3e      	ldr	r2, [pc, #248]	; (801182c <xTaskIncrementTick+0x154>)
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	6013      	str	r3, [r2, #0]
 8011736:	4b3e      	ldr	r3, [pc, #248]	; (8011830 <xTaskIncrementTick+0x158>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	3301      	adds	r3, #1
 801173c:	4a3c      	ldr	r2, [pc, #240]	; (8011830 <xTaskIncrementTick+0x158>)
 801173e:	6013      	str	r3, [r2, #0]
 8011740:	f000 faa4 	bl	8011c8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011744:	4b3b      	ldr	r3, [pc, #236]	; (8011834 <xTaskIncrementTick+0x15c>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	693a      	ldr	r2, [r7, #16]
 801174a:	429a      	cmp	r2, r3
 801174c:	d348      	bcc.n	80117e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801174e:	4b36      	ldr	r3, [pc, #216]	; (8011828 <xTaskIncrementTick+0x150>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d104      	bne.n	8011762 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011758:	4b36      	ldr	r3, [pc, #216]	; (8011834 <xTaskIncrementTick+0x15c>)
 801175a:	f04f 32ff 	mov.w	r2, #4294967295
 801175e:	601a      	str	r2, [r3, #0]
					break;
 8011760:	e03e      	b.n	80117e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011762:	4b31      	ldr	r3, [pc, #196]	; (8011828 <xTaskIncrementTick+0x150>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	68db      	ldr	r3, [r3, #12]
 801176a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011772:	693a      	ldr	r2, [r7, #16]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	429a      	cmp	r2, r3
 8011778:	d203      	bcs.n	8011782 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801177a:	4a2e      	ldr	r2, [pc, #184]	; (8011834 <xTaskIncrementTick+0x15c>)
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011780:	e02e      	b.n	80117e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	3304      	adds	r3, #4
 8011786:	4618      	mov	r0, r3
 8011788:	f7fe ffe7 	bl	801075a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011790:	2b00      	cmp	r3, #0
 8011792:	d004      	beq.n	801179e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	3318      	adds	r3, #24
 8011798:	4618      	mov	r0, r3
 801179a:	f7fe ffde 	bl	801075a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117a2:	2201      	movs	r2, #1
 80117a4:	409a      	lsls	r2, r3
 80117a6:	4b24      	ldr	r3, [pc, #144]	; (8011838 <xTaskIncrementTick+0x160>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	4313      	orrs	r3, r2
 80117ac:	4a22      	ldr	r2, [pc, #136]	; (8011838 <xTaskIncrementTick+0x160>)
 80117ae:	6013      	str	r3, [r2, #0]
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117b4:	4613      	mov	r3, r2
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	4413      	add	r3, r2
 80117ba:	009b      	lsls	r3, r3, #2
 80117bc:	4a1f      	ldr	r2, [pc, #124]	; (801183c <xTaskIncrementTick+0x164>)
 80117be:	441a      	add	r2, r3
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	3304      	adds	r3, #4
 80117c4:	4619      	mov	r1, r3
 80117c6:	4610      	mov	r0, r2
 80117c8:	f7fe ff6a 	bl	80106a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117d0:	4b1b      	ldr	r3, [pc, #108]	; (8011840 <xTaskIncrementTick+0x168>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d3b9      	bcc.n	801174e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80117da:	2301      	movs	r3, #1
 80117dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117de:	e7b6      	b.n	801174e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80117e0:	4b17      	ldr	r3, [pc, #92]	; (8011840 <xTaskIncrementTick+0x168>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117e6:	4915      	ldr	r1, [pc, #84]	; (801183c <xTaskIncrementTick+0x164>)
 80117e8:	4613      	mov	r3, r2
 80117ea:	009b      	lsls	r3, r3, #2
 80117ec:	4413      	add	r3, r2
 80117ee:	009b      	lsls	r3, r3, #2
 80117f0:	440b      	add	r3, r1
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	d907      	bls.n	8011808 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80117f8:	2301      	movs	r3, #1
 80117fa:	617b      	str	r3, [r7, #20]
 80117fc:	e004      	b.n	8011808 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80117fe:	4b11      	ldr	r3, [pc, #68]	; (8011844 <xTaskIncrementTick+0x16c>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	3301      	adds	r3, #1
 8011804:	4a0f      	ldr	r2, [pc, #60]	; (8011844 <xTaskIncrementTick+0x16c>)
 8011806:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011808:	4b0f      	ldr	r3, [pc, #60]	; (8011848 <xTaskIncrementTick+0x170>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d001      	beq.n	8011814 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8011810:	2301      	movs	r3, #1
 8011812:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011814:	697b      	ldr	r3, [r7, #20]
}
 8011816:	4618      	mov	r0, r3
 8011818:	3718      	adds	r7, #24
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	200003d0 	.word	0x200003d0
 8011824:	200003ac 	.word	0x200003ac
 8011828:	20000360 	.word	0x20000360
 801182c:	20000364 	.word	0x20000364
 8011830:	200003c0 	.word	0x200003c0
 8011834:	200003c8 	.word	0x200003c8
 8011838:	200003b0 	.word	0x200003b0
 801183c:	200002ac 	.word	0x200002ac
 8011840:	200002a8 	.word	0x200002a8
 8011844:	200003b8 	.word	0x200003b8
 8011848:	200003bc 	.word	0x200003bc

0801184c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801184c:	b480      	push	{r7}
 801184e:	b087      	sub	sp, #28
 8011850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011852:	4b27      	ldr	r3, [pc, #156]	; (80118f0 <vTaskSwitchContext+0xa4>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d003      	beq.n	8011862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801185a:	4b26      	ldr	r3, [pc, #152]	; (80118f4 <vTaskSwitchContext+0xa8>)
 801185c:	2201      	movs	r2, #1
 801185e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011860:	e040      	b.n	80118e4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8011862:	4b24      	ldr	r3, [pc, #144]	; (80118f4 <vTaskSwitchContext+0xa8>)
 8011864:	2200      	movs	r2, #0
 8011866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011868:	4b23      	ldr	r3, [pc, #140]	; (80118f8 <vTaskSwitchContext+0xac>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	fab3 f383 	clz	r3, r3
 8011874:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011876:	7afb      	ldrb	r3, [r7, #11]
 8011878:	f1c3 031f 	rsb	r3, r3, #31
 801187c:	617b      	str	r3, [r7, #20]
 801187e:	491f      	ldr	r1, [pc, #124]	; (80118fc <vTaskSwitchContext+0xb0>)
 8011880:	697a      	ldr	r2, [r7, #20]
 8011882:	4613      	mov	r3, r2
 8011884:	009b      	lsls	r3, r3, #2
 8011886:	4413      	add	r3, r2
 8011888:	009b      	lsls	r3, r3, #2
 801188a:	440b      	add	r3, r1
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d10b      	bne.n	80118aa <vTaskSwitchContext+0x5e>
	__asm volatile
 8011892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011896:	b672      	cpsid	i
 8011898:	f383 8811 	msr	BASEPRI, r3
 801189c:	f3bf 8f6f 	isb	sy
 80118a0:	f3bf 8f4f 	dsb	sy
 80118a4:	b662      	cpsie	i
 80118a6:	607b      	str	r3, [r7, #4]
 80118a8:	e7fe      	b.n	80118a8 <vTaskSwitchContext+0x5c>
 80118aa:	697a      	ldr	r2, [r7, #20]
 80118ac:	4613      	mov	r3, r2
 80118ae:	009b      	lsls	r3, r3, #2
 80118b0:	4413      	add	r3, r2
 80118b2:	009b      	lsls	r3, r3, #2
 80118b4:	4a11      	ldr	r2, [pc, #68]	; (80118fc <vTaskSwitchContext+0xb0>)
 80118b6:	4413      	add	r3, r2
 80118b8:	613b      	str	r3, [r7, #16]
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	685a      	ldr	r2, [r3, #4]
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	605a      	str	r2, [r3, #4]
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	685a      	ldr	r2, [r3, #4]
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	3308      	adds	r3, #8
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d104      	bne.n	80118da <vTaskSwitchContext+0x8e>
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	685a      	ldr	r2, [r3, #4]
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	605a      	str	r2, [r3, #4]
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	4a07      	ldr	r2, [pc, #28]	; (8011900 <vTaskSwitchContext+0xb4>)
 80118e2:	6013      	str	r3, [r2, #0]
}
 80118e4:	bf00      	nop
 80118e6:	371c      	adds	r7, #28
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr
 80118f0:	200003d0 	.word	0x200003d0
 80118f4:	200003bc 	.word	0x200003bc
 80118f8:	200003b0 	.word	0x200003b0
 80118fc:	200002ac 	.word	0x200002ac
 8011900:	200002a8 	.word	0x200002a8

08011904 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d10b      	bne.n	801192c <vTaskPlaceOnEventList+0x28>
 8011914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011918:	b672      	cpsid	i
 801191a:	f383 8811 	msr	BASEPRI, r3
 801191e:	f3bf 8f6f 	isb	sy
 8011922:	f3bf 8f4f 	dsb	sy
 8011926:	b662      	cpsie	i
 8011928:	60fb      	str	r3, [r7, #12]
 801192a:	e7fe      	b.n	801192a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801192c:	4b07      	ldr	r3, [pc, #28]	; (801194c <vTaskPlaceOnEventList+0x48>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	3318      	adds	r3, #24
 8011932:	4619      	mov	r1, r3
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f7fe fed7 	bl	80106e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801193a:	2101      	movs	r1, #1
 801193c:	6838      	ldr	r0, [r7, #0]
 801193e:	f000 fb9b 	bl	8012078 <prvAddCurrentTaskToDelayedList>
}
 8011942:	bf00      	nop
 8011944:	3710      	adds	r7, #16
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}
 801194a:	bf00      	nop
 801194c:	200002a8 	.word	0x200002a8

08011950 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b086      	sub	sp, #24
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	68db      	ldr	r3, [r3, #12]
 801195c:	68db      	ldr	r3, [r3, #12]
 801195e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011960:	693b      	ldr	r3, [r7, #16]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d10b      	bne.n	801197e <xTaskRemoveFromEventList+0x2e>
 8011966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801196a:	b672      	cpsid	i
 801196c:	f383 8811 	msr	BASEPRI, r3
 8011970:	f3bf 8f6f 	isb	sy
 8011974:	f3bf 8f4f 	dsb	sy
 8011978:	b662      	cpsie	i
 801197a:	60fb      	str	r3, [r7, #12]
 801197c:	e7fe      	b.n	801197c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	3318      	adds	r3, #24
 8011982:	4618      	mov	r0, r3
 8011984:	f7fe fee9 	bl	801075a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011988:	4b1d      	ldr	r3, [pc, #116]	; (8011a00 <xTaskRemoveFromEventList+0xb0>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d11c      	bne.n	80119ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	3304      	adds	r3, #4
 8011994:	4618      	mov	r0, r3
 8011996:	f7fe fee0 	bl	801075a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801199e:	2201      	movs	r2, #1
 80119a0:	409a      	lsls	r2, r3
 80119a2:	4b18      	ldr	r3, [pc, #96]	; (8011a04 <xTaskRemoveFromEventList+0xb4>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	4313      	orrs	r3, r2
 80119a8:	4a16      	ldr	r2, [pc, #88]	; (8011a04 <xTaskRemoveFromEventList+0xb4>)
 80119aa:	6013      	str	r3, [r2, #0]
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119b0:	4613      	mov	r3, r2
 80119b2:	009b      	lsls	r3, r3, #2
 80119b4:	4413      	add	r3, r2
 80119b6:	009b      	lsls	r3, r3, #2
 80119b8:	4a13      	ldr	r2, [pc, #76]	; (8011a08 <xTaskRemoveFromEventList+0xb8>)
 80119ba:	441a      	add	r2, r3
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	3304      	adds	r3, #4
 80119c0:	4619      	mov	r1, r3
 80119c2:	4610      	mov	r0, r2
 80119c4:	f7fe fe6c 	bl	80106a0 <vListInsertEnd>
 80119c8:	e005      	b.n	80119d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	3318      	adds	r3, #24
 80119ce:	4619      	mov	r1, r3
 80119d0:	480e      	ldr	r0, [pc, #56]	; (8011a0c <xTaskRemoveFromEventList+0xbc>)
 80119d2:	f7fe fe65 	bl	80106a0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119da:	4b0d      	ldr	r3, [pc, #52]	; (8011a10 <xTaskRemoveFromEventList+0xc0>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d905      	bls.n	80119f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80119e4:	2301      	movs	r3, #1
 80119e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80119e8:	4b0a      	ldr	r3, [pc, #40]	; (8011a14 <xTaskRemoveFromEventList+0xc4>)
 80119ea:	2201      	movs	r2, #1
 80119ec:	601a      	str	r2, [r3, #0]
 80119ee:	e001      	b.n	80119f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80119f0:	2300      	movs	r3, #0
 80119f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80119f4:	697b      	ldr	r3, [r7, #20]
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	3718      	adds	r7, #24
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}
 80119fe:	bf00      	nop
 8011a00:	200003d0 	.word	0x200003d0
 8011a04:	200003b0 	.word	0x200003b0
 8011a08:	200002ac 	.word	0x200002ac
 8011a0c:	20000368 	.word	0x20000368
 8011a10:	200002a8 	.word	0x200002a8
 8011a14:	200003bc 	.word	0x200003bc

08011a18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b083      	sub	sp, #12
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011a20:	4b06      	ldr	r3, [pc, #24]	; (8011a3c <vTaskInternalSetTimeOutState+0x24>)
 8011a22:	681a      	ldr	r2, [r3, #0]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011a28:	4b05      	ldr	r3, [pc, #20]	; (8011a40 <vTaskInternalSetTimeOutState+0x28>)
 8011a2a:	681a      	ldr	r2, [r3, #0]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	605a      	str	r2, [r3, #4]
}
 8011a30:	bf00      	nop
 8011a32:	370c      	adds	r7, #12
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr
 8011a3c:	200003c0 	.word	0x200003c0
 8011a40:	200003ac 	.word	0x200003ac

08011a44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b088      	sub	sp, #32
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
 8011a4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d10b      	bne.n	8011a6c <xTaskCheckForTimeOut+0x28>
 8011a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a58:	b672      	cpsid	i
 8011a5a:	f383 8811 	msr	BASEPRI, r3
 8011a5e:	f3bf 8f6f 	isb	sy
 8011a62:	f3bf 8f4f 	dsb	sy
 8011a66:	b662      	cpsie	i
 8011a68:	613b      	str	r3, [r7, #16]
 8011a6a:	e7fe      	b.n	8011a6a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d10b      	bne.n	8011a8a <xTaskCheckForTimeOut+0x46>
 8011a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a76:	b672      	cpsid	i
 8011a78:	f383 8811 	msr	BASEPRI, r3
 8011a7c:	f3bf 8f6f 	isb	sy
 8011a80:	f3bf 8f4f 	dsb	sy
 8011a84:	b662      	cpsie	i
 8011a86:	60fb      	str	r3, [r7, #12]
 8011a88:	e7fe      	b.n	8011a88 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8011a8a:	f000 fc65 	bl	8012358 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011a8e:	4b1d      	ldr	r3, [pc, #116]	; (8011b04 <xTaskCheckForTimeOut+0xc0>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	69ba      	ldr	r2, [r7, #24]
 8011a9a:	1ad3      	subs	r3, r2, r3
 8011a9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aa6:	d102      	bne.n	8011aae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	61fb      	str	r3, [r7, #28]
 8011aac:	e023      	b.n	8011af6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	4b15      	ldr	r3, [pc, #84]	; (8011b08 <xTaskCheckForTimeOut+0xc4>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d007      	beq.n	8011aca <xTaskCheckForTimeOut+0x86>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	69ba      	ldr	r2, [r7, #24]
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	d302      	bcc.n	8011aca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	61fb      	str	r3, [r7, #28]
 8011ac8:	e015      	b.n	8011af6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	697a      	ldr	r2, [r7, #20]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d20b      	bcs.n	8011aec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	681a      	ldr	r2, [r3, #0]
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	1ad2      	subs	r2, r2, r3
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f7ff ff99 	bl	8011a18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	61fb      	str	r3, [r7, #28]
 8011aea:	e004      	b.n	8011af6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	2200      	movs	r2, #0
 8011af0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011af2:	2301      	movs	r3, #1
 8011af4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011af6:	f000 fc61 	bl	80123bc <vPortExitCritical>

	return xReturn;
 8011afa:	69fb      	ldr	r3, [r7, #28]
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	3720      	adds	r7, #32
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	200003ac 	.word	0x200003ac
 8011b08:	200003c0 	.word	0x200003c0

08011b0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011b10:	4b03      	ldr	r3, [pc, #12]	; (8011b20 <vTaskMissedYield+0x14>)
 8011b12:	2201      	movs	r2, #1
 8011b14:	601a      	str	r2, [r3, #0]
}
 8011b16:	bf00      	nop
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr
 8011b20:	200003bc 	.word	0x200003bc

08011b24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011b2c:	f000 f852 	bl	8011bd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011b30:	4b06      	ldr	r3, [pc, #24]	; (8011b4c <prvIdleTask+0x28>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d9f9      	bls.n	8011b2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011b38:	4b05      	ldr	r3, [pc, #20]	; (8011b50 <prvIdleTask+0x2c>)
 8011b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b3e:	601a      	str	r2, [r3, #0]
 8011b40:	f3bf 8f4f 	dsb	sy
 8011b44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011b48:	e7f0      	b.n	8011b2c <prvIdleTask+0x8>
 8011b4a:	bf00      	nop
 8011b4c:	200002ac 	.word	0x200002ac
 8011b50:	e000ed04 	.word	0xe000ed04

08011b54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	607b      	str	r3, [r7, #4]
 8011b5e:	e00c      	b.n	8011b7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011b60:	687a      	ldr	r2, [r7, #4]
 8011b62:	4613      	mov	r3, r2
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	4413      	add	r3, r2
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	4a12      	ldr	r2, [pc, #72]	; (8011bb4 <prvInitialiseTaskLists+0x60>)
 8011b6c:	4413      	add	r3, r2
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7fe fd69 	bl	8010646 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	3301      	adds	r3, #1
 8011b78:	607b      	str	r3, [r7, #4]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2b06      	cmp	r3, #6
 8011b7e:	d9ef      	bls.n	8011b60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011b80:	480d      	ldr	r0, [pc, #52]	; (8011bb8 <prvInitialiseTaskLists+0x64>)
 8011b82:	f7fe fd60 	bl	8010646 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011b86:	480d      	ldr	r0, [pc, #52]	; (8011bbc <prvInitialiseTaskLists+0x68>)
 8011b88:	f7fe fd5d 	bl	8010646 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011b8c:	480c      	ldr	r0, [pc, #48]	; (8011bc0 <prvInitialiseTaskLists+0x6c>)
 8011b8e:	f7fe fd5a 	bl	8010646 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011b92:	480c      	ldr	r0, [pc, #48]	; (8011bc4 <prvInitialiseTaskLists+0x70>)
 8011b94:	f7fe fd57 	bl	8010646 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011b98:	480b      	ldr	r0, [pc, #44]	; (8011bc8 <prvInitialiseTaskLists+0x74>)
 8011b9a:	f7fe fd54 	bl	8010646 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011b9e:	4b0b      	ldr	r3, [pc, #44]	; (8011bcc <prvInitialiseTaskLists+0x78>)
 8011ba0:	4a05      	ldr	r2, [pc, #20]	; (8011bb8 <prvInitialiseTaskLists+0x64>)
 8011ba2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011ba4:	4b0a      	ldr	r3, [pc, #40]	; (8011bd0 <prvInitialiseTaskLists+0x7c>)
 8011ba6:	4a05      	ldr	r2, [pc, #20]	; (8011bbc <prvInitialiseTaskLists+0x68>)
 8011ba8:	601a      	str	r2, [r3, #0]
}
 8011baa:	bf00      	nop
 8011bac:	3708      	adds	r7, #8
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	200002ac 	.word	0x200002ac
 8011bb8:	20000338 	.word	0x20000338
 8011bbc:	2000034c 	.word	0x2000034c
 8011bc0:	20000368 	.word	0x20000368
 8011bc4:	2000037c 	.word	0x2000037c
 8011bc8:	20000394 	.word	0x20000394
 8011bcc:	20000360 	.word	0x20000360
 8011bd0:	20000364 	.word	0x20000364

08011bd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011bda:	e019      	b.n	8011c10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011bdc:	f000 fbbc 	bl	8012358 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011be0:	4b0f      	ldr	r3, [pc, #60]	; (8011c20 <prvCheckTasksWaitingTermination+0x4c>)
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	68db      	ldr	r3, [r3, #12]
 8011be6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	3304      	adds	r3, #4
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7fe fdb4 	bl	801075a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011bf2:	4b0c      	ldr	r3, [pc, #48]	; (8011c24 <prvCheckTasksWaitingTermination+0x50>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	3b01      	subs	r3, #1
 8011bf8:	4a0a      	ldr	r2, [pc, #40]	; (8011c24 <prvCheckTasksWaitingTermination+0x50>)
 8011bfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011bfc:	4b0a      	ldr	r3, [pc, #40]	; (8011c28 <prvCheckTasksWaitingTermination+0x54>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	3b01      	subs	r3, #1
 8011c02:	4a09      	ldr	r2, [pc, #36]	; (8011c28 <prvCheckTasksWaitingTermination+0x54>)
 8011c04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011c06:	f000 fbd9 	bl	80123bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f000 f80e 	bl	8011c2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011c10:	4b05      	ldr	r3, [pc, #20]	; (8011c28 <prvCheckTasksWaitingTermination+0x54>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d1e1      	bne.n	8011bdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011c18:	bf00      	nop
 8011c1a:	3708      	adds	r7, #8
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	2000037c 	.word	0x2000037c
 8011c24:	200003a8 	.word	0x200003a8
 8011c28:	20000390 	.word	0x20000390

08011c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d108      	bne.n	8011c50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c42:	4618      	mov	r0, r3
 8011c44:	f000 fd72 	bl	801272c <vPortFree>
				vPortFree( pxTCB );
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f000 fd6f 	bl	801272c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011c4e:	e019      	b.n	8011c84 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011c56:	2b01      	cmp	r3, #1
 8011c58:	d103      	bne.n	8011c62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f000 fd66 	bl	801272c <vPortFree>
	}
 8011c60:	e010      	b.n	8011c84 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011c68:	2b02      	cmp	r3, #2
 8011c6a:	d00b      	beq.n	8011c84 <prvDeleteTCB+0x58>
 8011c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c70:	b672      	cpsid	i
 8011c72:	f383 8811 	msr	BASEPRI, r3
 8011c76:	f3bf 8f6f 	isb	sy
 8011c7a:	f3bf 8f4f 	dsb	sy
 8011c7e:	b662      	cpsie	i
 8011c80:	60fb      	str	r3, [r7, #12]
 8011c82:	e7fe      	b.n	8011c82 <prvDeleteTCB+0x56>
	}
 8011c84:	bf00      	nop
 8011c86:	3710      	adds	r7, #16
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}

08011c8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011c8c:	b480      	push	{r7}
 8011c8e:	b083      	sub	sp, #12
 8011c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c92:	4b0c      	ldr	r3, [pc, #48]	; (8011cc4 <prvResetNextTaskUnblockTime+0x38>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d104      	bne.n	8011ca6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011c9c:	4b0a      	ldr	r3, [pc, #40]	; (8011cc8 <prvResetNextTaskUnblockTime+0x3c>)
 8011c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8011ca2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011ca4:	e008      	b.n	8011cb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ca6:	4b07      	ldr	r3, [pc, #28]	; (8011cc4 <prvResetNextTaskUnblockTime+0x38>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	68db      	ldr	r3, [r3, #12]
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	4a04      	ldr	r2, [pc, #16]	; (8011cc8 <prvResetNextTaskUnblockTime+0x3c>)
 8011cb6:	6013      	str	r3, [r2, #0]
}
 8011cb8:	bf00      	nop
 8011cba:	370c      	adds	r7, #12
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr
 8011cc4:	20000360 	.word	0x20000360
 8011cc8:	200003c8 	.word	0x200003c8

08011ccc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011ccc:	b480      	push	{r7}
 8011cce:	b083      	sub	sp, #12
 8011cd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011cd2:	4b0b      	ldr	r3, [pc, #44]	; (8011d00 <xTaskGetSchedulerState+0x34>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d102      	bne.n	8011ce0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011cda:	2301      	movs	r3, #1
 8011cdc:	607b      	str	r3, [r7, #4]
 8011cde:	e008      	b.n	8011cf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ce0:	4b08      	ldr	r3, [pc, #32]	; (8011d04 <xTaskGetSchedulerState+0x38>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d102      	bne.n	8011cee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011ce8:	2302      	movs	r3, #2
 8011cea:	607b      	str	r3, [r7, #4]
 8011cec:	e001      	b.n	8011cf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011cf2:	687b      	ldr	r3, [r7, #4]
	}
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	370c      	adds	r7, #12
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfe:	4770      	bx	lr
 8011d00:	200003b4 	.word	0x200003b4
 8011d04:	200003d0 	.word	0x200003d0

08011d08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011d14:	2300      	movs	r3, #0
 8011d16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d069      	beq.n	8011df2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d22:	4b36      	ldr	r3, [pc, #216]	; (8011dfc <xTaskPriorityInherit+0xf4>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d259      	bcs.n	8011de0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	699b      	ldr	r3, [r3, #24]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	db06      	blt.n	8011d42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d34:	4b31      	ldr	r3, [pc, #196]	; (8011dfc <xTaskPriorityInherit+0xf4>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d3a:	f1c3 0207 	rsb	r2, r3, #7
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	6959      	ldr	r1, [r3, #20]
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	009b      	lsls	r3, r3, #2
 8011d4e:	4413      	add	r3, r2
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	4a2b      	ldr	r2, [pc, #172]	; (8011e00 <xTaskPriorityInherit+0xf8>)
 8011d54:	4413      	add	r3, r2
 8011d56:	4299      	cmp	r1, r3
 8011d58:	d13a      	bne.n	8011dd0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7fe fcfb 	bl	801075a <uxListRemove>
 8011d64:	4603      	mov	r3, r0
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d115      	bne.n	8011d96 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d6e:	4924      	ldr	r1, [pc, #144]	; (8011e00 <xTaskPriorityInherit+0xf8>)
 8011d70:	4613      	mov	r3, r2
 8011d72:	009b      	lsls	r3, r3, #2
 8011d74:	4413      	add	r3, r2
 8011d76:	009b      	lsls	r3, r3, #2
 8011d78:	440b      	add	r3, r1
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d10a      	bne.n	8011d96 <xTaskPriorityInherit+0x8e>
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d84:	2201      	movs	r2, #1
 8011d86:	fa02 f303 	lsl.w	r3, r2, r3
 8011d8a:	43da      	mvns	r2, r3
 8011d8c:	4b1d      	ldr	r3, [pc, #116]	; (8011e04 <xTaskPriorityInherit+0xfc>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	4013      	ands	r3, r2
 8011d92:	4a1c      	ldr	r2, [pc, #112]	; (8011e04 <xTaskPriorityInherit+0xfc>)
 8011d94:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011d96:	4b19      	ldr	r3, [pc, #100]	; (8011dfc <xTaskPriorityInherit+0xf4>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011da4:	2201      	movs	r2, #1
 8011da6:	409a      	lsls	r2, r3
 8011da8:	4b16      	ldr	r3, [pc, #88]	; (8011e04 <xTaskPriorityInherit+0xfc>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	4313      	orrs	r3, r2
 8011dae:	4a15      	ldr	r2, [pc, #84]	; (8011e04 <xTaskPriorityInherit+0xfc>)
 8011db0:	6013      	str	r3, [r2, #0]
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011db6:	4613      	mov	r3, r2
 8011db8:	009b      	lsls	r3, r3, #2
 8011dba:	4413      	add	r3, r2
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	4a10      	ldr	r2, [pc, #64]	; (8011e00 <xTaskPriorityInherit+0xf8>)
 8011dc0:	441a      	add	r2, r3
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	3304      	adds	r3, #4
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	4610      	mov	r0, r2
 8011dca:	f7fe fc69 	bl	80106a0 <vListInsertEnd>
 8011dce:	e004      	b.n	8011dda <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011dd0:	4b0a      	ldr	r3, [pc, #40]	; (8011dfc <xTaskPriorityInherit+0xf4>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011dda:	2301      	movs	r3, #1
 8011ddc:	60fb      	str	r3, [r7, #12]
 8011dde:	e008      	b.n	8011df2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011de4:	4b05      	ldr	r3, [pc, #20]	; (8011dfc <xTaskPriorityInherit+0xf4>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d201      	bcs.n	8011df2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011dee:	2301      	movs	r3, #1
 8011df0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011df2:	68fb      	ldr	r3, [r7, #12]
	}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3710      	adds	r7, #16
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	200002a8 	.word	0x200002a8
 8011e00:	200002ac 	.word	0x200002ac
 8011e04:	200003b0 	.word	0x200003b0

08011e08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b086      	sub	sp, #24
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011e14:	2300      	movs	r3, #0
 8011e16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d070      	beq.n	8011f00 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011e1e:	4b3b      	ldr	r3, [pc, #236]	; (8011f0c <xTaskPriorityDisinherit+0x104>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	693a      	ldr	r2, [r7, #16]
 8011e24:	429a      	cmp	r2, r3
 8011e26:	d00b      	beq.n	8011e40 <xTaskPriorityDisinherit+0x38>
 8011e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e2c:	b672      	cpsid	i
 8011e2e:	f383 8811 	msr	BASEPRI, r3
 8011e32:	f3bf 8f6f 	isb	sy
 8011e36:	f3bf 8f4f 	dsb	sy
 8011e3a:	b662      	cpsie	i
 8011e3c:	60fb      	str	r3, [r7, #12]
 8011e3e:	e7fe      	b.n	8011e3e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d10b      	bne.n	8011e60 <xTaskPriorityDisinherit+0x58>
 8011e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e4c:	b672      	cpsid	i
 8011e4e:	f383 8811 	msr	BASEPRI, r3
 8011e52:	f3bf 8f6f 	isb	sy
 8011e56:	f3bf 8f4f 	dsb	sy
 8011e5a:	b662      	cpsie	i
 8011e5c:	60bb      	str	r3, [r7, #8]
 8011e5e:	e7fe      	b.n	8011e5e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e64:	1e5a      	subs	r2, r3, #1
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e6e:	693b      	ldr	r3, [r7, #16]
 8011e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d044      	beq.n	8011f00 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d140      	bne.n	8011f00 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	3304      	adds	r3, #4
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7fe fc69 	bl	801075a <uxListRemove>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d115      	bne.n	8011eba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e92:	491f      	ldr	r1, [pc, #124]	; (8011f10 <xTaskPriorityDisinherit+0x108>)
 8011e94:	4613      	mov	r3, r2
 8011e96:	009b      	lsls	r3, r3, #2
 8011e98:	4413      	add	r3, r2
 8011e9a:	009b      	lsls	r3, r3, #2
 8011e9c:	440b      	add	r3, r1
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d10a      	bne.n	8011eba <xTaskPriorityDisinherit+0xb2>
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ea8:	2201      	movs	r2, #1
 8011eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8011eae:	43da      	mvns	r2, r3
 8011eb0:	4b18      	ldr	r3, [pc, #96]	; (8011f14 <xTaskPriorityDisinherit+0x10c>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	4013      	ands	r3, r2
 8011eb6:	4a17      	ldr	r2, [pc, #92]	; (8011f14 <xTaskPriorityDisinherit+0x10c>)
 8011eb8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ec6:	f1c3 0207 	rsb	r2, r3, #7
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	409a      	lsls	r2, r3
 8011ed6:	4b0f      	ldr	r3, [pc, #60]	; (8011f14 <xTaskPriorityDisinherit+0x10c>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	4313      	orrs	r3, r2
 8011edc:	4a0d      	ldr	r2, [pc, #52]	; (8011f14 <xTaskPriorityDisinherit+0x10c>)
 8011ede:	6013      	str	r3, [r2, #0]
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ee4:	4613      	mov	r3, r2
 8011ee6:	009b      	lsls	r3, r3, #2
 8011ee8:	4413      	add	r3, r2
 8011eea:	009b      	lsls	r3, r3, #2
 8011eec:	4a08      	ldr	r2, [pc, #32]	; (8011f10 <xTaskPriorityDisinherit+0x108>)
 8011eee:	441a      	add	r2, r3
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	3304      	adds	r3, #4
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	4610      	mov	r0, r2
 8011ef8:	f7fe fbd2 	bl	80106a0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011efc:	2301      	movs	r3, #1
 8011efe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f00:	697b      	ldr	r3, [r7, #20]
	}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3718      	adds	r7, #24
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	200002a8 	.word	0x200002a8
 8011f10:	200002ac 	.word	0x200002ac
 8011f14:	200003b0 	.word	0x200003b0

08011f18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b088      	sub	sp, #32
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011f26:	2301      	movs	r3, #1
 8011f28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	f000 8085 	beq.w	801203c <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011f32:	69bb      	ldr	r3, [r7, #24]
 8011f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d10b      	bne.n	8011f52 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8011f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f3e:	b672      	cpsid	i
 8011f40:	f383 8811 	msr	BASEPRI, r3
 8011f44:	f3bf 8f6f 	isb	sy
 8011f48:	f3bf 8f4f 	dsb	sy
 8011f4c:	b662      	cpsie	i
 8011f4e:	60fb      	str	r3, [r7, #12]
 8011f50:	e7fe      	b.n	8011f50 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011f52:	69bb      	ldr	r3, [r7, #24]
 8011f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f56:	683a      	ldr	r2, [r7, #0]
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d902      	bls.n	8011f62 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	61fb      	str	r3, [r7, #28]
 8011f60:	e002      	b.n	8011f68 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011f62:	69bb      	ldr	r3, [r7, #24]
 8011f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f66:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011f68:	69bb      	ldr	r3, [r7, #24]
 8011f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f6c:	69fa      	ldr	r2, [r7, #28]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d064      	beq.n	801203c <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011f72:	69bb      	ldr	r3, [r7, #24]
 8011f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f76:	697a      	ldr	r2, [r7, #20]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d15f      	bne.n	801203c <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011f7c:	4b31      	ldr	r3, [pc, #196]	; (8012044 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	69ba      	ldr	r2, [r7, #24]
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d10b      	bne.n	8011f9e <vTaskPriorityDisinheritAfterTimeout+0x86>
 8011f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f8a:	b672      	cpsid	i
 8011f8c:	f383 8811 	msr	BASEPRI, r3
 8011f90:	f3bf 8f6f 	isb	sy
 8011f94:	f3bf 8f4f 	dsb	sy
 8011f98:	b662      	cpsie	i
 8011f9a:	60bb      	str	r3, [r7, #8]
 8011f9c:	e7fe      	b.n	8011f9c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011f9e:	69bb      	ldr	r3, [r7, #24]
 8011fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fa2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011fa4:	69bb      	ldr	r3, [r7, #24]
 8011fa6:	69fa      	ldr	r2, [r7, #28]
 8011fa8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011faa:	69bb      	ldr	r3, [r7, #24]
 8011fac:	699b      	ldr	r3, [r3, #24]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	db04      	blt.n	8011fbc <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fb2:	69fb      	ldr	r3, [r7, #28]
 8011fb4:	f1c3 0207 	rsb	r2, r3, #7
 8011fb8:	69bb      	ldr	r3, [r7, #24]
 8011fba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011fbc:	69bb      	ldr	r3, [r7, #24]
 8011fbe:	6959      	ldr	r1, [r3, #20]
 8011fc0:	693a      	ldr	r2, [r7, #16]
 8011fc2:	4613      	mov	r3, r2
 8011fc4:	009b      	lsls	r3, r3, #2
 8011fc6:	4413      	add	r3, r2
 8011fc8:	009b      	lsls	r3, r3, #2
 8011fca:	4a1f      	ldr	r2, [pc, #124]	; (8012048 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8011fcc:	4413      	add	r3, r2
 8011fce:	4299      	cmp	r1, r3
 8011fd0:	d134      	bne.n	801203c <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011fd2:	69bb      	ldr	r3, [r7, #24]
 8011fd4:	3304      	adds	r3, #4
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fe fbbf 	bl	801075a <uxListRemove>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d115      	bne.n	801200e <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011fe2:	69bb      	ldr	r3, [r7, #24]
 8011fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fe6:	4918      	ldr	r1, [pc, #96]	; (8012048 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8011fe8:	4613      	mov	r3, r2
 8011fea:	009b      	lsls	r3, r3, #2
 8011fec:	4413      	add	r3, r2
 8011fee:	009b      	lsls	r3, r3, #2
 8011ff0:	440b      	add	r3, r1
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d10a      	bne.n	801200e <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8011ff8:	69bb      	ldr	r3, [r7, #24]
 8011ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ffc:	2201      	movs	r2, #1
 8011ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8012002:	43da      	mvns	r2, r3
 8012004:	4b11      	ldr	r3, [pc, #68]	; (801204c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	4013      	ands	r3, r2
 801200a:	4a10      	ldr	r2, [pc, #64]	; (801204c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801200c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801200e:	69bb      	ldr	r3, [r7, #24]
 8012010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012012:	2201      	movs	r2, #1
 8012014:	409a      	lsls	r2, r3
 8012016:	4b0d      	ldr	r3, [pc, #52]	; (801204c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	4313      	orrs	r3, r2
 801201c:	4a0b      	ldr	r2, [pc, #44]	; (801204c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801201e:	6013      	str	r3, [r2, #0]
 8012020:	69bb      	ldr	r3, [r7, #24]
 8012022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012024:	4613      	mov	r3, r2
 8012026:	009b      	lsls	r3, r3, #2
 8012028:	4413      	add	r3, r2
 801202a:	009b      	lsls	r3, r3, #2
 801202c:	4a06      	ldr	r2, [pc, #24]	; (8012048 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801202e:	441a      	add	r2, r3
 8012030:	69bb      	ldr	r3, [r7, #24]
 8012032:	3304      	adds	r3, #4
 8012034:	4619      	mov	r1, r3
 8012036:	4610      	mov	r0, r2
 8012038:	f7fe fb32 	bl	80106a0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801203c:	bf00      	nop
 801203e:	3720      	adds	r7, #32
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	200002a8 	.word	0x200002a8
 8012048:	200002ac 	.word	0x200002ac
 801204c:	200003b0 	.word	0x200003b0

08012050 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012050:	b480      	push	{r7}
 8012052:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012054:	4b07      	ldr	r3, [pc, #28]	; (8012074 <pvTaskIncrementMutexHeldCount+0x24>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d004      	beq.n	8012066 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801205c:	4b05      	ldr	r3, [pc, #20]	; (8012074 <pvTaskIncrementMutexHeldCount+0x24>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012062:	3201      	adds	r2, #1
 8012064:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012066:	4b03      	ldr	r3, [pc, #12]	; (8012074 <pvTaskIncrementMutexHeldCount+0x24>)
 8012068:	681b      	ldr	r3, [r3, #0]
	}
 801206a:	4618      	mov	r0, r3
 801206c:	46bd      	mov	sp, r7
 801206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012072:	4770      	bx	lr
 8012074:	200002a8 	.word	0x200002a8

08012078 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b084      	sub	sp, #16
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012082:	4b29      	ldr	r3, [pc, #164]	; (8012128 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012088:	4b28      	ldr	r3, [pc, #160]	; (801212c <prvAddCurrentTaskToDelayedList+0xb4>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	3304      	adds	r3, #4
 801208e:	4618      	mov	r0, r3
 8012090:	f7fe fb63 	bl	801075a <uxListRemove>
 8012094:	4603      	mov	r3, r0
 8012096:	2b00      	cmp	r3, #0
 8012098:	d10b      	bne.n	80120b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801209a:	4b24      	ldr	r3, [pc, #144]	; (801212c <prvAddCurrentTaskToDelayedList+0xb4>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120a0:	2201      	movs	r2, #1
 80120a2:	fa02 f303 	lsl.w	r3, r2, r3
 80120a6:	43da      	mvns	r2, r3
 80120a8:	4b21      	ldr	r3, [pc, #132]	; (8012130 <prvAddCurrentTaskToDelayedList+0xb8>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	4013      	ands	r3, r2
 80120ae:	4a20      	ldr	r2, [pc, #128]	; (8012130 <prvAddCurrentTaskToDelayedList+0xb8>)
 80120b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b8:	d10a      	bne.n	80120d0 <prvAddCurrentTaskToDelayedList+0x58>
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d007      	beq.n	80120d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80120c0:	4b1a      	ldr	r3, [pc, #104]	; (801212c <prvAddCurrentTaskToDelayedList+0xb4>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	3304      	adds	r3, #4
 80120c6:	4619      	mov	r1, r3
 80120c8:	481a      	ldr	r0, [pc, #104]	; (8012134 <prvAddCurrentTaskToDelayedList+0xbc>)
 80120ca:	f7fe fae9 	bl	80106a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80120ce:	e026      	b.n	801211e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80120d0:	68fa      	ldr	r2, [r7, #12]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	4413      	add	r3, r2
 80120d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80120d8:	4b14      	ldr	r3, [pc, #80]	; (801212c <prvAddCurrentTaskToDelayedList+0xb4>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	68ba      	ldr	r2, [r7, #8]
 80120de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80120e0:	68ba      	ldr	r2, [r7, #8]
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d209      	bcs.n	80120fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80120e8:	4b13      	ldr	r3, [pc, #76]	; (8012138 <prvAddCurrentTaskToDelayedList+0xc0>)
 80120ea:	681a      	ldr	r2, [r3, #0]
 80120ec:	4b0f      	ldr	r3, [pc, #60]	; (801212c <prvAddCurrentTaskToDelayedList+0xb4>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	3304      	adds	r3, #4
 80120f2:	4619      	mov	r1, r3
 80120f4:	4610      	mov	r0, r2
 80120f6:	f7fe faf7 	bl	80106e8 <vListInsert>
}
 80120fa:	e010      	b.n	801211e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80120fc:	4b0f      	ldr	r3, [pc, #60]	; (801213c <prvAddCurrentTaskToDelayedList+0xc4>)
 80120fe:	681a      	ldr	r2, [r3, #0]
 8012100:	4b0a      	ldr	r3, [pc, #40]	; (801212c <prvAddCurrentTaskToDelayedList+0xb4>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	3304      	adds	r3, #4
 8012106:	4619      	mov	r1, r3
 8012108:	4610      	mov	r0, r2
 801210a:	f7fe faed 	bl	80106e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801210e:	4b0c      	ldr	r3, [pc, #48]	; (8012140 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	68ba      	ldr	r2, [r7, #8]
 8012114:	429a      	cmp	r2, r3
 8012116:	d202      	bcs.n	801211e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012118:	4a09      	ldr	r2, [pc, #36]	; (8012140 <prvAddCurrentTaskToDelayedList+0xc8>)
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	6013      	str	r3, [r2, #0]
}
 801211e:	bf00      	nop
 8012120:	3710      	adds	r7, #16
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	200003ac 	.word	0x200003ac
 801212c:	200002a8 	.word	0x200002a8
 8012130:	200003b0 	.word	0x200003b0
 8012134:	20000394 	.word	0x20000394
 8012138:	20000364 	.word	0x20000364
 801213c:	20000360 	.word	0x20000360
 8012140:	200003c8 	.word	0x200003c8

08012144 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012144:	b480      	push	{r7}
 8012146:	b085      	sub	sp, #20
 8012148:	af00      	add	r7, sp, #0
 801214a:	60f8      	str	r0, [r7, #12]
 801214c:	60b9      	str	r1, [r7, #8]
 801214e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	3b04      	subs	r3, #4
 8012154:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801215c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	3b04      	subs	r3, #4
 8012162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	f023 0201 	bic.w	r2, r3, #1
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	3b04      	subs	r3, #4
 8012172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012174:	4a0c      	ldr	r2, [pc, #48]	; (80121a8 <pxPortInitialiseStack+0x64>)
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	3b14      	subs	r3, #20
 801217e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	3b04      	subs	r3, #4
 801218a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	f06f 0202 	mvn.w	r2, #2
 8012192:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	3b20      	subs	r3, #32
 8012198:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801219a:	68fb      	ldr	r3, [r7, #12]
}
 801219c:	4618      	mov	r0, r3
 801219e:	3714      	adds	r7, #20
 80121a0:	46bd      	mov	sp, r7
 80121a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a6:	4770      	bx	lr
 80121a8:	080121ad 	.word	0x080121ad

080121ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80121ac:	b480      	push	{r7}
 80121ae:	b085      	sub	sp, #20
 80121b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80121b2:	2300      	movs	r3, #0
 80121b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80121b6:	4b13      	ldr	r3, [pc, #76]	; (8012204 <prvTaskExitError+0x58>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121be:	d00b      	beq.n	80121d8 <prvTaskExitError+0x2c>
 80121c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c4:	b672      	cpsid	i
 80121c6:	f383 8811 	msr	BASEPRI, r3
 80121ca:	f3bf 8f6f 	isb	sy
 80121ce:	f3bf 8f4f 	dsb	sy
 80121d2:	b662      	cpsie	i
 80121d4:	60fb      	str	r3, [r7, #12]
 80121d6:	e7fe      	b.n	80121d6 <prvTaskExitError+0x2a>
 80121d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121dc:	b672      	cpsid	i
 80121de:	f383 8811 	msr	BASEPRI, r3
 80121e2:	f3bf 8f6f 	isb	sy
 80121e6:	f3bf 8f4f 	dsb	sy
 80121ea:	b662      	cpsie	i
 80121ec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80121ee:	bf00      	nop
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d0fc      	beq.n	80121f0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80121f6:	bf00      	nop
 80121f8:	3714      	adds	r7, #20
 80121fa:	46bd      	mov	sp, r7
 80121fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012200:	4770      	bx	lr
 8012202:	bf00      	nop
 8012204:	2000001c 	.word	0x2000001c
	...

08012210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012210:	4b07      	ldr	r3, [pc, #28]	; (8012230 <pxCurrentTCBConst2>)
 8012212:	6819      	ldr	r1, [r3, #0]
 8012214:	6808      	ldr	r0, [r1, #0]
 8012216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801221a:	f380 8809 	msr	PSP, r0
 801221e:	f3bf 8f6f 	isb	sy
 8012222:	f04f 0000 	mov.w	r0, #0
 8012226:	f380 8811 	msr	BASEPRI, r0
 801222a:	4770      	bx	lr
 801222c:	f3af 8000 	nop.w

08012230 <pxCurrentTCBConst2>:
 8012230:	200002a8 	.word	0x200002a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012234:	bf00      	nop
 8012236:	bf00      	nop

08012238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012238:	4808      	ldr	r0, [pc, #32]	; (801225c <prvPortStartFirstTask+0x24>)
 801223a:	6800      	ldr	r0, [r0, #0]
 801223c:	6800      	ldr	r0, [r0, #0]
 801223e:	f380 8808 	msr	MSP, r0
 8012242:	f04f 0000 	mov.w	r0, #0
 8012246:	f380 8814 	msr	CONTROL, r0
 801224a:	b662      	cpsie	i
 801224c:	b661      	cpsie	f
 801224e:	f3bf 8f4f 	dsb	sy
 8012252:	f3bf 8f6f 	isb	sy
 8012256:	df00      	svc	0
 8012258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801225a:	bf00      	nop
 801225c:	e000ed08 	.word	0xe000ed08

08012260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012266:	4b36      	ldr	r3, [pc, #216]	; (8012340 <xPortStartScheduler+0xe0>)
 8012268:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	b2db      	uxtb	r3, r3
 8012270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	22ff      	movs	r2, #255	; 0xff
 8012276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	b2db      	uxtb	r3, r3
 801227e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012280:	78fb      	ldrb	r3, [r7, #3]
 8012282:	b2db      	uxtb	r3, r3
 8012284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012288:	b2da      	uxtb	r2, r3
 801228a:	4b2e      	ldr	r3, [pc, #184]	; (8012344 <xPortStartScheduler+0xe4>)
 801228c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801228e:	4b2e      	ldr	r3, [pc, #184]	; (8012348 <xPortStartScheduler+0xe8>)
 8012290:	2207      	movs	r2, #7
 8012292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012294:	e009      	b.n	80122aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012296:	4b2c      	ldr	r3, [pc, #176]	; (8012348 <xPortStartScheduler+0xe8>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	3b01      	subs	r3, #1
 801229c:	4a2a      	ldr	r2, [pc, #168]	; (8012348 <xPortStartScheduler+0xe8>)
 801229e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80122a0:	78fb      	ldrb	r3, [r7, #3]
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	005b      	lsls	r3, r3, #1
 80122a6:	b2db      	uxtb	r3, r3
 80122a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80122aa:	78fb      	ldrb	r3, [r7, #3]
 80122ac:	b2db      	uxtb	r3, r3
 80122ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122b2:	2b80      	cmp	r3, #128	; 0x80
 80122b4:	d0ef      	beq.n	8012296 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80122b6:	4b24      	ldr	r3, [pc, #144]	; (8012348 <xPortStartScheduler+0xe8>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	f1c3 0307 	rsb	r3, r3, #7
 80122be:	2b04      	cmp	r3, #4
 80122c0:	d00b      	beq.n	80122da <xPortStartScheduler+0x7a>
 80122c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c6:	b672      	cpsid	i
 80122c8:	f383 8811 	msr	BASEPRI, r3
 80122cc:	f3bf 8f6f 	isb	sy
 80122d0:	f3bf 8f4f 	dsb	sy
 80122d4:	b662      	cpsie	i
 80122d6:	60bb      	str	r3, [r7, #8]
 80122d8:	e7fe      	b.n	80122d8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80122da:	4b1b      	ldr	r3, [pc, #108]	; (8012348 <xPortStartScheduler+0xe8>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	021b      	lsls	r3, r3, #8
 80122e0:	4a19      	ldr	r2, [pc, #100]	; (8012348 <xPortStartScheduler+0xe8>)
 80122e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80122e4:	4b18      	ldr	r3, [pc, #96]	; (8012348 <xPortStartScheduler+0xe8>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80122ec:	4a16      	ldr	r2, [pc, #88]	; (8012348 <xPortStartScheduler+0xe8>)
 80122ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	b2da      	uxtb	r2, r3
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80122f8:	4b14      	ldr	r3, [pc, #80]	; (801234c <xPortStartScheduler+0xec>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	4a13      	ldr	r2, [pc, #76]	; (801234c <xPortStartScheduler+0xec>)
 80122fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012302:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012304:	4b11      	ldr	r3, [pc, #68]	; (801234c <xPortStartScheduler+0xec>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	4a10      	ldr	r2, [pc, #64]	; (801234c <xPortStartScheduler+0xec>)
 801230a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801230e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012310:	f000 f8d4 	bl	80124bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012314:	4b0e      	ldr	r3, [pc, #56]	; (8012350 <xPortStartScheduler+0xf0>)
 8012316:	2200      	movs	r2, #0
 8012318:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801231a:	f000 f8f3 	bl	8012504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801231e:	4b0d      	ldr	r3, [pc, #52]	; (8012354 <xPortStartScheduler+0xf4>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	4a0c      	ldr	r2, [pc, #48]	; (8012354 <xPortStartScheduler+0xf4>)
 8012324:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012328:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801232a:	f7ff ff85 	bl	8012238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801232e:	f7ff fa8d 	bl	801184c <vTaskSwitchContext>
	prvTaskExitError();
 8012332:	f7ff ff3b 	bl	80121ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012336:	2300      	movs	r3, #0
}
 8012338:	4618      	mov	r0, r3
 801233a:	3710      	adds	r7, #16
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}
 8012340:	e000e400 	.word	0xe000e400
 8012344:	200003d4 	.word	0x200003d4
 8012348:	200003d8 	.word	0x200003d8
 801234c:	e000ed20 	.word	0xe000ed20
 8012350:	2000001c 	.word	0x2000001c
 8012354:	e000ef34 	.word	0xe000ef34

08012358 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012358:	b480      	push	{r7}
 801235a:	b083      	sub	sp, #12
 801235c:	af00      	add	r7, sp, #0
 801235e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012362:	b672      	cpsid	i
 8012364:	f383 8811 	msr	BASEPRI, r3
 8012368:	f3bf 8f6f 	isb	sy
 801236c:	f3bf 8f4f 	dsb	sy
 8012370:	b662      	cpsie	i
 8012372:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012374:	4b0f      	ldr	r3, [pc, #60]	; (80123b4 <vPortEnterCritical+0x5c>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	3301      	adds	r3, #1
 801237a:	4a0e      	ldr	r2, [pc, #56]	; (80123b4 <vPortEnterCritical+0x5c>)
 801237c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801237e:	4b0d      	ldr	r3, [pc, #52]	; (80123b4 <vPortEnterCritical+0x5c>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	2b01      	cmp	r3, #1
 8012384:	d110      	bne.n	80123a8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012386:	4b0c      	ldr	r3, [pc, #48]	; (80123b8 <vPortEnterCritical+0x60>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	b2db      	uxtb	r3, r3
 801238c:	2b00      	cmp	r3, #0
 801238e:	d00b      	beq.n	80123a8 <vPortEnterCritical+0x50>
 8012390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012394:	b672      	cpsid	i
 8012396:	f383 8811 	msr	BASEPRI, r3
 801239a:	f3bf 8f6f 	isb	sy
 801239e:	f3bf 8f4f 	dsb	sy
 80123a2:	b662      	cpsie	i
 80123a4:	603b      	str	r3, [r7, #0]
 80123a6:	e7fe      	b.n	80123a6 <vPortEnterCritical+0x4e>
	}
}
 80123a8:	bf00      	nop
 80123aa:	370c      	adds	r7, #12
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr
 80123b4:	2000001c 	.word	0x2000001c
 80123b8:	e000ed04 	.word	0xe000ed04

080123bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80123bc:	b480      	push	{r7}
 80123be:	b083      	sub	sp, #12
 80123c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80123c2:	4b12      	ldr	r3, [pc, #72]	; (801240c <vPortExitCritical+0x50>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d10b      	bne.n	80123e2 <vPortExitCritical+0x26>
 80123ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ce:	b672      	cpsid	i
 80123d0:	f383 8811 	msr	BASEPRI, r3
 80123d4:	f3bf 8f6f 	isb	sy
 80123d8:	f3bf 8f4f 	dsb	sy
 80123dc:	b662      	cpsie	i
 80123de:	607b      	str	r3, [r7, #4]
 80123e0:	e7fe      	b.n	80123e0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80123e2:	4b0a      	ldr	r3, [pc, #40]	; (801240c <vPortExitCritical+0x50>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	3b01      	subs	r3, #1
 80123e8:	4a08      	ldr	r2, [pc, #32]	; (801240c <vPortExitCritical+0x50>)
 80123ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80123ec:	4b07      	ldr	r3, [pc, #28]	; (801240c <vPortExitCritical+0x50>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d104      	bne.n	80123fe <vPortExitCritical+0x42>
 80123f4:	2300      	movs	r3, #0
 80123f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80123fe:	bf00      	nop
 8012400:	370c      	adds	r7, #12
 8012402:	46bd      	mov	sp, r7
 8012404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012408:	4770      	bx	lr
 801240a:	bf00      	nop
 801240c:	2000001c 	.word	0x2000001c

08012410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012410:	f3ef 8009 	mrs	r0, PSP
 8012414:	f3bf 8f6f 	isb	sy
 8012418:	4b15      	ldr	r3, [pc, #84]	; (8012470 <pxCurrentTCBConst>)
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	f01e 0f10 	tst.w	lr, #16
 8012420:	bf08      	it	eq
 8012422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801242a:	6010      	str	r0, [r2, #0]
 801242c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012434:	b672      	cpsid	i
 8012436:	f380 8811 	msr	BASEPRI, r0
 801243a:	f3bf 8f4f 	dsb	sy
 801243e:	f3bf 8f6f 	isb	sy
 8012442:	b662      	cpsie	i
 8012444:	f7ff fa02 	bl	801184c <vTaskSwitchContext>
 8012448:	f04f 0000 	mov.w	r0, #0
 801244c:	f380 8811 	msr	BASEPRI, r0
 8012450:	bc09      	pop	{r0, r3}
 8012452:	6819      	ldr	r1, [r3, #0]
 8012454:	6808      	ldr	r0, [r1, #0]
 8012456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801245a:	f01e 0f10 	tst.w	lr, #16
 801245e:	bf08      	it	eq
 8012460:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012464:	f380 8809 	msr	PSP, r0
 8012468:	f3bf 8f6f 	isb	sy
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop

08012470 <pxCurrentTCBConst>:
 8012470:	200002a8 	.word	0x200002a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012474:	bf00      	nop
 8012476:	bf00      	nop

08012478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
	__asm volatile
 801247e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012482:	b672      	cpsid	i
 8012484:	f383 8811 	msr	BASEPRI, r3
 8012488:	f3bf 8f6f 	isb	sy
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	b662      	cpsie	i
 8012492:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012494:	f7ff f920 	bl	80116d8 <xTaskIncrementTick>
 8012498:	4603      	mov	r3, r0
 801249a:	2b00      	cmp	r3, #0
 801249c:	d003      	beq.n	80124a6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801249e:	4b06      	ldr	r3, [pc, #24]	; (80124b8 <xPortSysTickHandler+0x40>)
 80124a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124a4:	601a      	str	r2, [r3, #0]
 80124a6:	2300      	movs	r3, #0
 80124a8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80124b0:	bf00      	nop
 80124b2:	3708      	adds	r7, #8
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}
 80124b8:	e000ed04 	.word	0xe000ed04

080124bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80124bc:	b480      	push	{r7}
 80124be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80124c0:	4b0b      	ldr	r3, [pc, #44]	; (80124f0 <vPortSetupTimerInterrupt+0x34>)
 80124c2:	2200      	movs	r2, #0
 80124c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80124c6:	4b0b      	ldr	r3, [pc, #44]	; (80124f4 <vPortSetupTimerInterrupt+0x38>)
 80124c8:	2200      	movs	r2, #0
 80124ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80124cc:	4b0a      	ldr	r3, [pc, #40]	; (80124f8 <vPortSetupTimerInterrupt+0x3c>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	4a0a      	ldr	r2, [pc, #40]	; (80124fc <vPortSetupTimerInterrupt+0x40>)
 80124d2:	fba2 2303 	umull	r2, r3, r2, r3
 80124d6:	099b      	lsrs	r3, r3, #6
 80124d8:	4a09      	ldr	r2, [pc, #36]	; (8012500 <vPortSetupTimerInterrupt+0x44>)
 80124da:	3b01      	subs	r3, #1
 80124dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80124de:	4b04      	ldr	r3, [pc, #16]	; (80124f0 <vPortSetupTimerInterrupt+0x34>)
 80124e0:	2207      	movs	r2, #7
 80124e2:	601a      	str	r2, [r3, #0]
}
 80124e4:	bf00      	nop
 80124e6:	46bd      	mov	sp, r7
 80124e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ec:	4770      	bx	lr
 80124ee:	bf00      	nop
 80124f0:	e000e010 	.word	0xe000e010
 80124f4:	e000e018 	.word	0xe000e018
 80124f8:	20000010 	.word	0x20000010
 80124fc:	10624dd3 	.word	0x10624dd3
 8012500:	e000e014 	.word	0xe000e014

08012504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012514 <vPortEnableVFP+0x10>
 8012508:	6801      	ldr	r1, [r0, #0]
 801250a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801250e:	6001      	str	r1, [r0, #0]
 8012510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012512:	bf00      	nop
 8012514:	e000ed88 	.word	0xe000ed88

08012518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012518:	b480      	push	{r7}
 801251a:	b085      	sub	sp, #20
 801251c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801251e:	f3ef 8305 	mrs	r3, IPSR
 8012522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2b0f      	cmp	r3, #15
 8012528:	d915      	bls.n	8012556 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801252a:	4a18      	ldr	r2, [pc, #96]	; (801258c <vPortValidateInterruptPriority+0x74>)
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	4413      	add	r3, r2
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012534:	4b16      	ldr	r3, [pc, #88]	; (8012590 <vPortValidateInterruptPriority+0x78>)
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	7afa      	ldrb	r2, [r7, #11]
 801253a:	429a      	cmp	r2, r3
 801253c:	d20b      	bcs.n	8012556 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012542:	b672      	cpsid	i
 8012544:	f383 8811 	msr	BASEPRI, r3
 8012548:	f3bf 8f6f 	isb	sy
 801254c:	f3bf 8f4f 	dsb	sy
 8012550:	b662      	cpsie	i
 8012552:	607b      	str	r3, [r7, #4]
 8012554:	e7fe      	b.n	8012554 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012556:	4b0f      	ldr	r3, [pc, #60]	; (8012594 <vPortValidateInterruptPriority+0x7c>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801255e:	4b0e      	ldr	r3, [pc, #56]	; (8012598 <vPortValidateInterruptPriority+0x80>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	429a      	cmp	r2, r3
 8012564:	d90b      	bls.n	801257e <vPortValidateInterruptPriority+0x66>
 8012566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256a:	b672      	cpsid	i
 801256c:	f383 8811 	msr	BASEPRI, r3
 8012570:	f3bf 8f6f 	isb	sy
 8012574:	f3bf 8f4f 	dsb	sy
 8012578:	b662      	cpsie	i
 801257a:	603b      	str	r3, [r7, #0]
 801257c:	e7fe      	b.n	801257c <vPortValidateInterruptPriority+0x64>
	}
 801257e:	bf00      	nop
 8012580:	3714      	adds	r7, #20
 8012582:	46bd      	mov	sp, r7
 8012584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012588:	4770      	bx	lr
 801258a:	bf00      	nop
 801258c:	e000e3f0 	.word	0xe000e3f0
 8012590:	200003d4 	.word	0x200003d4
 8012594:	e000ed0c 	.word	0xe000ed0c
 8012598:	200003d8 	.word	0x200003d8

0801259c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b08a      	sub	sp, #40	; 0x28
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80125a4:	2300      	movs	r3, #0
 80125a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80125a8:	f7fe ffea 	bl	8011580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80125ac:	4b5a      	ldr	r3, [pc, #360]	; (8012718 <pvPortMalloc+0x17c>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d101      	bne.n	80125b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80125b4:	f000 f916 	bl	80127e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80125b8:	4b58      	ldr	r3, [pc, #352]	; (801271c <pvPortMalloc+0x180>)
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4013      	ands	r3, r2
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	f040 8090 	bne.w	80126e6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d01e      	beq.n	801260a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80125cc:	2208      	movs	r2, #8
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	4413      	add	r3, r2
 80125d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f003 0307 	and.w	r3, r3, #7
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d015      	beq.n	801260a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f023 0307 	bic.w	r3, r3, #7
 80125e4:	3308      	adds	r3, #8
 80125e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f003 0307 	and.w	r3, r3, #7
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d00b      	beq.n	801260a <pvPortMalloc+0x6e>
 80125f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f6:	b672      	cpsid	i
 80125f8:	f383 8811 	msr	BASEPRI, r3
 80125fc:	f3bf 8f6f 	isb	sy
 8012600:	f3bf 8f4f 	dsb	sy
 8012604:	b662      	cpsie	i
 8012606:	617b      	str	r3, [r7, #20]
 8012608:	e7fe      	b.n	8012608 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d06a      	beq.n	80126e6 <pvPortMalloc+0x14a>
 8012610:	4b43      	ldr	r3, [pc, #268]	; (8012720 <pvPortMalloc+0x184>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	687a      	ldr	r2, [r7, #4]
 8012616:	429a      	cmp	r2, r3
 8012618:	d865      	bhi.n	80126e6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801261a:	4b42      	ldr	r3, [pc, #264]	; (8012724 <pvPortMalloc+0x188>)
 801261c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801261e:	4b41      	ldr	r3, [pc, #260]	; (8012724 <pvPortMalloc+0x188>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012624:	e004      	b.n	8012630 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012628:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	429a      	cmp	r2, r3
 8012638:	d903      	bls.n	8012642 <pvPortMalloc+0xa6>
 801263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d1f1      	bne.n	8012626 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012642:	4b35      	ldr	r3, [pc, #212]	; (8012718 <pvPortMalloc+0x17c>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012648:	429a      	cmp	r2, r3
 801264a:	d04c      	beq.n	80126e6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801264c:	6a3b      	ldr	r3, [r7, #32]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	2208      	movs	r2, #8
 8012652:	4413      	add	r3, r2
 8012654:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012658:	681a      	ldr	r2, [r3, #0]
 801265a:	6a3b      	ldr	r3, [r7, #32]
 801265c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012660:	685a      	ldr	r2, [r3, #4]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	1ad2      	subs	r2, r2, r3
 8012666:	2308      	movs	r3, #8
 8012668:	005b      	lsls	r3, r3, #1
 801266a:	429a      	cmp	r2, r3
 801266c:	d920      	bls.n	80126b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801266e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	4413      	add	r3, r2
 8012674:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012676:	69bb      	ldr	r3, [r7, #24]
 8012678:	f003 0307 	and.w	r3, r3, #7
 801267c:	2b00      	cmp	r3, #0
 801267e:	d00b      	beq.n	8012698 <pvPortMalloc+0xfc>
 8012680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012684:	b672      	cpsid	i
 8012686:	f383 8811 	msr	BASEPRI, r3
 801268a:	f3bf 8f6f 	isb	sy
 801268e:	f3bf 8f4f 	dsb	sy
 8012692:	b662      	cpsie	i
 8012694:	613b      	str	r3, [r7, #16]
 8012696:	e7fe      	b.n	8012696 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801269a:	685a      	ldr	r2, [r3, #4]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	1ad2      	subs	r2, r2, r3
 80126a0:	69bb      	ldr	r3, [r7, #24]
 80126a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80126a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a6:	687a      	ldr	r2, [r7, #4]
 80126a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80126aa:	69b8      	ldr	r0, [r7, #24]
 80126ac:	f000 f8fc 	bl	80128a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80126b0:	4b1b      	ldr	r3, [pc, #108]	; (8012720 <pvPortMalloc+0x184>)
 80126b2:	681a      	ldr	r2, [r3, #0]
 80126b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b6:	685b      	ldr	r3, [r3, #4]
 80126b8:	1ad3      	subs	r3, r2, r3
 80126ba:	4a19      	ldr	r2, [pc, #100]	; (8012720 <pvPortMalloc+0x184>)
 80126bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80126be:	4b18      	ldr	r3, [pc, #96]	; (8012720 <pvPortMalloc+0x184>)
 80126c0:	681a      	ldr	r2, [r3, #0]
 80126c2:	4b19      	ldr	r3, [pc, #100]	; (8012728 <pvPortMalloc+0x18c>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d203      	bcs.n	80126d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80126ca:	4b15      	ldr	r3, [pc, #84]	; (8012720 <pvPortMalloc+0x184>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	4a16      	ldr	r2, [pc, #88]	; (8012728 <pvPortMalloc+0x18c>)
 80126d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80126d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d4:	685a      	ldr	r2, [r3, #4]
 80126d6:	4b11      	ldr	r3, [pc, #68]	; (801271c <pvPortMalloc+0x180>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	431a      	orrs	r2, r3
 80126dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80126e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e2:	2200      	movs	r2, #0
 80126e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80126e6:	f7fe ff59 	bl	801159c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	f003 0307 	and.w	r3, r3, #7
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d00b      	beq.n	801270c <pvPortMalloc+0x170>
 80126f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f8:	b672      	cpsid	i
 80126fa:	f383 8811 	msr	BASEPRI, r3
 80126fe:	f3bf 8f6f 	isb	sy
 8012702:	f3bf 8f4f 	dsb	sy
 8012706:	b662      	cpsie	i
 8012708:	60fb      	str	r3, [r7, #12]
 801270a:	e7fe      	b.n	801270a <pvPortMalloc+0x16e>
	return pvReturn;
 801270c:	69fb      	ldr	r3, [r7, #28]
}
 801270e:	4618      	mov	r0, r3
 8012710:	3728      	adds	r7, #40	; 0x28
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	20003fe4 	.word	0x20003fe4
 801271c:	20003ff0 	.word	0x20003ff0
 8012720:	20003fe8 	.word	0x20003fe8
 8012724:	20003fdc 	.word	0x20003fdc
 8012728:	20003fec 	.word	0x20003fec

0801272c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b086      	sub	sp, #24
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d04a      	beq.n	80127d4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801273e:	2308      	movs	r3, #8
 8012740:	425b      	negs	r3, r3
 8012742:	697a      	ldr	r2, [r7, #20]
 8012744:	4413      	add	r3, r2
 8012746:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	685a      	ldr	r2, [r3, #4]
 8012750:	4b22      	ldr	r3, [pc, #136]	; (80127dc <vPortFree+0xb0>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	4013      	ands	r3, r2
 8012756:	2b00      	cmp	r3, #0
 8012758:	d10b      	bne.n	8012772 <vPortFree+0x46>
 801275a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801275e:	b672      	cpsid	i
 8012760:	f383 8811 	msr	BASEPRI, r3
 8012764:	f3bf 8f6f 	isb	sy
 8012768:	f3bf 8f4f 	dsb	sy
 801276c:	b662      	cpsie	i
 801276e:	60fb      	str	r3, [r7, #12]
 8012770:	e7fe      	b.n	8012770 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d00b      	beq.n	8012792 <vPortFree+0x66>
 801277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801277e:	b672      	cpsid	i
 8012780:	f383 8811 	msr	BASEPRI, r3
 8012784:	f3bf 8f6f 	isb	sy
 8012788:	f3bf 8f4f 	dsb	sy
 801278c:	b662      	cpsie	i
 801278e:	60bb      	str	r3, [r7, #8]
 8012790:	e7fe      	b.n	8012790 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	685a      	ldr	r2, [r3, #4]
 8012796:	4b11      	ldr	r3, [pc, #68]	; (80127dc <vPortFree+0xb0>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	4013      	ands	r3, r2
 801279c:	2b00      	cmp	r3, #0
 801279e:	d019      	beq.n	80127d4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d115      	bne.n	80127d4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	685a      	ldr	r2, [r3, #4]
 80127ac:	4b0b      	ldr	r3, [pc, #44]	; (80127dc <vPortFree+0xb0>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	43db      	mvns	r3, r3
 80127b2:	401a      	ands	r2, r3
 80127b4:	693b      	ldr	r3, [r7, #16]
 80127b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80127b8:	f7fe fee2 	bl	8011580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	685a      	ldr	r2, [r3, #4]
 80127c0:	4b07      	ldr	r3, [pc, #28]	; (80127e0 <vPortFree+0xb4>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	4413      	add	r3, r2
 80127c6:	4a06      	ldr	r2, [pc, #24]	; (80127e0 <vPortFree+0xb4>)
 80127c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80127ca:	6938      	ldr	r0, [r7, #16]
 80127cc:	f000 f86c 	bl	80128a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80127d0:	f7fe fee4 	bl	801159c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80127d4:	bf00      	nop
 80127d6:	3718      	adds	r7, #24
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}
 80127dc:	20003ff0 	.word	0x20003ff0
 80127e0:	20003fe8 	.word	0x20003fe8

080127e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80127e4:	b480      	push	{r7}
 80127e6:	b085      	sub	sp, #20
 80127e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80127ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80127ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80127f0:	4b27      	ldr	r3, [pc, #156]	; (8012890 <prvHeapInit+0xac>)
 80127f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	f003 0307 	and.w	r3, r3, #7
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d00c      	beq.n	8012818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	3307      	adds	r3, #7
 8012802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	f023 0307 	bic.w	r3, r3, #7
 801280a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801280c:	68ba      	ldr	r2, [r7, #8]
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	1ad3      	subs	r3, r2, r3
 8012812:	4a1f      	ldr	r2, [pc, #124]	; (8012890 <prvHeapInit+0xac>)
 8012814:	4413      	add	r3, r2
 8012816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801281c:	4a1d      	ldr	r2, [pc, #116]	; (8012894 <prvHeapInit+0xb0>)
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012822:	4b1c      	ldr	r3, [pc, #112]	; (8012894 <prvHeapInit+0xb0>)
 8012824:	2200      	movs	r2, #0
 8012826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	4413      	add	r3, r2
 801282e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012830:	2208      	movs	r2, #8
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	1a9b      	subs	r3, r3, r2
 8012836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	f023 0307 	bic.w	r3, r3, #7
 801283e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	4a15      	ldr	r2, [pc, #84]	; (8012898 <prvHeapInit+0xb4>)
 8012844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012846:	4b14      	ldr	r3, [pc, #80]	; (8012898 <prvHeapInit+0xb4>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	2200      	movs	r2, #0
 801284c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801284e:	4b12      	ldr	r3, [pc, #72]	; (8012898 <prvHeapInit+0xb4>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	2200      	movs	r2, #0
 8012854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	68fa      	ldr	r2, [r7, #12]
 801285e:	1ad2      	subs	r2, r2, r3
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012864:	4b0c      	ldr	r3, [pc, #48]	; (8012898 <prvHeapInit+0xb4>)
 8012866:	681a      	ldr	r2, [r3, #0]
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	4a0a      	ldr	r2, [pc, #40]	; (801289c <prvHeapInit+0xb8>)
 8012872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	685b      	ldr	r3, [r3, #4]
 8012878:	4a09      	ldr	r2, [pc, #36]	; (80128a0 <prvHeapInit+0xbc>)
 801287a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801287c:	4b09      	ldr	r3, [pc, #36]	; (80128a4 <prvHeapInit+0xc0>)
 801287e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012882:	601a      	str	r2, [r3, #0]
}
 8012884:	bf00      	nop
 8012886:	3714      	adds	r7, #20
 8012888:	46bd      	mov	sp, r7
 801288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288e:	4770      	bx	lr
 8012890:	200003dc 	.word	0x200003dc
 8012894:	20003fdc 	.word	0x20003fdc
 8012898:	20003fe4 	.word	0x20003fe4
 801289c:	20003fec 	.word	0x20003fec
 80128a0:	20003fe8 	.word	0x20003fe8
 80128a4:	20003ff0 	.word	0x20003ff0

080128a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80128a8:	b480      	push	{r7}
 80128aa:	b085      	sub	sp, #20
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80128b0:	4b28      	ldr	r3, [pc, #160]	; (8012954 <prvInsertBlockIntoFreeList+0xac>)
 80128b2:	60fb      	str	r3, [r7, #12]
 80128b4:	e002      	b.n	80128bc <prvInsertBlockIntoFreeList+0x14>
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	60fb      	str	r3, [r7, #12]
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	687a      	ldr	r2, [r7, #4]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d8f7      	bhi.n	80128b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	685b      	ldr	r3, [r3, #4]
 80128ce:	68ba      	ldr	r2, [r7, #8]
 80128d0:	4413      	add	r3, r2
 80128d2:	687a      	ldr	r2, [r7, #4]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d108      	bne.n	80128ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	685a      	ldr	r2, [r3, #4]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	441a      	add	r2, r3
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	68ba      	ldr	r2, [r7, #8]
 80128f4:	441a      	add	r2, r3
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d118      	bne.n	8012930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	681a      	ldr	r2, [r3, #0]
 8012902:	4b15      	ldr	r3, [pc, #84]	; (8012958 <prvInsertBlockIntoFreeList+0xb0>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	429a      	cmp	r2, r3
 8012908:	d00d      	beq.n	8012926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	685a      	ldr	r2, [r3, #4]
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	685b      	ldr	r3, [r3, #4]
 8012914:	441a      	add	r2, r3
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	681a      	ldr	r2, [r3, #0]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	601a      	str	r2, [r3, #0]
 8012924:	e008      	b.n	8012938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012926:	4b0c      	ldr	r3, [pc, #48]	; (8012958 <prvInsertBlockIntoFreeList+0xb0>)
 8012928:	681a      	ldr	r2, [r3, #0]
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	601a      	str	r2, [r3, #0]
 801292e:	e003      	b.n	8012938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	681a      	ldr	r2, [r3, #0]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012938:	68fa      	ldr	r2, [r7, #12]
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	429a      	cmp	r2, r3
 801293e:	d002      	beq.n	8012946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	687a      	ldr	r2, [r7, #4]
 8012944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012946:	bf00      	nop
 8012948:	3714      	adds	r7, #20
 801294a:	46bd      	mov	sp, r7
 801294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012950:	4770      	bx	lr
 8012952:	bf00      	nop
 8012954:	20003fdc 	.word	0x20003fdc
 8012958:	20003fe4 	.word	0x20003fe4

0801295c <__libc_init_array>:
 801295c:	b570      	push	{r4, r5, r6, lr}
 801295e:	4e0d      	ldr	r6, [pc, #52]	; (8012994 <__libc_init_array+0x38>)
 8012960:	4c0d      	ldr	r4, [pc, #52]	; (8012998 <__libc_init_array+0x3c>)
 8012962:	1ba4      	subs	r4, r4, r6
 8012964:	10a4      	asrs	r4, r4, #2
 8012966:	2500      	movs	r5, #0
 8012968:	42a5      	cmp	r5, r4
 801296a:	d109      	bne.n	8012980 <__libc_init_array+0x24>
 801296c:	4e0b      	ldr	r6, [pc, #44]	; (801299c <__libc_init_array+0x40>)
 801296e:	4c0c      	ldr	r4, [pc, #48]	; (80129a0 <__libc_init_array+0x44>)
 8012970:	f000 f858 	bl	8012a24 <_init>
 8012974:	1ba4      	subs	r4, r4, r6
 8012976:	10a4      	asrs	r4, r4, #2
 8012978:	2500      	movs	r5, #0
 801297a:	42a5      	cmp	r5, r4
 801297c:	d105      	bne.n	801298a <__libc_init_array+0x2e>
 801297e:	bd70      	pop	{r4, r5, r6, pc}
 8012980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012984:	4798      	blx	r3
 8012986:	3501      	adds	r5, #1
 8012988:	e7ee      	b.n	8012968 <__libc_init_array+0xc>
 801298a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801298e:	4798      	blx	r3
 8012990:	3501      	adds	r5, #1
 8012992:	e7f2      	b.n	801297a <__libc_init_array+0x1e>
 8012994:	08012b38 	.word	0x08012b38
 8012998:	08012b38 	.word	0x08012b38
 801299c:	08012b38 	.word	0x08012b38
 80129a0:	08012b3c 	.word	0x08012b3c

080129a4 <memcpy>:
 80129a4:	b510      	push	{r4, lr}
 80129a6:	1e43      	subs	r3, r0, #1
 80129a8:	440a      	add	r2, r1
 80129aa:	4291      	cmp	r1, r2
 80129ac:	d100      	bne.n	80129b0 <memcpy+0xc>
 80129ae:	bd10      	pop	{r4, pc}
 80129b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80129b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80129b8:	e7f7      	b.n	80129aa <memcpy+0x6>

080129ba <memset>:
 80129ba:	4402      	add	r2, r0
 80129bc:	4603      	mov	r3, r0
 80129be:	4293      	cmp	r3, r2
 80129c0:	d100      	bne.n	80129c4 <memset+0xa>
 80129c2:	4770      	bx	lr
 80129c4:	f803 1b01 	strb.w	r1, [r3], #1
 80129c8:	e7f9      	b.n	80129be <memset+0x4>

080129ca <strncmp>:
 80129ca:	b510      	push	{r4, lr}
 80129cc:	b16a      	cbz	r2, 80129ea <strncmp+0x20>
 80129ce:	3901      	subs	r1, #1
 80129d0:	1884      	adds	r4, r0, r2
 80129d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80129d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80129da:	4293      	cmp	r3, r2
 80129dc:	d103      	bne.n	80129e6 <strncmp+0x1c>
 80129de:	42a0      	cmp	r0, r4
 80129e0:	d001      	beq.n	80129e6 <strncmp+0x1c>
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d1f5      	bne.n	80129d2 <strncmp+0x8>
 80129e6:	1a98      	subs	r0, r3, r2
 80129e8:	bd10      	pop	{r4, pc}
 80129ea:	4610      	mov	r0, r2
 80129ec:	e7fc      	b.n	80129e8 <strncmp+0x1e>

080129ee <strstr>:
 80129ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129f0:	7803      	ldrb	r3, [r0, #0]
 80129f2:	b17b      	cbz	r3, 8012a14 <strstr+0x26>
 80129f4:	4604      	mov	r4, r0
 80129f6:	7823      	ldrb	r3, [r4, #0]
 80129f8:	4620      	mov	r0, r4
 80129fa:	1c66      	adds	r6, r4, #1
 80129fc:	b17b      	cbz	r3, 8012a1e <strstr+0x30>
 80129fe:	1e4a      	subs	r2, r1, #1
 8012a00:	1e63      	subs	r3, r4, #1
 8012a02:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8012a06:	b14d      	cbz	r5, 8012a1c <strstr+0x2e>
 8012a08:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8012a0c:	42af      	cmp	r7, r5
 8012a0e:	4634      	mov	r4, r6
 8012a10:	d0f7      	beq.n	8012a02 <strstr+0x14>
 8012a12:	e7f0      	b.n	80129f6 <strstr+0x8>
 8012a14:	780b      	ldrb	r3, [r1, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	bf18      	it	ne
 8012a1a:	2000      	movne	r0, #0
 8012a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	e7fc      	b.n	8012a1c <strstr+0x2e>
	...

08012a24 <_init>:
 8012a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a26:	bf00      	nop
 8012a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a2a:	bc08      	pop	{r3}
 8012a2c:	469e      	mov	lr, r3
 8012a2e:	4770      	bx	lr

08012a30 <_fini>:
 8012a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a32:	bf00      	nop
 8012a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a36:	bc08      	pop	{r3}
 8012a38:	469e      	mov	lr, r3
 8012a3a:	4770      	bx	lr
